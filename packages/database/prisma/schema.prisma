generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SOURCE {
  API
  MANUAL
  SLACK
  DISCOURSE
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum STATUS {
  CONNECTED
  SYNCING
  INSTALLED
  DISCONNECTED
}

model activities {
  id          String  @id @default(cuid())
  external_id String? @unique
  message     String
  reply_to    String?
  react_to    String?
  invite_by   String?

  activity_type_id String
  activity_type    activities_types @relation(fields: [activity_type_id], references: [id], onDelete: Cascade)
  channel_id       String?
  channel          channels?        @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  member_id        String
  member           members          @relation(fields: [member_id], references: [id], onDelete: Cascade)
  workspace_id     String
  workspace        workspaces       @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  files files[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model activities_types {
  id        String  @id @default(cuid())
  name      String
  source    SOURCE
  key       String  @unique
  weight    Int     @default(1)
  deletable Boolean @default(true)

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  activities activities[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model apikeys {
  id    String @id @default(cuid())
  name  String
  token String @unique

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@index([id, token])
}

model channels {
  id           String       @id @default(cuid())
  external_id  String?      @unique
  name         String
  source       SOURCE
  workspace_id String
  workspace    workspaces   @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  activities   activities[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  @@index([id, workspace_id])
}

model companies {
  id         String    @id @default(cuid())
  name       String
  industry   String?
  address    String?
  domain     String?   @unique
  employees  Int?
  founded_at DateTime?
  logo_url   String?
  tags       String[]  @default([])
  source     SOURCE

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  members members[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model files {
  id    String  @id @default(cuid())
  title String?
  url   String

  activity_id String
  activity    activities @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([activity_id])
}

model integrations {
  id           String    @id @default(cuid())
  external_id  String?   @unique
  installed_at DateTime?
  status       STATUS
  details      Json

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model members {
  id           String   @id @default(cuid())
  slack_id     String?  @unique
  discourse_id String?  @unique
  first_name   String?
  last_name    String?
  full_name    String?
  username     String?
  localisation String?
  avatar_url   String?
  bio          String?
  job_title    String?
  search       String
  emails       String[] @default([])
  phones       String[] @default([])
  tags         String[] @default([])
  gender       GENDER?
  source       SOURCE

  company_id   String?
  company      companies? @relation(fields: [company_id], references: [id], onDelete: SetNull)
  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  activities activities[]

  joined_at  DateTime?
  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([id, workspace_id])
}

model tags {
  id          String  @id @default(cuid())
  external_id String? @unique
  name        String
  description String?
  color       String
  source      SOURCE

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model users {
  id              String    @id @default(cuid())
  email           String    @unique
  hashed_password String
  first_name      String?
  last_name       String?
  full_name       String?
  onboarding      DateTime?

  workspace_id String
  workspace    workspaces? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model workflows {
  id          String    @id @default(cuid())
  name        String
  description String?
  nodes       Json[]
  edges       Json[]
  published   Boolean   @default(false)
  last_run_at DateTime?

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model workspaces {
  id           String  @id @default(cuid())
  name         String
  slug         String  @unique
  source       String?
  company_size String?

  users        users[]
  members      members[]
  activities   activities[]
  workflows    workflows[]
  tags         tags[]
  channels     channels[]
  integrations integrations[]
  companies    companies[]
  apiKeys      apikeys[]

  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  activities_types activities_types[]

  @@index([id])
}
