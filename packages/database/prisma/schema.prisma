generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SOURCE {
  API
  BREVO
  DISCOURSE
  DISCORD
  GITHUB
  HUBSPOT
  LINKEDIN
  LIVESTORM
  MANUAL
  SLACK
  X
  YOUTUBE
  ZENDESK
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum STATUS {
  ENABLED
  CONNECTED
  SYNCING
  DISCONNECTED
}

enum PLAN {
  BASIC
  PREMIUM
  BUSINESS
  ENTERPRISE
}

model activities {
  id          String  @id @default(cuid())
  external_id String?
  title       String?
  message     String
  thread_id   String?
  reply_to    String?
  react_to    String?
  invite_to   String?

  activity_type_id String
  activity_type    activities_types @relation(fields: [activity_type_id], references: [id], onDelete: Cascade)
  channel_id       String?
  channel          channels?        @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  event_id         String?
  event            events?          @relation(fields: [event_id], references: [id], onDelete: Cascade)
  member_id        String
  member           members          @relation(fields: [member_id], references: [id], onDelete: Cascade)
  workspace_id     String
  workspace        workspaces       @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  files files[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([external_id, workspace_id])
  @@index([external_id, workspace_id])
  @@index([workspace_id])
}

model activities_types {
  id        String   @id @default(cuid())
  name      String
  source    SOURCE
  key       String
  weight    Int      @default(1)
  channels  String[] @default([])
  deletable Boolean  @default(true)

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  activities activities[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([key, workspace_id])
  @@index([key, workspace_id])
  @@index([workspace_id])
}

model apikeys {
  id    String @id @default(cuid())
  name  String
  token String @unique

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@index([id])
  @@index([workspace_id])
}

model channels {
  id           String       @id @default(cuid())
  external_id  String?
  name         String
  slug         String?
  source       SOURCE
  workspace_id String
  workspace    workspaces   @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  activities   activities[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  @@unique([external_id, workspace_id])
  @@index([external_id, workspace_id])
  @@index([workspace_id])
}

model companies {
  id         String    @id @default(cuid())
  name       String
  industry   String?
  address    String?
  domain     String?   @unique
  employees  Int?
  founded_at DateTime?
  logo_url   String?
  tags       String[]  @default([])
  source     SOURCE

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  members members[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
  @@index([workspace_id])
}

model events {
  id          String    @id @default(cuid())
  external_id String    @unique
  title       String
  started_at  DateTime
  ended_at    DateTime?
  source      SOURCE

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  activities activities[]

  @@index([id, workspace_id])
  @@index([source, workspace_id])
}

model files {
  id    String  @id @default(cuid())
  title String?
  url   String

  activity_id String
  activity    activities @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([activity_id])
}

model integrations {
  id                       String    @id @default(cuid())
  external_id              String?   @unique
  connected_at             DateTime?
  status                   STATUS
  details                  Json
  trigger_token            String
  trigger_token_expires_at DateTime
  created_by               String

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
  @@index([external_id])
}

model lists {
  id           String     @id @default(cuid())
  emoji        String
  name         String
  filters      Json[]
  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model members {
  id                 String       @id @default(cuid())
  external_id        String?
  livestorm_id       String?
  slack_id           String?
  discord_id         String?
  discord_username   String?
  discourse_id       String?
  discourse_username String?
  linkedin_id        String?
  linkedin_url       String?
  first_name         String?
  last_name          String?
  primary_email      String?
  secondary_emails   String[]     @default([])
  phones             String[]     @default([])
  job_title          String?
  avatar_url         String?
  locale             String?
  tags               String[]     @default([])
  level              Int          @default(0)
  pulse              Int          @default(0)
  presence           Int          @default(0)
  gender             GENDER?
  source             SOURCE
  logs               Json[]       @default([])
  custom_fields      Json[]       @default([])
  company_id         String?
  company            companies?   @relation(fields: [company_id], references: [id], onDelete: SetNull)
  workspace_id       String
  workspace          workspaces   @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  activities         activities[]
  first_activity     DateTime?
  last_activity      DateTime?
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt

  @@unique([discourse_id, workspace_id])
  @@unique([discourse_username, workspace_id])
  @@unique([discord_id, workspace_id])
  @@unique([linkedin_id, workspace_id])
  @@unique([livestorm_id, workspace_id])
  @@unique([slack_id, workspace_id])
  @@index([id])
  @@index([primary_email, workspace_id])
  @@index([discourse_username, workspace_id])
  @@index([discord_username, workspace_id])
  @@index([discord_id, workspace_id])
  @@index([discourse_id, workspace_id])
  @@index([linkedin_id, workspace_id])
  @@index([livestorm_id, workspace_id])
  @@index([slack_id, workspace_id])
}

model tags {
  id          String  @id @default(cuid())
  external_id String?
  name        String
  color       String
  source      SOURCE

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([external_id, workspace_id])
  @@index([id, workspace_id])
}

model posts {
  id           String     @id @default(cuid())
  external_id  String
  content      String
  author_id    String
  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@unique([external_id, workspace_id])
  @@index([external_id, workspace_id])
}

model users {
  id              String    @id @default(cuid())
  email           String    @unique
  hashed_password String
  first_name      String?
  last_name       String?
  onboarding      DateTime?

  workspace_id String
  workspace    workspaces? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model webhooks {
  id           String     @id @default(cuid())
  trigger      String
  url          String
  secret       String
  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
}

model workflows {
  id          String    @id @default(cuid())
  name        String
  description String?
  nodes       Json[]
  edges       Json[]
  published   Boolean   @default(false)
  last_run_at DateTime?

  workspace_id String
  workspace    workspaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model workspaces {
  id                  String  @id @default(cuid())
  name                String
  slug                String  @unique
  source              String?
  company_size        String?
  members_preferences Json
  plan                PLAN    @default(BASIC)

  activities       activities[]
  activities_types activities_types[]
  apiKeys          apikeys[]
  channels         channels[]
  companies        companies[]
  events           events[]
  integrations     integrations[]
  lists            lists[]
  members          members[]
  posts            posts[]
  tags             tags[]
  users            users[]
  webhooks         webhooks[]
  workflows        workflows[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}
