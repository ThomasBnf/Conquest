import z from "zod";

export const CategorySchema = z.object({
  id: z.number(),
  name: z.string(),
  color: z.string(),
  text_color: z.string(),
  slug: z.string(),
  topic_count: z.number(),
  post_count: z.number(),
  position: z.number(),
  description: z.string().nullable(),
  description_text: z.string().nullable(),
  description_excerpt: z.string().nullable(),
  topic_url: z.string(),
  read_restricted: z.boolean(),
  permission: z.number(),
  parent_category_id: z.number().nullable().optional(),
  notification_level: z.number(),
  topic_template: z.string().nullable(),
  has_children: z.boolean(),
  subcategory_count: z.number().nullable(),
  sort_order: z.string().nullable(),
  sort_ascending: z.boolean().nullable(),
  show_subcategory_list: z.boolean(),
  num_featured_topics: z.number(),
  default_view: z.string().nullable(),
  subcategory_list_style: z.string(),
  default_top_period: z.string(),
  default_list_filter: z.string(),
  minimum_required_tags: z.number(),
  navigate_to_first_post_after_read: z.boolean(),
  custom_fields: z
    .object({
      has_chat_enabled: z.union([z.string(), z.boolean()]).nullable(),
      sort_topics_by_event_start_date: z.string().nullable().optional(),
      disable_topic_resorting: z.string().nullable().optional(),
      redirect_url: z.string().nullable().optional(),
      location: z.string().nullable().optional(),
      location_enabled: z.string().nullable().optional(),
      location_topic_status: z.string().nullable().optional(),
      location_map_filter_closed: z.string().nullable().optional(),
      enable_accepted_answers: z.string().nullable().optional(),
    })
    .optional(),
  allowed_tags: z.array(z.string()),
  allowed_tag_groups: z.array(z.string()),
  allow_global_tags: z.boolean(),
  read_only_banner: z.string().nullable(),
  form_template_ids: z.array(z.unknown()),
  sort_topics_by_event_start_date: z.string().nullable().optional(),
  disable_topic_resorting: z.string().nullable().optional(),
  redirect_url: z.string().nullable().optional(),
  slug_path: z.array(z.string()).optional(),
  uploaded_logo: z.string().nullable(),
  uploaded_logo_dark: z.string().nullable(),
  uploaded_background: z.string().nullable(),
  uploaded_background_dark: z.string().nullable(),
  required_tag_groups: z.array(z.unknown()),
  can_edit: z.boolean(),
});

export type Category = z.infer<typeof CategorySchema>;

export const UsersSchema = z.object({
  id: z.number(),
  username: z.string(),
  name: z.string().nullable(),
  avatar_template: z.string(),
  email: z.string().optional(),
  secondary_emails: z.array(z.string()).optional(),
  active: z.boolean(),
  admin: z.boolean(),
  moderator: z.boolean(),
  last_seen_at: z.string().nullable(),
  last_emailed_at: z.string().nullable(),
  created_at: z.string(),
  last_seen_age: z.number().nullable(),
  last_emailed_age: z.number().nullable(),
  created_at_age: z.number().nullable(),
  trust_level: z.number(),
  manual_locked_trust_level: z.number().nullable(),
  title: z.string().nullable(),
  time_read: z.number(),
  staged: z.boolean(),
  days_visited: z.number(),
  posts_read_count: z.number(),
  topics_entered: z.number(),
  post_count: z.number(),
});

export const AdminListUsersSchema = z.object({
  users: z.array(UsersSchema),
});

export type User = z.infer<typeof UsersSchema>;
export type AdminListUsers = z.infer<typeof AdminListUsersSchema>;

export const DirectoryItemsSchema = z.object({
  directory_items: z
    .object({
      id: z.number(),
      likes_received: z.number(),
      topic_count: z.number(),
      post_count: z.number(),
      time_read: z.number(),
      user: z.object({
        id: z.number(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
        user_fields: z
          .record(
            z.string(),
            z.object({
              value: z.array(z.string()),
              searchable: z.boolean(),
            }),
          )
          .optional(),
        geo_location: z
          .union([
            z.object({
              lat: z.string(),
              lon: z.string(),
              address: z.string(),
              countrycode: z.string(),
              city: z.string(),
              state: z.string(),
              country: z.string(),
              postalcode: z.string().optional(),
              boundingbox: z.array(z.string()),
              type: z.string(),
            }),
            z.string(),
            z.null(),
          ])
          .optional(),
      }),
    })
    .array(),
  meta: z.object({
    last_updated_at: z.string().nullable(),
    total_rows_directory_items: z.number(),
    load_more_directory_items: z.string(),
  }),
});

export type DirectoryItems = z.infer<typeof DirectoryItemsSchema>;

export const ResponseListTopicsSchema = z.object({
  users: z.array(
    z.object({
      id: z.number(),
      username: z.string(),
      name: z.string(),
      avatar_template: z.string(),
    }),
  ),
  primary_group: z.object({
    id: z.number(),
    name: z.string(),
    avatar_template: z.string(),
  }),
  topic_list: z.object({
    can_create_topic: z.boolean(),
    more_topics_url: z.string().nullable().optional(),
    per_page: z.number(),
    top_tags: z.array(z.string()),
    topics: z.array(
      z.object({
        id: z.number(),
        title: z.string(),
        fancy_title: z.string(),
        slug: z.string(),
        posts_count: z.number(),
        reply_count: z.number(),
        highest_post_number: z.number(),
        image_url: z.string().nullable(),
        created_at: z.string(),
        last_posted_at: z.string(),
        bumped: z.boolean(),
        bumped_at: z.string(),
        archetype: z.string(),
        unseen: z.boolean(),
        pinned: z.boolean(),
        unpinned: z.string().nullable(),
        excerpt: z.string(),
        visible: z.boolean(),
        closed: z.boolean(),
        archived: z.boolean(),
        bookmarked: z.string().nullable(),
        liked: z.string().nullable(),
        views: z.number(),
        like_count: z.number(),
        has_summary: z.boolean(),
        last_poster_username: z.string(),
        category_id: z.number(),
        pinned_globally: z.boolean(),
        featured_link: z.string().nullable(),
        posters: z.array(
          z.object({
            extras: z.string(),
            description: z.string(),
            user_id: z.number(),
            primary_group_id: z.number().nullable(),
          }),
        ),
      }),
    ),
  }),
});

export const ReactionUserSchema = z.object({
  id: z.number(),
  username: z.string(),
  name: z.string(),
  avatar_template: z.string(),
  title: z.string().nullable(),
  primary_group_name: z.string().nullable(),
});

export const ReactionTopicSchema = z.object({
  id: z.number(),
  title: z.string(),
  fancy_title: z.string(),
  slug: z.string(),
  posts_count: z.number(),
});

export const ReactionPostSchema = z.object({
  excerpt: z.string(),
  truncated: z.boolean().optional(),
  id: z.number(),
  created_at: z.string(),
  title: z.string().optional(),
  url: z.string(),
  category_id: z.number().nullable(),
  post_number: z.number(),
  topic_id: z.number(),
  post_type: z.number(),
  user: z.object({
    id: z.number(),
    username: z.string(),
    name: z.string(),
    avatar_template: z.string(),
    title: z.string().nullable().optional(),
  }),
  topic: ReactionTopicSchema,
});

export const ReactionDetailsSchema = z.object({
  id: z.number(),
  post_id: z.number(),
  reaction_type: z.string(),
  reaction_value: z.string(),
  reaction_users_count: z.number(),
  created_at: z.string(),
});

export const ReactionSchema = z.object({
  id: z.number(),
  user_id: z.number(),
  post_id: z.number(),
  created_at: z.string(),
  user: ReactionUserSchema,
  post: ReactionPostSchema,
  reaction: ReactionDetailsSchema,
});

export const InviteSchema = z.object({
  id: z.number(),
  redeemed_at: z.string(),
  user: z.object({
    id: z.number(),
    username: z.string(),
    name: z.string(),
    avatar_template: z.string(),
    topics_entered: z.number(),
    posts_read_count: z.number(),
    last_seen_at: z.string().nullable(),
    time_read: z.number(),
    days_visited: z.number(),
    days_since_created: z.number(),
  }),
  invite_source: z.string(),
});

export const DiscourseWebhookSchema = z.object({
  category: z
    .object({
      id: z.number(),
      name: z.string(),
      color: z.string(),
      text_color: z.string(),
      slug: z.string(),
      topic_count: z.number(),
      post_count: z.number(),
      position: z.number(),
      description: z.string().nullable(),
      description_text: z.string().nullable(),
      description_excerpt: z.string().nullable(),
      topic_url: z.string(),
      read_restricted: z.boolean(),
      permission: z.string().nullable(),
      parent_category_id: z.number().optional(),
      topic_template: z.string().nullable(),
      has_children: z.boolean().nullable(),
      subcategory_count: z.number().nullable(),
      sort_order: z.string().nullable(),
      sort_ascending: z.boolean().nullable(),
      show_subcategory_list: z.boolean(),
      num_featured_topics: z.number(),
      default_view: z.string().nullable(),
      subcategory_list_style: z.string(),
      default_top_period: z.string(),
      default_list_filter: z.string(),
      minimum_required_tags: z.number(),
      navigate_to_first_post_after_read: z.boolean(),
      custom_fields: z.record(z.unknown()),
      allowed_tags: z.array(z.string()),
      allowed_tag_groups: z.array(z.string()),
      allow_global_tags: z.boolean(),
      read_only_banner: z.string().nullable(),
      form_template_ids: z.array(z.number()),
      auto_close_hours: z.number().nullable(),
      auto_close_based_on_last_post: z.boolean(),
      group_permissions: z.array(z.unknown()),
      email_in: z.string().nullable(),
      email_in_allow_strangers: z.boolean(),
      mailinglist_mirror: z.boolean(),
      all_topics_wiki: z.boolean(),
      allow_unlimited_owner_edits_on_first_post: z.boolean(),
      can_delete: z.boolean(),
      allow_badges: z.boolean(),
      topic_featured_link_allowed: z.boolean(),
      search_priority: z.number(),
      default_slow_mode_seconds: z.number().nullable(),
      uploaded_logo: z.string().nullable(),
      uploaded_logo_dark: z.string().nullable(),
      uploaded_background: z.string().nullable(),
      uploaded_background_dark: z.string().nullable(),
      required_tag_groups: z.array(z.string()),
      category_setting: z.object({
        auto_bump_cooldown_days: z.number(),
        num_auto_bump_daily: z.number(),
        require_reply_approval: z.boolean(),
        require_topic_approval: z.boolean(),
      }),
    })
    .optional(),
  topic: z
    .object({
      tags: z.array(z.string()),
      tags_descriptions: z.record(z.string()),
      id: z.number(),
      title: z.string(),
      fancy_title: z.string(),
      posts_count: z.number(),
      created_at: z.string(),
      views: z.number(),
      reply_count: z.number(),
      like_count: z.number(),
      last_posted_at: z.string(),
      visible: z.boolean(),
      closed: z.boolean(),
      archived: z.boolean(),
      archetype: z.string(),
      slug: z.string(),
      category_id: z.number(),
      word_count: z.number(),
      deleted_at: z.string().nullable(),
      user_id: z.number(),
      featured_link: z.string().nullable(),
      pinned_globally: z.boolean(),
      pinned_at: z.string().nullable(),
      pinned_until: z.string().nullable(),
      unpinned: z.string().nullable(),
      pinned: z.boolean(),
      highest_post_number: z.number(),
      deleted_by: z.string().nullable(),
      has_deleted: z.boolean(),
      bookmarked: z.boolean(),
      participant_count: z.number(),
      queued_posts_count: z.number(),
      thumbnails: z.string().nullable(),
      created_by: z.object({
        id: z.number(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
      }),
      last_poster: z.object({
        id: z.number(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
      }),
      tags_disable_ads: z.boolean(),
      related_topics: z.array(z.unknown()),
      summarizable: z.boolean(),
      discourse_zendesk_plugin_zendesk_id: z.string().nullable(),
      discourse_zendesk_plugin_zendesk_url: z.string(),
      pending_posts: z.array(z.unknown()),
    })
    .optional(),
  post: z
    .object({
      id: z.number(),
      name: z.string(),
      username: z.string(),
      avatar_template: z.string(),
      created_at: z.string(),
      cooked: z.string(),
      post_number: z.number(),
      post_type: z.number(),
      updated_at: z.string(),
      reply_count: z.number(),
      reply_to_post_number: z.number().nullable(),
      quote_count: z.number(),
      incoming_link_count: z.number(),
      reads: z.number(),
      score: z.number(),
      topic_id: z.number(),
      topic_slug: z.string(),
      topic_title: z.string(),
      category_id: z.number(),
      display_username: z.string(),
      primary_group_name: z.string().nullable(),
      flair_name: z.string().nullable(),
      flair_group_id: z.string().nullable(),
      version: z.number(),
      user_title: z.string().nullable(),
      reply_to_user: z
        .object({
          username: z.string(),
          name: z.string(),
          avatar_template: z.string(),
        })
        .optional(),
      bookmarked: z.boolean(),
      raw: z.string(),
      moderator: z.boolean(),
      admin: z.boolean(),
      staff: z.boolean(),
      user_id: z.number(),
      hidden: z.boolean(),
      trust_level: z.number(),
      deleted_at: z.string().nullable(),
      user_deleted: z.boolean(),
      edit_reason: z.string().nullable(),
      wiki: z.boolean(),
      reviewable_id: z.number().nullable(),
      reviewable_score_count: z.number(),
      reviewable_score_pending_count: z.number(),
      topic_posts_count: z.number(),
      topic_filtered_posts_count: z.number(),
      topic_archetype: z.string(),
      category_slug: z.string(),
      akismet_state: z.string().nullable(),
      user_cakedate: z.string(),
      can_accept_answer: z.boolean(),
      can_unaccept_answer: z.boolean(),
      accepted_answer: z.boolean(),
      topic_accepted_answer: z.boolean(),
    })
    .optional(),
  user: z
    .object({
      id: z.number(),
      username: z.string(),
      name: z.string(),
      avatar_template: z.string(),
      email: z.string(),
      secondary_emails: z.array(z.string()),
      last_posted_at: z.string().nullable(),
      last_seen_at: z.string().nullable(),
      created_at: z.string(),
      muted: z.boolean(),
      trust_level: z.number(),
      moderator: z.boolean(),
      admin: z.boolean(),
      title: z.string().nullable(),
      badge_count: z.number(),
      time_read: z.number(),
      recent_time_read: z.number(),
      primary_group_id: z.number().nullable(),
      primary_group_name: z.string().nullable(),
      flair_group_id: z.string().nullable(),
      flair_name: z.string().nullable(),
      flair_url: z.string().nullable(),
      flair_bg_color: z.string().nullable(),
      flair_color: z.string().nullable(),
      featured_topic: z.unknown().nullable(),
      bio_excerpt: z.string().nullable(),
      staged: z.boolean(),
      bio_cooked: z.string().nullable(),
      pending_count: z.number(),
      profile_view_count: z.number(),
      second_factor_enabled: z.boolean(),
      can_upload_profile_header: z.boolean(),
      can_upload_user_card_background: z.boolean(),
      post_count: z.number(),
      locale: z.string().nullable(),
      muted_category_ids: z.array(z.number()),
      regular_category_ids: z.array(z.number()),
      watched_tags: z.array(z.string()),
      watching_first_post_tags: z.array(z.string()),
      tracked_tags: z.array(z.string()),
      muted_tags: z.array(z.string()),
      tracked_category_ids: z.array(z.number()),
      watched_category_ids: z.array(z.number()),
      watched_first_post_category_ids: z.array(z.number()),
      system_avatar_template: z.string(),
      muted_usernames: z.array(z.string()),
      can_mute_users: z.boolean(),
      ignored_usernames: z.array(z.string()),
      can_ignore_users: z.boolean(),
      allowed_pm_usernames: z.array(z.string()),
      mailing_list_posts_per_day: z.number(),
      user_notification_schedule: z.object({
        enabled: z.boolean(),
        day_0_start_time: z.number(),
        day_0_end_time: z.number(),
        day_1_start_time: z.number(),
        day_1_end_time: z.number(),
        day_2_start_time: z.number(),
        day_2_end_time: z.number(),
        day_3_start_time: z.number(),
        day_3_end_time: z.number(),
        day_4_start_time: z.number(),
        day_4_end_time: z.number(),
        day_5_start_time: z.number(),
        day_5_end_time: z.number(),
        day_6_start_time: z.number(),
        day_6_end_time: z.number(),
      }),
      can_chat_user: z.boolean(),
      cakedate: z.string(),
      birthdate: z.string().nullable(),
      accepted_answers: z.number(),
      featured_user_badge_ids: z.array(z.number()),
      invited_by: z.object({
        id: z.number(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
      }),
      groups: z.array(z.unknown()),
      user_option: z.object({
        user_id: z.number(),
        mailing_list_mode: z.boolean(),
        mailing_list_mode_frequency: z.number(),
        email_digests: z.boolean(),
        email_level: z.number(),
        email_messages_level: z.number(),
        external_links_in_new_tab: z.boolean(),
        color_scheme_id: z.number().nullable(),
        dark_scheme_id: z.number().nullable(),
        dynamic_favicon: z.boolean(),
        enable_quoting: z.boolean(),
        enable_smart_lists: z.boolean(),
        enable_defer: z.boolean(),
        digest_after_minutes: z.number(),
        automatically_unpin_topics: z.boolean(),
        auto_track_topics_after_msecs: z.number(),
        notification_level_when_replying: z.number(),
        new_topic_duration_minutes: z.number(),
        email_previous_replies: z.number(),
        email_in_reply_to: z.boolean(),
        like_notification_frequency: z.number(),
        include_tl0_in_digests: z.boolean(),
        theme_ids: z.array(z.number()),
        theme_key_seq: z.number(),
        allow_private_messages: z.boolean(),
        enable_allowed_pm_users: z.boolean(),
        homepage_id: z.number().nullable(),
        hide_profile_and_presence: z.boolean(),
        hide_profile: z.boolean(),
        hide_presence: z.boolean(),
        text_size: z.string(),
        text_size_seq: z.number(),
        title_count_mode: z.string(),
        bookmark_auto_delete_preference: z.number(),
        timezone: z.string().nullable(),
        skip_new_user_tips: z.boolean(),
        default_calendar: z.string(),
        oldest_search_log_date: z.string().nullable(),
        seen_popups: z.unknown().nullable(),
        sidebar_link_to_filtered_list: z.boolean(),
        sidebar_show_count_of_new_items: z.boolean(),
        watched_precedence_over_muted: z.boolean().nullable(),
        topics_unread_when_closed: z.boolean(),
        chat_enabled: z.boolean(),
        only_chat_push_notifications: z.boolean().nullable(),
        ignore_channel_wide_mention: z.boolean().nullable(),
        show_thread_title_prompts: z.boolean(),
        chat_email_frequency: z.string(),
        chat_header_indicator_preference: z.string(),
        chat_separate_sidebar_mode: z.string(),
      }),
    })
    .optional(),
  like: z
    .object({
      post: z.object({
        id: z.number(),
        name: z.string(),
        username: z.string(),
        avatar_template: z.string(),
        created_at: z.string(),
        cooked: z.string(),
        post_number: z.number(),
        post_type: z.number(),
        updated_at: z.string(),
        reply_count: z.number(),
        reply_to_post_number: z.number().nullable(),
        quote_count: z.number(),
        incoming_link_count: z.number(),
        reads: z.number(),
        score: z.number(),
        topic_id: z.number(),
        topic_slug: z.string(),
        topic_title: z.string(),
        category_id: z.number(),
        display_username: z.string(),
        primary_group_name: z.string().nullable(),
        flair_name: z.string().nullable(),
        flair_group_id: z.number().nullable(),
        version: z.number(),
        user_title: z.string().nullable(),
        bookmarked: z.boolean(),
        raw: z.string(),
        moderator: z.boolean(),
        admin: z.boolean(),
        staff: z.boolean(),
        user_id: z.number(),
        hidden: z.boolean(),
        trust_level: z.number(),
        deleted_at: z.string().nullable(),
        user_deleted: z.boolean(),
        edit_reason: z.string().nullable(),
        wiki: z.boolean(),
        reviewable_id: z.number().nullable(),
        reviewable_score_count: z.number(),
        reviewable_score_pending_count: z.number(),
        topic_posts_count: z.number(),
        topic_filtered_posts_count: z.number(),
        topic_archetype: z.string(),
        category_slug: z.string(),
        akismet_state: z.string().nullable(),
        user_cakedate: z.string(),
        reactions: z
          .array(
            z.object({
              id: z.string(),
              type: z.string(),
              count: z.number(),
            }),
          )
          .optional(),
        can_accept_answer: z.boolean(),
        can_unaccept_answer: z.boolean(),
        accepted_answer: z.boolean(),
        topic_accepted_answer: z.boolean(),
      }),
      user: z.object({
        id: z.number(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
      }),
    })
    .optional(),
  user_badge: z
    .object({
      id: z.number(),
      granted_at: z.string(),
      created_at: z.string(),
      post_id: z.number(),
      post_number: z.number(),
      badge_id: z.number(),
      user_id: z.number(),
      granted_by_id: z.number(),
      topic_id: z.number(),
    })
    .optional(),
  solved: z
    .object({
      id: z.number(),
      name: z.string(),
      username: z.string(),
      avatar_template: z.string(),
      created_at: z.string(),
      cooked: z.string(),
      post_number: z.number(),
      post_type: z.number(),
      updated_at: z.string(),
      reply_count: z.number(),
      reply_to_post_number: z.number().nullable(),
      quote_count: z.number(),
      incoming_link_count: z.number(),
      reads: z.number(),
      score: z.number(),
      topic_id: z.number(),
      topic_slug: z.string(),
      topic_title: z.string(),
      category_id: z.number(),
      display_username: z.string(),
      primary_group_name: z.string().nullable(),
      flair_name: z.string().nullable(),
      flair_group_id: z.number().nullable(),
      version: z.number(),
      user_title: z.string(),
      title_is_group: z.boolean(),
      bookmarked: z.boolean(),
      raw: z.string(),
      moderator: z.boolean(),
      admin: z.boolean(),
      staff: z.boolean(),
      user_id: z.number(),
      hidden: z.boolean(),
      trust_level: z.number(),
      deleted_at: z.string().nullable(),
      user_deleted: z.boolean(),
      edit_reason: z.string().nullable(),
      wiki: z.boolean(),
      reviewable_id: z.number().nullable(),
      reviewable_score_count: z.number(),
      reviewable_score_pending_count: z.number(),
      topic_posts_count: z.number(),
      topic_filtered_posts_count: z.number(),
      topic_archetype: z.string(),
      category_slug: z.string(),
      akismet_state: z.string().nullable(),
      user_cakedate: z.string(),
      reactions: z.array(z.unknown()),
      current_user_reaction: z.string().nullable(),
      reaction_users_count: z.number(),
      current_user_used_main_reaction: z.boolean(),
      can_accept_answer: z.boolean(),
      can_unaccept_answer: z.boolean(),
      accepted_answer: z.boolean(),
      topic_accepted_answer: z.boolean(),
    })
    .optional(),
});

export type Reaction = z.infer<typeof ReactionSchema>;
export type Invite = z.infer<typeof InviteSchema>;
export type DiscourseWebhook = z.infer<typeof DiscourseWebhookSchema>;

export const UserBadgeSchema = z.object({
  id: z.number(),
  granted_at: z.string(),
  grouping_position: z.number(),
  is_favorite: z.string().nullable(),
  can_favorite: z.boolean(),
  badge_id: z.number(),
  granted_by_id: z.number(),
});

export type UserBadge = z.infer<typeof UserBadgeSchema>;

export const BadgeSchema = z.object({
  id: z.number(),
  icon: z.string(),
  name: z.string(),
  slug: z.string(),
  query: z.string().nullable(),
  system: z.boolean(),
  enabled: z.boolean(),
  trigger: z.number().nullable(),
  listable: z.boolean(),
  i18n_name: z.string(),
  image_url: z.string().nullable(),
  show_posts: z.boolean(),
  allow_title: z.boolean(),
  auto_revoke: z.boolean(),
  description: z.string(),
  grant_count: z.number(),
  target_posts: z.boolean(),
  badge_type_id: z.number(),
  multiple_grant: z.boolean(),
  image_upload_id: z.number().nullable(),
  long_description: z.string().nullable(),
  badge_grouping_id: z.number(),
  manually_grantable: z.boolean(),
  show_in_post_header: z.boolean(),
});

export type Badge = z.infer<typeof BadgeSchema>;
