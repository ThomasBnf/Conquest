generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SOURCE {
  API
  DISCOURSE
  DISCORD
  GITHUB
  LINKEDIN
  LIVESTORM
  MANUAL
  SLACK
}

enum STATUS {
  ENABLED
  CONNECTED
  SYNCING
  DISCONNECTED
}

enum PLAN {
  BASIC
  PREMIUM
  BUSINESS
  ENTERPRISE
}

enum ROLE {
  STAFF
  ADMIN
}

model activity {
  id               String        @id @default(cuid())
  external_id      String?
  title            String?
  message          String
  reply_to         String?
  react_to         String?
  invite_to        String?
  source           SOURCE
  activity_type_id String
  activity_type    activity_type @relation(fields: [activity_type_id], references: [id], onDelete: Cascade)
  channel_id       String?
  channel          channel?      @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  event_id         String?
  event            event?        @relation(fields: [event_id], references: [id], onDelete: Cascade)
  member_id        String
  member           member        @relation(fields: [member_id], references: [id], onDelete: Cascade)
  workspace_id     String
  workspace        workspace     @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([external_id, workspace_id])
  @@index([external_id, workspace_id])
  @@index([workspace_id])
}

model activity_type {
  id         String  @id @default(cuid())
  name       String
  source     SOURCE
  key        String
  points     Int
  conditions Json[]
  deletable  Boolean @default(true)

  activities   activity[]
  workspace_id String
  workspace    workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([key, workspace_id])
  @@index([key, workspace_id])
  @@index([workspace_id])
}

model api_key {
  id    String @id @default(cuid())
  name  String
  token String @unique

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@index([id])
  @@index([workspace_id])
}

model channel {
  id          String  @id @default(cuid())
  external_id String?
  name        String
  slug        String?
  source      SOURCE

  activities   activity[]
  workspace_id String
  workspace    workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([external_id, workspace_id])
  @@index([external_id, workspace_id])
  @@index([workspace_id])
}

model company {
  id         String    @id @default(cuid())
  name       String
  industry   String?
  address    String?
  domain     String?   @unique
  employees  Int?
  founded_at DateTime?
  logo_url   String?
  tags       String[]  @default([])
  source     SOURCE

  members      member[]
  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
  @@index([workspace_id])
}

model event {
  id          String    @id @default(cuid())
  external_id String    @unique
  title       String
  started_at  DateTime
  ended_at    DateTime?
  source      SOURCE

  activities   activity[]
  workspace_id String
  workspace    workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
  @@index([source, workspace_id])
}

model integration {
  id                       String    @id @default(cuid())
  external_id              String?   @unique
  connected_at             DateTime?
  status                   STATUS
  details                  Json
  trigger_token            String
  trigger_token_expires_at DateTime
  created_by               String

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
  @@index([external_id])
}

model list {
  id           String @id @default(cuid())
  emoji        String
  name         String
  groupFilters Json   @default("{\"filters\":[],\"operator\":\"AND\"}")

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model level {
  id     String @id @default(cuid())
  name   String
  number Int
  from   Int
  to     Int?

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  member     member[]
}

model member {
  id               String     @id @default(cuid())
  first_name       String?
  last_name        String?
  primary_email    String?
  secondary_emails String[]   @default([])
  phones           String[]   @default([])
  job_title        String?
  avatar_url       String?
  country          String?
  language         String?
  tags             String[]   @default([])
  pulse            Int        @default(0)
  source           SOURCE
  logs             Json[]     @default([])
  level_id         String?
  level            level?     @relation(fields: [level_id], references: [id], onDelete: SetNull)
  linkedin_url     String?
  profiles         profile[]
  activities       activity[]
  company_id       String?
  company          company?   @relation(fields: [company_id], references: [id], onDelete: SetNull)
  workspace_id     String
  workspace        workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  first_activity DateTime?
  last_activity  DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@index([id])
  @@index([primary_email, workspace_id])
}

model post {
  id          String @id @default(cuid())
  external_id String
  content     String
  author_id   String

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@unique([external_id, workspace_id])
  @@index([external_id, workspace_id])
}

model profile {
  id          String  @id @default(cuid())
  external_id String?
  attributes  Json?

  member_id    String
  member       member    @relation(fields: [member_id], references: [id], onDelete: Cascade)
  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([external_id, workspace_id])
  @@index([external_id, workspace_id])
}

model tag {
  id          String  @id @default(cuid())
  external_id String?
  name        String
  color       String
  source      SOURCE

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([external_id, workspace_id])
  @@index([id, workspace_id])
}

model user {
  id                    String    @id @default(cuid())
  email                 String    @unique
  hashed_password       String
  first_name            String?
  last_name             String?
  onboarding            DateTime?
  role                  ROLE      @default(ADMIN)
  last_seen             DateTime?
  members_preferences   Json      @default("{\"id\":\"full_name\",\"desc\":true,\"pageSize\":50,\"groupFilters\":{\"filters\":[],\"operator\":\"AND\"},\"columnVisibility\":{},\"columnOrder\":[]}")
  companies_preferences Json      @default("{\"id\":\"name\",\"desc\":true,\"pageSize\":50,\"groupFilters\":{\"filters\":[],\"operator\":\"AND\"},\"columnVisibility\":{},\"columnOrder\":[]}")

  workspace_id String
  workspace    workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model webhook {
  id      String @id @default(cuid())
  trigger String
  url     String
  secret  String

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
  @@index([workspace_id])
}

model workflow {
  id          String    @id @default(cuid())
  name        String
  description String?
  nodes       Json[]
  edges       Json[]
  published   Boolean   @default(false)
  last_run_at DateTime?

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, workspace_id])
}

model workspace {
  id           String  @id @default(cuid())
  name         String
  slug         String  @unique
  source       String?
  company_size String?
  plan         PLAN    @default(BASIC)

  activities     activity[]
  activity_types activity_type[]
  api_keys       api_key[]
  channels       channel[]
  companies      company[]
  events         event[]
  integrations   integration[]
  levels         level[]
  lists          list[]
  members        member[]
  posts          post[]
  profiles       profile[]
  tags           tag[]
  users          user[]
  webhooks       webhook[]
  workflows      workflow[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}
