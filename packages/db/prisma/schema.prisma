generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Activity {
    id              String       @id @default(uuid())
    externalId      String?
    activityTypeKey String
    activityType    ActivityType @relation(fields: [activityTypeKey, workspaceId], references: [key, workspaceId], onDelete: Cascade)
    title           String?
    message         String?
    replyTo         String?
    reactTo         String?
    inviteTo        String?
    sentimentScore  Float?
    sentiment       String?
    keywords        String[]
    category        String?
    topics          String[]
    source          SOURCE
    channelId       String?
    channel         Channel?     @relation(fields: [channelId], references: [id])
    eventId         String?
    event           Event?       @relation(fields: [eventId], references: [id])
    memberId        String
    member          Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([externalId, workspaceId])
    @@index([workspaceId, createdAt(desc)])
    @@index([memberId, createdAt(desc)])
}

model ActivityType {
    key         String
    name        String
    source      SOURCE
    points      Int
    conditions  Json[]
    deletable   Boolean   @default(false)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    activities Activity[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([key, workspaceId])
    @@index([key, workspaceId])
}

model ApiKey {
    id    String @id @default(uuid())
    name  String
    token String @unique

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@index([id])
    @@index([workspaceId])
}

model Channel {
    id          String    @id @default(uuid())
    externalId  String    @unique
    name        String
    source      SOURCE
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Activity  Activity[]

    @@index([externalId, workspaceId])
    @@index([source, workspaceId])
}

model Company {
    id           String    @id @default(uuid())
    name         String
    industry     String?
    address      String?
    domain       String?
    employees    Int?
    foundedAt    DateTime?
    logoUrl      String?
    tags         String[]  @default([])
    source       SOURCE
    customFields Json[]
    workspaceId  String
    workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Member    Member[]
    Tag       Tag[]

    @@index([workspaceId, name, createdAt(desc)])
    @@index([workspaceId])
}

model CustomField {
    id      String @id @default(uuid())
    label   String
    type    TYPE
    options Json[]
    record  RECORD

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Duplicate {
    id          String    @id @default(uuid())
    memberIds   String[]  @default([])
    reason      REASON
    state       STATE
    totalPulse  Int       @default(0)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId])
}

model Event {
    id         String    @id @default(uuid())
    externalId String    @unique
    title      String
    startedAt  DateTime
    endedAt    DateTime?
    source     SOURCE

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    activities Activity[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, workspaceId])
    @@index([source, workspaceId])
}

model Integration {
    id           String    @id @default(uuid())
    externalId   String?   @unique
    connectedAt  DateTime?
    status       STATUS?
    details      Json
    triggerToken String
    expiresAt    DateTime
    runId        String?
    createdBy    String

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, workspaceId])
    @@index([externalId])
}

model Invitation {
    id          String    @id @default(uuid())
    email       String
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId])
}

model Level {
    number      Int
    name        String
    from        Int
    to          Int?
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    members Member[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([number, workspaceId])
    @@index([number, workspaceId])
}

model List {
    id           String @id @default(uuid())
    emoji        String
    name         String
    groupFilters Json   @default("{\"filters\":[],\"operator\":\"AND\"}")
    createdBy    String

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([createdBy, workspaceId])
    @@index([id, workspaceId])
}

model Log {
    id          String    @id @default(uuid())
    date        DateTime
    pulse       Int
    level       Int?
    memberId    String
    member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([memberId, date(desc)])
}

model Member {
    id                  String    @id @default(uuid())
    firstName           String
    lastName            String
    primaryEmail        String
    emails              String[]  @default([])
    phones              String[]  @default([])
    jobTitle            String?
    avatarUrl           String?
    country             String?
    language            String?
    tags                String[]  @default([])
    linkedinUrl         String?
    levelNumber         Int?
    level               Level?    @relation(fields: [levelNumber, workspaceId], references: [number, workspaceId])
    pulse               Int       @default(0)
    source              SOURCE
    companyId           String?
    company             Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
    firstActivity       DateTime?
    lastActivity        DateTime?
    isStaff             Boolean   @default(false)
    customFields        Json      @default("[]")
    atRiskMember        Boolean?  @default(false)
    potentialAmbassador Boolean?  @default(false)
    workspaceId         String
    workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    activities Activity[]
    logs       Log[]
    profiles   Profile[]
    Tags       Tag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId, levelNumber(desc), pulse(desc), id(desc)])
    @@index([workspaceId, createdAt])
    @@index([workspaceId, lastActivity(desc)])
    @@index([workspaceId, firstActivity(desc)])
}

model Profile {
    id          String    @id @default(uuid())
    externalId  String
    attributes  Json
    memberId    String
    member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([externalId, workspaceId])
    @@index([externalId, workspaceId])
    @@index([memberId, workspaceId])
    @@index([memberId, createdAt])
    @@index([workspaceId, createdAt])
    @@index([attributes(ops: JsonbOps)], type: Gin)
    @@index([workspaceId])
}

model Run {
    id          String     @id @default(uuid())
    memberId    String?
    workflowId  String
    workflow    Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    completedAt DateTime?
    failedAt    DateTime?
    status      RUN_STATUS @default(RUNNING)
    runNodes    Json[]     @default([])
    credits     Int        @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workflowId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
    id         String  @id @default(uuid())
    externalId String?
    name       String
    color      String
    source     String

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Company   Company? @relation(fields: [companyId], references: [id])
    companyId String?
    Member    Member?  @relation(fields: [memberId], references: [id])
    memberId  String?

    @@unique([externalId, workspaceId])
    @@index([id, workspaceId])
    @@index([workspaceId])
}

model Task {
    id          String    @id @default(uuid())
    title       String
    dueDate     DateTime?
    assignee    String?
    isCompleted Boolean   @default(false)
    memberId    String?
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId])
}

model User {
    id                   String    @id @default(cuid())
    email                String    @unique
    emailVerified        DateTime? @map("email_verified")
    firstName            String?
    lastName             String?
    avatarUrl            String?
    onboarding           DateTime?
    role                 ROLE      @default(ADMIN)
    lastActivityAt       DateTime  @updatedAt
    membersPreferences   Json      @default("{\"id\":\"level\",\"desc\":true,\"groupFilters\":{\"filters\":[],\"operator\":\"AND\"},\"columnVisibility\":{},\"columnOrder\":[]}")
    companiesPreferences Json      @default("{\"id\":\"name\",\"desc\":false,\"groupFilters\":{\"filters\":[],\"operator\":\"AND\"},\"columnVisibility\":{},\"columnOrder\":[]}")
    workspaceId          String
    workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accounts        Account[]
    sessions        Session[]
    userInWorkspace UserInWorkspace[]
    Workflow        Workflow[]

    @@index([id])
    @@index([email])
}

model UserInWorkspace {
    id          String    @id @default(uuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([workspaceId])
}

model VerificationToken {
    id         String   @id @default(uuid())
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Workflow {
    id             String  @id @default(uuid())
    name           String
    description    String?
    nodes          Json[]
    edges          Json[]
    published      Boolean @default(false)
    runs           Run[]
    createdBy      String
    user           User    @relation(fields: [createdBy], references: [id])
    alertOnSuccess Boolean @default(true)
    alertOnFailure Boolean @default(true)

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    archivedAt DateTime?

    @@index([id, workspaceId])
    @@index([workspaceId])
}

model Workspace {
    id               String    @id @default(uuid())
    name             String
    slug             String    @unique
    source           String?
    companySize      String?
    plan             PLAN?     @default(TRIAL)
    stripeCustomerId String?
    priceId          String?
    trialEnd         DateTime?
    isPastDue        DateTime?

    activities       Activity[]
    activityTypes    ActivityType[]
    apiKeys          ApiKey[]
    channels         Channel[]
    companies        Company[]
    customFields     CustomField[]
    duplicates       Duplicate[]
    events           Event[]
    integrations     Integration[]
    invitations      Invitation[]
    levels           Level[]
    lists            List[]
    logs             Log[]
    members          Member[]
    tags             Tag[]
    tasks            Task[]
    userInWorkspaces UserInWorkspace[]
    users            User[]
    workflows        Workflow[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Profile   Profile[]

    @@index([id])
}

enum PLAN {
    TRIAL
    EXPLORER
    ACTIVE
    CONTRIBUTOR
    AMBASSADOR
}

enum REASON {
    EMAIL
    NAME
    USERNAME
}

enum RECORD {
    MEMBER
    COMPANY
}

enum ROLE {
    STAFF
    ADMIN
}

enum RUN_STATUS {
    RUNNING
    WAITING
    COMPLETED
    FAILED
}

enum SOURCE {
    Api
    Discourse
    Discord
    Github
    Linkedin
    Livestorm
    Manual
    Slack
    Twitter
}

enum STATUS {
    ENABLED
    CONNECTED
    SYNCING
    DISCONNECTED
    FAILED
}

enum STATE {
    PENDING
    APPROVED
    REJECTED
}

enum TYPE {
    TEXT
    NUMBER
    DATE
    SELECT
    MULTISELECT
}
