generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum PLAN {
    EXPLORER
    ACTIVE
    CONTRIBUTOR
    AMBASSADOR
}

enum REASON {
    EMAIL
    NAME
    USERNAME
}

enum ROLE {
    STAFF
    ADMIN
}

enum SOURCE {
    Api
    Discourse
    Discord
    Github
    Linkedin
    Livestorm
    Manual
    Slack
    Twitter
}

enum STATUS {
    ENABLED
    CONNECTED
    SYNCING
    DISCONNECTED
}

enum STATE {
    PENDING
    APPROVED
    REJECTED
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model ApiKey {
    id    String @id @default(uuid())
    name  String
    token String @unique

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@index([id])
    @@index([workspaceId])
}

model Duplicate {
    id          String    @id @default(uuid())
    memberIds   String[]
    reason      REASON
    state       STATE
    totalPulse  Int       @default(0)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId])
}

model Event {
    id         String    @id @default(uuid())
    externalId String    @unique
    title      String
    startedAt  DateTime
    endedAt    DateTime?
    source     SOURCE

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, workspaceId])
    @@index([source, workspaceId])
}

model Integration {
    id           String    @id @default(uuid())
    externalId   String?   @unique
    connectedAt  DateTime?
    status       STATUS?
    details      Json
    triggerToken String
    expiresAt    DateTime
    runId        String?
    createdBy    String

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, workspaceId])
    @@index([externalId])
}

model List {
    id           String @id @default(uuid())
    emoji        String
    name         String
    groupFilters Json   @default("{\"filters\":[],\"operator\":\"AND\"}")
    createdBy    String

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([createdBy, workspaceId])
    @@index([id, workspaceId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
    id         String  @id @default(uuid())
    externalId String?
    name       String
    color      String
    source     String

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([externalId, workspaceId])
    @@index([id, workspaceId])
    @@index([workspaceId])
}

model User {
    id                   String    @id @default(cuid())
    email                String    @unique
    emailVerified        DateTime? @map("email_verified")
    firstName            String?
    lastName             String?
    avatarUrl            String?
    onboarding           DateTime?
    role                 ROLE      @default(ADMIN)
    lastActivityAt       DateTime  @updatedAt
    membersPreferences   Json      @default("{\"id\":\"level\",\"desc\":true,\"groupFilters\":{\"filters\":[],\"operator\":\"AND\"},\"columnVisibility\":{},\"columnOrder\":[]}")
    companiesPreferences Json      @default("{\"id\":\"name\",\"desc\":false,\"groupFilters\":{\"filters\":[],\"operator\":\"AND\"},\"columnVisibility\":{},\"columnOrder\":[]}")
    workspaceId          String
    workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accounts        Account[]
    sessions        Session[]
    userInWorkspace UserInWorkspace[]

    @@index([id])
    @@index([email])
}

model UserInWorkspace {
    id          String    @id @default(uuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([workspaceId])
}

model UserInvitation {
    id          String    @id @default(uuid())
    email       String
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId])
}

model VerificationToken {
    id         String   @id @default(uuid())
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Workflow {
    id          String    @id @default(uuid())
    name        String
    description String?
    nodes       Json[]
    edges       Json[]
    published   Boolean   @default(false)
    lastRunAt   DateTime?

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, workspaceId])
    @@index([workspaceId])
}

model Workspace {
    id               String    @id @default(uuid())
    name             String
    slug             String    @unique
    source           String?
    companySize      String?
    plan             PLAN?     @default(ACTIVE)
    stripeCustomerId String?
    priceId          String?
    trialEnd         DateTime?
    isPastDue        DateTime?

    apiKeys          ApiKey[]
    events           Event[]
    integrations     Integration[]
    lists            List[]
    tags             Tag[]
    users            User[]
    workflows        Workflow[]
    duplicates       Duplicate[]
    userInWorkspaces UserInWorkspace[]

    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    userInvitations UserInvitation[]

    @@index([id])
}
