import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const AccountScalarFieldEnumSchema = z.enum(['id','userId','type','provider','providerAccountId','refresh_token','access_token','expires_at','token_type','scope','id_token','session_state']);

export const RelationLoadStrategySchema = z.enum(['query','join']);

export const ActivityScalarFieldEnumSchema = z.enum(['id','externalId','activityTypeKey','title','message','replyTo','reactTo','inviteTo','source','channelId','eventId','memberId','workspaceId','createdAt','updatedAt']);

export const ActivityTypeScalarFieldEnumSchema = z.enum(['key','name','source','points','conditions','deletable','workspaceId','createdAt','updatedAt']);

export const ApiKeyScalarFieldEnumSchema = z.enum(['id','name','token','workspaceId','createdAt']);

export const ChannelScalarFieldEnumSchema = z.enum(['id','externalId','name','source','workspaceId','createdAt','updatedAt']);

export const CompanyScalarFieldEnumSchema = z.enum(['id','name','industry','address','domain','employees','foundedAt','logoUrl','tags','source','customFields','workspaceId','createdAt','updatedAt']);

export const CustomFieldScalarFieldEnumSchema = z.enum(['id','label','type','options','record','workspaceId','createdAt','updatedAt']);

export const DuplicateScalarFieldEnumSchema = z.enum(['id','memberIds','reason','state','totalPulse','workspaceId','createdAt','updatedAt']);

export const EventScalarFieldEnumSchema = z.enum(['id','externalId','title','startedAt','endedAt','source','workspaceId','createdAt','updatedAt']);

export const IntegrationScalarFieldEnumSchema = z.enum(['id','externalId','connectedAt','status','details','triggerToken','expiresAt','runId','createdBy','workspaceId','createdAt','updatedAt']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','email','workspaceId','createdAt','updatedAt']);

export const LevelScalarFieldEnumSchema = z.enum(['number','name','from','to','workspaceId','createdAt','updatedAt']);

export const ListScalarFieldEnumSchema = z.enum(['id','emoji','name','groupFilters','createdBy','workspaceId','createdAt','updatedAt']);

export const LogScalarFieldEnumSchema = z.enum(['id','date','pulse','level','memberId','workspaceId','createdAt','updatedAt']);

export const MemberScalarFieldEnumSchema = z.enum(['id','firstName','lastName','primaryEmail','emails','phones','jobTitle','avatarUrl','country','language','tags','linkedinUrl','levelNumber','pulse','source','companyId','firstActivity','lastActivity','isStaff','customFields','atRiskMember','potentialAmbassador','workspaceId','createdAt','updatedAt']);

export const ProfileScalarFieldEnumSchema = z.enum(['id','externalId','attributes','memberId','workspaceId','createdAt','updatedAt']);

export const RunScalarFieldEnumSchema = z.enum(['id','memberId','workflowId','completedAt','failedAt','status','runNodes','credits','createdAt','updatedAt']);

export const SessionScalarFieldEnumSchema = z.enum(['id','sessionToken','userId','expires']);

export const TagScalarFieldEnumSchema = z.enum(['id','externalId','name','color','source','workspaceId','createdAt','updatedAt','companyId','memberId']);

export const TaskScalarFieldEnumSchema = z.enum(['id','title','dueDate','assignee','isCompleted','memberId','workspaceId','createdAt','updatedAt']);

export const UserScalarFieldEnumSchema = z.enum(['id','email','emailVerified','firstName','lastName','avatarUrl','onboarding','role','lastActivityAt','membersPreferences','companiesPreferences','workspaceId','createdAt','updatedAt']);

export const UserInWorkspaceScalarFieldEnumSchema = z.enum(['id','userId','workspaceId','createdAt','updatedAt']);

export const VerificationTokenScalarFieldEnumSchema = z.enum(['id','identifier','token','expires']);

export const WorkflowScalarFieldEnumSchema = z.enum(['id','name','description','nodes','edges','published','createdBy','alertOnSuccess','alertOnFailure','workspaceId','createdAt','updatedAt','archivedAt']);

export const WorkspaceScalarFieldEnumSchema = z.enum(['id','name','slug','source','companySize','plan','stripeCustomerId','priceId','trialEnd','isPastDue','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const PLANSchema = z.enum(['EXPLORER','ACTIVE','CONTRIBUTOR','AMBASSADOR']);

export type PLANType = `${z.infer<typeof PLANSchema>}`

export const REASONSchema = z.enum(['EMAIL','NAME','USERNAME']);

export type REASONType = `${z.infer<typeof REASONSchema>}`

export const RECORDSchema = z.enum(['MEMBER','COMPANY']);

export type RECORDType = `${z.infer<typeof RECORDSchema>}`

export const ROLESchema = z.enum(['STAFF','ADMIN']);

export type ROLEType = `${z.infer<typeof ROLESchema>}`

export const RUN_STATUSSchema = z.enum(['RUNNING','COMPLETED','FAILED']);

export type RUN_STATUSType = `${z.infer<typeof RUN_STATUSSchema>}`

export const SOURCESchema = z.enum(['Api','Discourse','Discord','Github','Linkedin','Livestorm','Manual','Slack','Twitter']);

export type SOURCEType = `${z.infer<typeof SOURCESchema>}`

export const STATUSSchema = z.enum(['ENABLED','CONNECTED','SYNCING','DISCONNECTED','FAILED']);

export type STATUSType = `${z.infer<typeof STATUSSchema>}`

export const STATESchema = z.enum(['PENDING','APPROVED','REJECTED']);

export type STATEType = `${z.infer<typeof STATESchema>}`

export const TYPESchema = z.enum(['TEXT','NUMBER','DATE','SELECT','MULTISELECT']);

export type TYPEType = `${z.infer<typeof TYPESchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.number().int().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// ACTIVITY SCHEMA
/////////////////////////////////////////

export const ActivitySchema = z.object({
  source: SOURCESchema,
  id: z.string().uuid(),
  externalId: z.string().nullable(),
  activityTypeKey: z.string(),
  title: z.string().nullable(),
  message: z.string().nullable(),
  replyTo: z.string().nullable(),
  reactTo: z.string().nullable(),
  inviteTo: z.string().nullable(),
  channelId: z.string().nullable(),
  eventId: z.string().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Activity = z.infer<typeof ActivitySchema>

/////////////////////////////////////////
// ACTIVITY TYPE SCHEMA
/////////////////////////////////////////

export const ActivityTypeSchema = z.object({
  source: SOURCESchema,
  key: z.string(),
  name: z.string(),
  points: z.number().int(),
  conditions: JsonValueSchema.array(),
  deletable: z.boolean(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ActivityType = z.infer<typeof ActivityTypeSchema>

/////////////////////////////////////////
// API KEY SCHEMA
/////////////////////////////////////////

export const ApiKeySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  token: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
})

export type ApiKey = z.infer<typeof ApiKeySchema>

/////////////////////////////////////////
// CHANNEL SCHEMA
/////////////////////////////////////////

export const ChannelSchema = z.object({
  source: SOURCESchema,
  id: z.string().uuid(),
  externalId: z.string(),
  name: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Channel = z.infer<typeof ChannelSchema>

/////////////////////////////////////////
// COMPANY SCHEMA
/////////////////////////////////////////

export const CompanySchema = z.object({
  source: SOURCESchema,
  id: z.string().uuid(),
  name: z.string(),
  industry: z.string().nullable(),
  address: z.string().nullable(),
  domain: z.string().nullable(),
  employees: z.number().int().nullable(),
  foundedAt: z.coerce.date().nullable(),
  logoUrl: z.string().nullable(),
  tags: z.string().array(),
  customFields: JsonValueSchema.array(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Company = z.infer<typeof CompanySchema>

/////////////////////////////////////////
// CUSTOM FIELD SCHEMA
/////////////////////////////////////////

export const CustomFieldSchema = z.object({
  type: TYPESchema,
  record: RECORDSchema,
  id: z.string().uuid(),
  label: z.string(),
  options: JsonValueSchema.array(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CustomField = z.infer<typeof CustomFieldSchema>

/////////////////////////////////////////
// DUPLICATE SCHEMA
/////////////////////////////////////////

export const DuplicateSchema = z.object({
  reason: REASONSchema,
  state: STATESchema,
  id: z.string().uuid(),
  memberIds: z.string().array(),
  totalPulse: z.number().int(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Duplicate = z.infer<typeof DuplicateSchema>

/////////////////////////////////////////
// EVENT SCHEMA
/////////////////////////////////////////

export const EventSchema = z.object({
  source: SOURCESchema,
  id: z.string().uuid(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Event = z.infer<typeof EventSchema>

/////////////////////////////////////////
// INTEGRATION SCHEMA
/////////////////////////////////////////

export const IntegrationSchema = z.object({
  status: STATUSSchema.nullable(),
  id: z.string().uuid(),
  externalId: z.string().nullable(),
  connectedAt: z.coerce.date().nullable(),
  details: JsonValueSchema,
  triggerToken: z.string(),
  expiresAt: z.coerce.date(),
  runId: z.string().nullable(),
  createdBy: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Integration = z.infer<typeof IntegrationSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  id: z.string().uuid(),
  email: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// LEVEL SCHEMA
/////////////////////////////////////////

export const LevelSchema = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Level = z.infer<typeof LevelSchema>

/////////////////////////////////////////
// LIST SCHEMA
/////////////////////////////////////////

export const ListSchema = z.object({
  id: z.string().uuid(),
  emoji: z.string(),
  name: z.string(),
  groupFilters: JsonValueSchema,
  createdBy: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type List = z.infer<typeof ListSchema>

/////////////////////////////////////////
// LOG SCHEMA
/////////////////////////////////////////

export const LogSchema = z.object({
  id: z.string().uuid(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Log = z.infer<typeof LogSchema>

/////////////////////////////////////////
// MEMBER SCHEMA
/////////////////////////////////////////

export const MemberSchema = z.object({
  source: SOURCESchema,
  id: z.string().uuid(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.string().array(),
  phones: z.string().array(),
  jobTitle: z.string().nullable(),
  avatarUrl: z.string().nullable(),
  country: z.string().nullable(),
  language: z.string().nullable(),
  tags: z.string().array(),
  linkedinUrl: z.string().nullable(),
  levelNumber: z.number().int().nullable(),
  pulse: z.number().int(),
  companyId: z.string().nullable(),
  firstActivity: z.coerce.date().nullable(),
  lastActivity: z.coerce.date().nullable(),
  isStaff: z.boolean(),
  customFields: JsonValueSchema,
  atRiskMember: z.boolean().nullable(),
  potentialAmbassador: z.boolean().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Member = z.infer<typeof MemberSchema>

/////////////////////////////////////////
// PROFILE SCHEMA
/////////////////////////////////////////

export const ProfileSchema = z.object({
  id: z.string().uuid(),
  externalId: z.string(),
  attributes: JsonValueSchema,
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Profile = z.infer<typeof ProfileSchema>

/////////////////////////////////////////
// RUN SCHEMA
/////////////////////////////////////////

export const RunSchema = z.object({
  status: RUN_STATUSSchema,
  id: z.string().uuid(),
  memberId: z.string().nullable(),
  workflowId: z.string(),
  completedAt: z.coerce.date().nullable(),
  failedAt: z.coerce.date().nullable(),
  runNodes: JsonValueSchema.array(),
  credits: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Run = z.infer<typeof RunSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// TAG SCHEMA
/////////////////////////////////////////

export const TagSchema = z.object({
  id: z.string().uuid(),
  externalId: z.string().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  companyId: z.string().nullable(),
  memberId: z.string().nullable(),
})

export type Tag = z.infer<typeof TagSchema>

/////////////////////////////////////////
// TASK SCHEMA
/////////////////////////////////////////

export const TaskSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  dueDate: z.coerce.date().nullable(),
  assignee: z.string().nullable(),
  isCompleted: z.boolean(),
  memberId: z.string().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Task = z.infer<typeof TaskSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  role: ROLESchema,
  id: z.string().cuid(),
  email: z.string(),
  emailVerified: z.coerce.date().nullable(),
  firstName: z.string().nullable(),
  lastName: z.string().nullable(),
  avatarUrl: z.string().nullable(),
  onboarding: z.coerce.date().nullable(),
  lastActivityAt: z.coerce.date(),
  membersPreferences: JsonValueSchema,
  companiesPreferences: JsonValueSchema,
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// USER IN WORKSPACE SCHEMA
/////////////////////////////////////////

export const UserInWorkspaceSchema = z.object({
  id: z.string().uuid(),
  userId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type UserInWorkspace = z.infer<typeof UserInWorkspaceSchema>

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  id: z.string().uuid(),
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date(),
})

export type VerificationToken = z.infer<typeof VerificationTokenSchema>

/////////////////////////////////////////
// WORKFLOW SCHEMA
/////////////////////////////////////////

export const WorkflowSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  description: z.string().nullable(),
  nodes: JsonValueSchema.array(),
  edges: JsonValueSchema.array(),
  published: z.boolean(),
  createdBy: z.string(),
  alertOnSuccess: z.boolean(),
  alertOnFailure: z.boolean(),
  workspaceId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  archivedAt: z.coerce.date().nullable(),
})

export type Workflow = z.infer<typeof WorkflowSchema>

/////////////////////////////////////////
// WORKSPACE SCHEMA
/////////////////////////////////////////

export const WorkspaceSchema = z.object({
  plan: PLANSchema.nullable(),
  id: z.string().uuid(),
  name: z.string(),
  slug: z.string(),
  source: z.string().nullable(),
  companySize: z.string().nullable(),
  stripeCustomerId: z.string().nullable(),
  priceId: z.string().nullable(),
  trialEnd: z.coerce.date().nullable(),
  isPastDue: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Workspace = z.infer<typeof WorkspaceSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  provider: z.boolean().optional(),
  providerAccountId: z.boolean().optional(),
  refresh_token: z.boolean().optional(),
  access_token: z.boolean().optional(),
  expires_at: z.boolean().optional(),
  token_type: z.boolean().optional(),
  scope: z.boolean().optional(),
  id_token: z.boolean().optional(),
  session_state: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ACTIVITY
//------------------------------------------------------

export const ActivityIncludeSchema: z.ZodType<Prisma.ActivityInclude> = z.object({
  activityType: z.union([z.boolean(),z.lazy(() => ActivityTypeArgsSchema)]).optional(),
  channel: z.union([z.boolean(),z.lazy(() => ChannelArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const ActivityArgsSchema: z.ZodType<Prisma.ActivityDefaultArgs> = z.object({
  select: z.lazy(() => ActivitySelectSchema).optional(),
  include: z.lazy(() => ActivityIncludeSchema).optional(),
}).strict();

export const ActivitySelectSchema: z.ZodType<Prisma.ActivitySelect> = z.object({
  id: z.boolean().optional(),
  externalId: z.boolean().optional(),
  activityTypeKey: z.boolean().optional(),
  title: z.boolean().optional(),
  message: z.boolean().optional(),
  replyTo: z.boolean().optional(),
  reactTo: z.boolean().optional(),
  inviteTo: z.boolean().optional(),
  source: z.boolean().optional(),
  channelId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  memberId: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  activityType: z.union([z.boolean(),z.lazy(() => ActivityTypeArgsSchema)]).optional(),
  channel: z.union([z.boolean(),z.lazy(() => ChannelArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// ACTIVITY TYPE
//------------------------------------------------------

export const ActivityTypeIncludeSchema: z.ZodType<Prisma.ActivityTypeInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Activity: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ActivityTypeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ActivityTypeArgsSchema: z.ZodType<Prisma.ActivityTypeDefaultArgs> = z.object({
  select: z.lazy(() => ActivityTypeSelectSchema).optional(),
  include: z.lazy(() => ActivityTypeIncludeSchema).optional(),
}).strict();

export const ActivityTypeCountOutputTypeArgsSchema: z.ZodType<Prisma.ActivityTypeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ActivityTypeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ActivityTypeCountOutputTypeSelectSchema: z.ZodType<Prisma.ActivityTypeCountOutputTypeSelect> = z.object({
  Activity: z.boolean().optional(),
}).strict();

export const ActivityTypeSelectSchema: z.ZodType<Prisma.ActivityTypeSelect> = z.object({
  key: z.boolean().optional(),
  name: z.boolean().optional(),
  source: z.boolean().optional(),
  points: z.boolean().optional(),
  conditions: z.boolean().optional(),
  deletable: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Activity: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ActivityTypeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// API KEY
//------------------------------------------------------

export const ApiKeyIncludeSchema: z.ZodType<Prisma.ApiKeyInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const ApiKeyArgsSchema: z.ZodType<Prisma.ApiKeyDefaultArgs> = z.object({
  select: z.lazy(() => ApiKeySelectSchema).optional(),
  include: z.lazy(() => ApiKeyIncludeSchema).optional(),
}).strict();

export const ApiKeySelectSchema: z.ZodType<Prisma.ApiKeySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  token: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// CHANNEL
//------------------------------------------------------

export const ChannelIncludeSchema: z.ZodType<Prisma.ChannelInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Activity: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChannelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ChannelArgsSchema: z.ZodType<Prisma.ChannelDefaultArgs> = z.object({
  select: z.lazy(() => ChannelSelectSchema).optional(),
  include: z.lazy(() => ChannelIncludeSchema).optional(),
}).strict();

export const ChannelCountOutputTypeArgsSchema: z.ZodType<Prisma.ChannelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ChannelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ChannelCountOutputTypeSelectSchema: z.ZodType<Prisma.ChannelCountOutputTypeSelect> = z.object({
  Activity: z.boolean().optional(),
}).strict();

export const ChannelSelectSchema: z.ZodType<Prisma.ChannelSelect> = z.object({
  id: z.boolean().optional(),
  externalId: z.boolean().optional(),
  name: z.boolean().optional(),
  source: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Activity: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChannelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COMPANY
//------------------------------------------------------

export const CompanyIncludeSchema: z.ZodType<Prisma.CompanyInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Member: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  Tag: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CompanyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CompanyArgsSchema: z.ZodType<Prisma.CompanyDefaultArgs> = z.object({
  select: z.lazy(() => CompanySelectSchema).optional(),
  include: z.lazy(() => CompanyIncludeSchema).optional(),
}).strict();

export const CompanyCountOutputTypeArgsSchema: z.ZodType<Prisma.CompanyCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CompanyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CompanyCountOutputTypeSelectSchema: z.ZodType<Prisma.CompanyCountOutputTypeSelect> = z.object({
  Member: z.boolean().optional(),
  Tag: z.boolean().optional(),
}).strict();

export const CompanySelectSchema: z.ZodType<Prisma.CompanySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  industry: z.boolean().optional(),
  address: z.boolean().optional(),
  domain: z.boolean().optional(),
  employees: z.boolean().optional(),
  foundedAt: z.boolean().optional(),
  logoUrl: z.boolean().optional(),
  tags: z.boolean().optional(),
  source: z.boolean().optional(),
  customFields: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Member: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  Tag: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CompanyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CUSTOM FIELD
//------------------------------------------------------

export const CustomFieldIncludeSchema: z.ZodType<Prisma.CustomFieldInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const CustomFieldArgsSchema: z.ZodType<Prisma.CustomFieldDefaultArgs> = z.object({
  select: z.lazy(() => CustomFieldSelectSchema).optional(),
  include: z.lazy(() => CustomFieldIncludeSchema).optional(),
}).strict();

export const CustomFieldSelectSchema: z.ZodType<Prisma.CustomFieldSelect> = z.object({
  id: z.boolean().optional(),
  label: z.boolean().optional(),
  type: z.boolean().optional(),
  options: z.boolean().optional(),
  record: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// DUPLICATE
//------------------------------------------------------

export const DuplicateIncludeSchema: z.ZodType<Prisma.DuplicateInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const DuplicateArgsSchema: z.ZodType<Prisma.DuplicateDefaultArgs> = z.object({
  select: z.lazy(() => DuplicateSelectSchema).optional(),
  include: z.lazy(() => DuplicateIncludeSchema).optional(),
}).strict();

export const DuplicateSelectSchema: z.ZodType<Prisma.DuplicateSelect> = z.object({
  id: z.boolean().optional(),
  memberIds: z.boolean().optional(),
  reason: z.boolean().optional(),
  state: z.boolean().optional(),
  totalPulse: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// EVENT
//------------------------------------------------------

export const EventIncludeSchema: z.ZodType<Prisma.EventInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  activities: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EventArgsSchema: z.ZodType<Prisma.EventDefaultArgs> = z.object({
  select: z.lazy(() => EventSelectSchema).optional(),
  include: z.lazy(() => EventIncludeSchema).optional(),
}).strict();

export const EventCountOutputTypeArgsSchema: z.ZodType<Prisma.EventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EventCountOutputTypeSelectSchema: z.ZodType<Prisma.EventCountOutputTypeSelect> = z.object({
  activities: z.boolean().optional(),
}).strict();

export const EventSelectSchema: z.ZodType<Prisma.EventSelect> = z.object({
  id: z.boolean().optional(),
  externalId: z.boolean().optional(),
  title: z.boolean().optional(),
  startedAt: z.boolean().optional(),
  endedAt: z.boolean().optional(),
  source: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  activities: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INTEGRATION
//------------------------------------------------------

export const IntegrationIncludeSchema: z.ZodType<Prisma.IntegrationInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const IntegrationArgsSchema: z.ZodType<Prisma.IntegrationDefaultArgs> = z.object({
  select: z.lazy(() => IntegrationSelectSchema).optional(),
  include: z.lazy(() => IntegrationIncludeSchema).optional(),
}).strict();

export const IntegrationSelectSchema: z.ZodType<Prisma.IntegrationSelect> = z.object({
  id: z.boolean().optional(),
  externalId: z.boolean().optional(),
  connectedAt: z.boolean().optional(),
  status: z.boolean().optional(),
  details: z.boolean().optional(),
  triggerToken: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  runId: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// LEVEL
//------------------------------------------------------

export const LevelIncludeSchema: z.ZodType<Prisma.LevelInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Member: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LevelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const LevelArgsSchema: z.ZodType<Prisma.LevelDefaultArgs> = z.object({
  select: z.lazy(() => LevelSelectSchema).optional(),
  include: z.lazy(() => LevelIncludeSchema).optional(),
}).strict();

export const LevelCountOutputTypeArgsSchema: z.ZodType<Prisma.LevelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LevelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LevelCountOutputTypeSelectSchema: z.ZodType<Prisma.LevelCountOutputTypeSelect> = z.object({
  Member: z.boolean().optional(),
}).strict();

export const LevelSelectSchema: z.ZodType<Prisma.LevelSelect> = z.object({
  number: z.boolean().optional(),
  name: z.boolean().optional(),
  from: z.boolean().optional(),
  to: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Member: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LevelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LIST
//------------------------------------------------------

export const ListIncludeSchema: z.ZodType<Prisma.ListInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const ListArgsSchema: z.ZodType<Prisma.ListDefaultArgs> = z.object({
  select: z.lazy(() => ListSelectSchema).optional(),
  include: z.lazy(() => ListIncludeSchema).optional(),
}).strict();

export const ListSelectSchema: z.ZodType<Prisma.ListSelect> = z.object({
  id: z.boolean().optional(),
  emoji: z.boolean().optional(),
  name: z.boolean().optional(),
  groupFilters: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// LOG
//------------------------------------------------------

export const LogIncludeSchema: z.ZodType<Prisma.LogInclude> = z.object({
  member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const LogArgsSchema: z.ZodType<Prisma.LogDefaultArgs> = z.object({
  select: z.lazy(() => LogSelectSchema).optional(),
  include: z.lazy(() => LogIncludeSchema).optional(),
}).strict();

export const LogSelectSchema: z.ZodType<Prisma.LogSelect> = z.object({
  id: z.boolean().optional(),
  date: z.boolean().optional(),
  pulse: z.boolean().optional(),
  level: z.boolean().optional(),
  memberId: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// MEMBER
//------------------------------------------------------

export const MemberIncludeSchema: z.ZodType<Prisma.MemberInclude> = z.object({
  level: z.union([z.boolean(),z.lazy(() => LevelArgsSchema)]).optional(),
  company: z.union([z.boolean(),z.lazy(() => CompanyArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  activities: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  logs: z.union([z.boolean(),z.lazy(() => LogFindManyArgsSchema)]).optional(),
  profiles: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  Tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MemberCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MemberArgsSchema: z.ZodType<Prisma.MemberDefaultArgs> = z.object({
  select: z.lazy(() => MemberSelectSchema).optional(),
  include: z.lazy(() => MemberIncludeSchema).optional(),
}).strict();

export const MemberCountOutputTypeArgsSchema: z.ZodType<Prisma.MemberCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MemberCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MemberCountOutputTypeSelectSchema: z.ZodType<Prisma.MemberCountOutputTypeSelect> = z.object({
  activities: z.boolean().optional(),
  logs: z.boolean().optional(),
  profiles: z.boolean().optional(),
  Tags: z.boolean().optional(),
}).strict();

export const MemberSelectSchema: z.ZodType<Prisma.MemberSelect> = z.object({
  id: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  primaryEmail: z.boolean().optional(),
  emails: z.boolean().optional(),
  phones: z.boolean().optional(),
  jobTitle: z.boolean().optional(),
  avatarUrl: z.boolean().optional(),
  country: z.boolean().optional(),
  language: z.boolean().optional(),
  tags: z.boolean().optional(),
  linkedinUrl: z.boolean().optional(),
  levelNumber: z.boolean().optional(),
  pulse: z.boolean().optional(),
  source: z.boolean().optional(),
  companyId: z.boolean().optional(),
  firstActivity: z.boolean().optional(),
  lastActivity: z.boolean().optional(),
  isStaff: z.boolean().optional(),
  customFields: z.boolean().optional(),
  atRiskMember: z.boolean().optional(),
  potentialAmbassador: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  level: z.union([z.boolean(),z.lazy(() => LevelArgsSchema)]).optional(),
  company: z.union([z.boolean(),z.lazy(() => CompanyArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  activities: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  logs: z.union([z.boolean(),z.lazy(() => LogFindManyArgsSchema)]).optional(),
  profiles: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  Tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MemberCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROFILE
//------------------------------------------------------

export const ProfileIncludeSchema: z.ZodType<Prisma.ProfileInclude> = z.object({
  member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const ProfileArgsSchema: z.ZodType<Prisma.ProfileDefaultArgs> = z.object({
  select: z.lazy(() => ProfileSelectSchema).optional(),
  include: z.lazy(() => ProfileIncludeSchema).optional(),
}).strict();

export const ProfileSelectSchema: z.ZodType<Prisma.ProfileSelect> = z.object({
  id: z.boolean().optional(),
  externalId: z.boolean().optional(),
  attributes: z.boolean().optional(),
  memberId: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// RUN
//------------------------------------------------------

export const RunIncludeSchema: z.ZodType<Prisma.RunInclude> = z.object({
  workflow: z.union([z.boolean(),z.lazy(() => WorkflowArgsSchema)]).optional(),
}).strict()

export const RunArgsSchema: z.ZodType<Prisma.RunDefaultArgs> = z.object({
  select: z.lazy(() => RunSelectSchema).optional(),
  include: z.lazy(() => RunIncludeSchema).optional(),
}).strict();

export const RunSelectSchema: z.ZodType<Prisma.RunSelect> = z.object({
  id: z.boolean().optional(),
  memberId: z.boolean().optional(),
  workflowId: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  failedAt: z.boolean().optional(),
  status: z.boolean().optional(),
  runNodes: z.boolean().optional(),
  credits: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workflow: z.union([z.boolean(),z.lazy(() => WorkflowArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  sessionToken: z.boolean().optional(),
  userId: z.boolean().optional(),
  expires: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TAG
//------------------------------------------------------

export const TagIncludeSchema: z.ZodType<Prisma.TagInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Company: z.union([z.boolean(),z.lazy(() => CompanyArgsSchema)]).optional(),
  Member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
}).strict()

export const TagArgsSchema: z.ZodType<Prisma.TagDefaultArgs> = z.object({
  select: z.lazy(() => TagSelectSchema).optional(),
  include: z.lazy(() => TagIncludeSchema).optional(),
}).strict();

export const TagSelectSchema: z.ZodType<Prisma.TagSelect> = z.object({
  id: z.boolean().optional(),
  externalId: z.boolean().optional(),
  name: z.boolean().optional(),
  color: z.boolean().optional(),
  source: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  companyId: z.boolean().optional(),
  memberId: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  Company: z.union([z.boolean(),z.lazy(() => CompanyArgsSchema)]).optional(),
  Member: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
}).strict()

// TASK
//------------------------------------------------------

export const TaskIncludeSchema: z.ZodType<Prisma.TaskInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const TaskArgsSchema: z.ZodType<Prisma.TaskDefaultArgs> = z.object({
  select: z.lazy(() => TaskSelectSchema).optional(),
  include: z.lazy(() => TaskIncludeSchema).optional(),
}).strict();

export const TaskSelectSchema: z.ZodType<Prisma.TaskSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  dueDate: z.boolean().optional(),
  assignee: z.boolean().optional(),
  isCompleted: z.boolean().optional(),
  memberId: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  userInWorkspace: z.union([z.boolean(),z.lazy(() => UserInWorkspaceFindManyArgsSchema)]).optional(),
  Workflow: z.union([z.boolean(),z.lazy(() => WorkflowFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
  sessions: z.boolean().optional(),
  userInWorkspace: z.boolean().optional(),
  Workflow: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  avatarUrl: z.boolean().optional(),
  onboarding: z.boolean().optional(),
  role: z.boolean().optional(),
  lastActivityAt: z.boolean().optional(),
  membersPreferences: z.boolean().optional(),
  companiesPreferences: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  userInWorkspace: z.union([z.boolean(),z.lazy(() => UserInWorkspaceFindManyArgsSchema)]).optional(),
  Workflow: z.union([z.boolean(),z.lazy(() => WorkflowFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER IN WORKSPACE
//------------------------------------------------------

export const UserInWorkspaceIncludeSchema: z.ZodType<Prisma.UserInWorkspaceInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

export const UserInWorkspaceArgsSchema: z.ZodType<Prisma.UserInWorkspaceDefaultArgs> = z.object({
  select: z.lazy(() => UserInWorkspaceSelectSchema).optional(),
  include: z.lazy(() => UserInWorkspaceIncludeSchema).optional(),
}).strict();

export const UserInWorkspaceSelectSchema: z.ZodType<Prisma.UserInWorkspaceSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
}).strict()

// VERIFICATION TOKEN
//------------------------------------------------------

export const VerificationTokenSelectSchema: z.ZodType<Prisma.VerificationTokenSelect> = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
}).strict()

// WORKFLOW
//------------------------------------------------------

export const WorkflowIncludeSchema: z.ZodType<Prisma.WorkflowInclude> = z.object({
  runs: z.union([z.boolean(),z.lazy(() => RunFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WorkflowCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const WorkflowArgsSchema: z.ZodType<Prisma.WorkflowDefaultArgs> = z.object({
  select: z.lazy(() => WorkflowSelectSchema).optional(),
  include: z.lazy(() => WorkflowIncludeSchema).optional(),
}).strict();

export const WorkflowCountOutputTypeArgsSchema: z.ZodType<Prisma.WorkflowCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => WorkflowCountOutputTypeSelectSchema).nullish(),
}).strict();

export const WorkflowCountOutputTypeSelectSchema: z.ZodType<Prisma.WorkflowCountOutputTypeSelect> = z.object({
  runs: z.boolean().optional(),
}).strict();

export const WorkflowSelectSchema: z.ZodType<Prisma.WorkflowSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  nodes: z.boolean().optional(),
  edges: z.boolean().optional(),
  published: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  workspaceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  archivedAt: z.boolean().optional(),
  runs: z.union([z.boolean(),z.lazy(() => RunFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  workspace: z.union([z.boolean(),z.lazy(() => WorkspaceArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WorkflowCountOutputTypeArgsSchema)]).optional(),
}).strict()

// WORKSPACE
//------------------------------------------------------

export const WorkspaceIncludeSchema: z.ZodType<Prisma.WorkspaceInclude> = z.object({
  activities: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  activityTypes: z.union([z.boolean(),z.lazy(() => ActivityTypeFindManyArgsSchema)]).optional(),
  apiKeys: z.union([z.boolean(),z.lazy(() => ApiKeyFindManyArgsSchema)]).optional(),
  channels: z.union([z.boolean(),z.lazy(() => ChannelFindManyArgsSchema)]).optional(),
  companies: z.union([z.boolean(),z.lazy(() => CompanyFindManyArgsSchema)]).optional(),
  customFields: z.union([z.boolean(),z.lazy(() => CustomFieldFindManyArgsSchema)]).optional(),
  duplicates: z.union([z.boolean(),z.lazy(() => DuplicateFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  integrations: z.union([z.boolean(),z.lazy(() => IntegrationFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  levels: z.union([z.boolean(),z.lazy(() => LevelFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListFindManyArgsSchema)]).optional(),
  logs: z.union([z.boolean(),z.lazy(() => LogFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  userInWorkspaces: z.union([z.boolean(),z.lazy(() => UserInWorkspaceFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  workflows: z.union([z.boolean(),z.lazy(() => WorkflowFindManyArgsSchema)]).optional(),
  Profile: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WorkspaceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const WorkspaceArgsSchema: z.ZodType<Prisma.WorkspaceDefaultArgs> = z.object({
  select: z.lazy(() => WorkspaceSelectSchema).optional(),
  include: z.lazy(() => WorkspaceIncludeSchema).optional(),
}).strict();

export const WorkspaceCountOutputTypeArgsSchema: z.ZodType<Prisma.WorkspaceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => WorkspaceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const WorkspaceCountOutputTypeSelectSchema: z.ZodType<Prisma.WorkspaceCountOutputTypeSelect> = z.object({
  activities: z.boolean().optional(),
  activityTypes: z.boolean().optional(),
  apiKeys: z.boolean().optional(),
  channels: z.boolean().optional(),
  companies: z.boolean().optional(),
  customFields: z.boolean().optional(),
  duplicates: z.boolean().optional(),
  events: z.boolean().optional(),
  integrations: z.boolean().optional(),
  invitations: z.boolean().optional(),
  levels: z.boolean().optional(),
  lists: z.boolean().optional(),
  logs: z.boolean().optional(),
  members: z.boolean().optional(),
  tags: z.boolean().optional(),
  tasks: z.boolean().optional(),
  userInWorkspaces: z.boolean().optional(),
  users: z.boolean().optional(),
  workflows: z.boolean().optional(),
  Profile: z.boolean().optional(),
}).strict();

export const WorkspaceSelectSchema: z.ZodType<Prisma.WorkspaceSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  source: z.boolean().optional(),
  companySize: z.boolean().optional(),
  plan: z.boolean().optional(),
  stripeCustomerId: z.boolean().optional(),
  priceId: z.boolean().optional(),
  trialEnd: z.boolean().optional(),
  isPastDue: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  activities: z.union([z.boolean(),z.lazy(() => ActivityFindManyArgsSchema)]).optional(),
  activityTypes: z.union([z.boolean(),z.lazy(() => ActivityTypeFindManyArgsSchema)]).optional(),
  apiKeys: z.union([z.boolean(),z.lazy(() => ApiKeyFindManyArgsSchema)]).optional(),
  channels: z.union([z.boolean(),z.lazy(() => ChannelFindManyArgsSchema)]).optional(),
  companies: z.union([z.boolean(),z.lazy(() => CompanyFindManyArgsSchema)]).optional(),
  customFields: z.union([z.boolean(),z.lazy(() => CustomFieldFindManyArgsSchema)]).optional(),
  duplicates: z.union([z.boolean(),z.lazy(() => DuplicateFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  integrations: z.union([z.boolean(),z.lazy(() => IntegrationFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  levels: z.union([z.boolean(),z.lazy(() => LevelFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListFindManyArgsSchema)]).optional(),
  logs: z.union([z.boolean(),z.lazy(() => LogFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  userInWorkspaces: z.union([z.boolean(),z.lazy(() => UserInWorkspaceFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  workflows: z.union([z.boolean(),z.lazy(() => WorkflowFindManyArgsSchema)]).optional(),
  Profile: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WorkspaceCountOutputTypeArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ActivityWhereInputSchema: z.ZodType<Prisma.ActivityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ActivityWhereInputSchema),z.lazy(() => ActivityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityWhereInputSchema),z.lazy(() => ActivityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activityTypeKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  replyTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reactTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inviteTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  channelId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  activityType: z.union([ z.lazy(() => ActivityTypeScalarRelationFilterSchema),z.lazy(() => ActivityTypeWhereInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelNullableScalarRelationFilterSchema),z.lazy(() => ChannelWhereInputSchema) ]).optional().nullable(),
  event: z.union([ z.lazy(() => EventNullableScalarRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  member: z.union([ z.lazy(() => MemberScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const ActivityOrderByWithRelationInputSchema: z.ZodType<Prisma.ActivityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activityTypeKey: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  message: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  replyTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reactTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  inviteTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  activityType: z.lazy(() => ActivityTypeOrderByWithRelationInputSchema).optional(),
  channel: z.lazy(() => ChannelOrderByWithRelationInputSchema).optional(),
  event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  member: z.lazy(() => MemberOrderByWithRelationInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const ActivityWhereUniqueInputSchema: z.ZodType<Prisma.ActivityWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    externalId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    externalId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional(),
  AND: z.union([ z.lazy(() => ActivityWhereInputSchema),z.lazy(() => ActivityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityWhereInputSchema),z.lazy(() => ActivityWhereInputSchema).array() ]).optional(),
  activityTypeKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  replyTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reactTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inviteTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  channelId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  activityType: z.union([ z.lazy(() => ActivityTypeScalarRelationFilterSchema),z.lazy(() => ActivityTypeWhereInputSchema) ]).optional(),
  channel: z.union([ z.lazy(() => ChannelNullableScalarRelationFilterSchema),z.lazy(() => ChannelWhereInputSchema) ]).optional().nullable(),
  event: z.union([ z.lazy(() => EventNullableScalarRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  member: z.union([ z.lazy(() => MemberScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const ActivityOrderByWithAggregationInputSchema: z.ZodType<Prisma.ActivityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activityTypeKey: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  message: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  replyTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reactTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  inviteTo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ActivityCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ActivityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ActivityMinOrderByAggregateInputSchema).optional()
}).strict();

export const ActivityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ActivityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ActivityScalarWhereWithAggregatesInputSchema),z.lazy(() => ActivityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityScalarWhereWithAggregatesInputSchema),z.lazy(() => ActivityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  activityTypeKey: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  replyTo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  reactTo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  inviteTo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEWithAggregatesFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  channelId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ActivityTypeWhereInputSchema: z.ZodType<Prisma.ActivityTypeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ActivityTypeWhereInputSchema),z.lazy(() => ActivityTypeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityTypeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityTypeWhereInputSchema),z.lazy(() => ActivityTypeWhereInputSchema).array() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  points: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  conditions: z.lazy(() => JsonNullableListFilterSchema).optional(),
  deletable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityListRelationFilterSchema).optional()
}).strict();

export const ActivityTypeOrderByWithRelationInputSchema: z.ZodType<Prisma.ActivityTypeOrderByWithRelationInput> = z.object({
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  deletable: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  Activity: z.lazy(() => ActivityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ActivityTypeWhereUniqueInputSchema: z.ZodType<Prisma.ActivityTypeWhereUniqueInput> = z.union([
  z.object({
    key: z.string(),
    key_workspaceId: z.lazy(() => ActivityTypeKeyWorkspaceIdCompoundUniqueInputSchema)
  }),
  z.object({
    key: z.string(),
  }),
  z.object({
    key_workspaceId: z.lazy(() => ActivityTypeKeyWorkspaceIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  key: z.string().optional(),
  key_workspaceId: z.lazy(() => ActivityTypeKeyWorkspaceIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ActivityTypeWhereInputSchema),z.lazy(() => ActivityTypeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityTypeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityTypeWhereInputSchema),z.lazy(() => ActivityTypeWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  points: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  conditions: z.lazy(() => JsonNullableListFilterSchema).optional(),
  deletable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityListRelationFilterSchema).optional()
}).strict());

export const ActivityTypeOrderByWithAggregationInputSchema: z.ZodType<Prisma.ActivityTypeOrderByWithAggregationInput> = z.object({
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  deletable: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ActivityTypeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ActivityTypeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ActivityTypeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ActivityTypeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ActivityTypeSumOrderByAggregateInputSchema).optional()
}).strict();

export const ActivityTypeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ActivityTypeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ActivityTypeScalarWhereWithAggregatesInputSchema),z.lazy(() => ActivityTypeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityTypeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityTypeScalarWhereWithAggregatesInputSchema),z.lazy(() => ActivityTypeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  key: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEWithAggregatesFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  points: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  conditions: z.lazy(() => JsonNullableListFilterSchema).optional(),
  deletable: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ApiKeyWhereInputSchema: z.ZodType<Prisma.ApiKeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const ApiKeyOrderByWithRelationInputSchema: z.ZodType<Prisma.ApiKeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const ApiKeyWhereUniqueInputSchema: z.ZodType<Prisma.ApiKeyWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const ApiKeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.ApiKeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ApiKeyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ApiKeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ApiKeyMinOrderByAggregateInputSchema).optional()
}).strict();

export const ApiKeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ApiKeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ChannelWhereInputSchema: z.ZodType<Prisma.ChannelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityListRelationFilterSchema).optional()
}).strict();

export const ChannelOrderByWithRelationInputSchema: z.ZodType<Prisma.ChannelOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  Activity: z.lazy(() => ActivityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ChannelWhereUniqueInputSchema: z.ZodType<Prisma.ChannelWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    externalId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    externalId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional(),
  AND: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelWhereInputSchema),z.lazy(() => ChannelWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityListRelationFilterSchema).optional()
}).strict());

export const ChannelOrderByWithAggregationInputSchema: z.ZodType<Prisma.ChannelOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ChannelCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ChannelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ChannelMinOrderByAggregateInputSchema).optional()
}).strict();

export const ChannelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ChannelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema),z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema),z.lazy(() => ChannelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEWithAggregatesFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CompanyWhereInputSchema: z.ZodType<Prisma.CompanyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CompanyWhereInputSchema),z.lazy(() => CompanyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompanyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompanyWhereInputSchema),z.lazy(() => CompanyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  industry: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  domain: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  employees: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  foundedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  customFields: z.lazy(() => JsonNullableListFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Member: z.lazy(() => MemberListRelationFilterSchema).optional(),
  Tag: z.lazy(() => TagListRelationFilterSchema).optional()
}).strict();

export const CompanyOrderByWithRelationInputSchema: z.ZodType<Prisma.CompanyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  industry: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  domain: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  employees: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  foundedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logoUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  customFields: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  Member: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  Tag: z.lazy(() => TagOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CompanyWhereUniqueInputSchema: z.ZodType<Prisma.CompanyWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => CompanyWhereInputSchema),z.lazy(() => CompanyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompanyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompanyWhereInputSchema),z.lazy(() => CompanyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  industry: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  domain: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  employees: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  foundedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  customFields: z.lazy(() => JsonNullableListFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Member: z.lazy(() => MemberListRelationFilterSchema).optional(),
  Tag: z.lazy(() => TagListRelationFilterSchema).optional()
}).strict());

export const CompanyOrderByWithAggregationInputSchema: z.ZodType<Prisma.CompanyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  industry: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  domain: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  employees: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  foundedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logoUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  customFields: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CompanyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CompanyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CompanyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CompanyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CompanySumOrderByAggregateInputSchema).optional()
}).strict();

export const CompanyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CompanyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CompanyScalarWhereWithAggregatesInputSchema),z.lazy(() => CompanyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompanyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompanyScalarWhereWithAggregatesInputSchema),z.lazy(() => CompanyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  industry: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  domain: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  employees: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  foundedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEWithAggregatesFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  customFields: z.lazy(() => JsonNullableListFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomFieldWhereInputSchema: z.ZodType<Prisma.CustomFieldWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomFieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTYPEFilterSchema),z.lazy(() => TYPESchema) ]).optional(),
  options: z.lazy(() => JsonNullableListFilterSchema).optional(),
  record: z.union([ z.lazy(() => EnumRECORDFilterSchema),z.lazy(() => RECORDSchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const CustomFieldOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomFieldOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  options: z.lazy(() => SortOrderSchema).optional(),
  record: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const CustomFieldWhereUniqueInputSchema: z.ZodType<Prisma.CustomFieldWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomFieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  label: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTYPEFilterSchema),z.lazy(() => TYPESchema) ]).optional(),
  options: z.lazy(() => JsonNullableListFilterSchema).optional(),
  record: z.union([ z.lazy(() => EnumRECORDFilterSchema),z.lazy(() => RECORDSchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const CustomFieldOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomFieldOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  options: z.lazy(() => SortOrderSchema).optional(),
  record: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomFieldCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomFieldMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomFieldMinOrderByAggregateInputSchema).optional()
}).strict();

export const CustomFieldScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomFieldScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTYPEWithAggregatesFilterSchema),z.lazy(() => TYPESchema) ]).optional(),
  options: z.lazy(() => JsonNullableListFilterSchema).optional(),
  record: z.union([ z.lazy(() => EnumRECORDWithAggregatesFilterSchema),z.lazy(() => RECORDSchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DuplicateWhereInputSchema: z.ZodType<Prisma.DuplicateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DuplicateWhereInputSchema),z.lazy(() => DuplicateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DuplicateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DuplicateWhereInputSchema),z.lazy(() => DuplicateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  memberIds: z.lazy(() => StringNullableListFilterSchema).optional(),
  reason: z.union([ z.lazy(() => EnumREASONFilterSchema),z.lazy(() => REASONSchema) ]).optional(),
  state: z.union([ z.lazy(() => EnumSTATEFilterSchema),z.lazy(() => STATESchema) ]).optional(),
  totalPulse: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const DuplicateOrderByWithRelationInputSchema: z.ZodType<Prisma.DuplicateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberIds: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  totalPulse: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const DuplicateWhereUniqueInputSchema: z.ZodType<Prisma.DuplicateWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => DuplicateWhereInputSchema),z.lazy(() => DuplicateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DuplicateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DuplicateWhereInputSchema),z.lazy(() => DuplicateWhereInputSchema).array() ]).optional(),
  memberIds: z.lazy(() => StringNullableListFilterSchema).optional(),
  reason: z.union([ z.lazy(() => EnumREASONFilterSchema),z.lazy(() => REASONSchema) ]).optional(),
  state: z.union([ z.lazy(() => EnumSTATEFilterSchema),z.lazy(() => STATESchema) ]).optional(),
  totalPulse: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const DuplicateOrderByWithAggregationInputSchema: z.ZodType<Prisma.DuplicateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberIds: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  totalPulse: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DuplicateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DuplicateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DuplicateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DuplicateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DuplicateSumOrderByAggregateInputSchema).optional()
}).strict();

export const DuplicateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DuplicateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DuplicateScalarWhereWithAggregatesInputSchema),z.lazy(() => DuplicateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DuplicateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DuplicateScalarWhereWithAggregatesInputSchema),z.lazy(() => DuplicateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  memberIds: z.lazy(() => StringNullableListFilterSchema).optional(),
  reason: z.union([ z.lazy(() => EnumREASONWithAggregatesFilterSchema),z.lazy(() => REASONSchema) ]).optional(),
  state: z.union([ z.lazy(() => EnumSTATEWithAggregatesFilterSchema),z.lazy(() => STATESchema) ]).optional(),
  totalPulse: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventWhereInputSchema: z.ZodType<Prisma.EventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityListRelationFilterSchema).optional()
}).strict();

export const EventOrderByWithRelationInputSchema: z.ZodType<Prisma.EventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  endedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  activities: z.lazy(() => ActivityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EventWhereUniqueInputSchema: z.ZodType<Prisma.EventWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    externalId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    externalId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional(),
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityListRelationFilterSchema).optional()
}).strict());

export const EventOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  endedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventMinOrderByAggregateInputSchema).optional()
}).strict();

export const EventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEWithAggregatesFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const IntegrationWhereInputSchema: z.ZodType<Prisma.IntegrationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IntegrationWhereInputSchema),z.lazy(() => IntegrationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IntegrationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IntegrationWhereInputSchema),z.lazy(() => IntegrationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  connectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumSTATUSNullableFilterSchema),z.lazy(() => STATUSSchema) ]).optional().nullable(),
  details: z.lazy(() => JsonFilterSchema).optional(),
  triggerToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  runId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const IntegrationOrderByWithRelationInputSchema: z.ZodType<Prisma.IntegrationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  connectedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  triggerToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  runId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const IntegrationWhereUniqueInputSchema: z.ZodType<Prisma.IntegrationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    externalId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    externalId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional(),
  AND: z.union([ z.lazy(() => IntegrationWhereInputSchema),z.lazy(() => IntegrationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IntegrationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IntegrationWhereInputSchema),z.lazy(() => IntegrationWhereInputSchema).array() ]).optional(),
  connectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumSTATUSNullableFilterSchema),z.lazy(() => STATUSSchema) ]).optional().nullable(),
  details: z.lazy(() => JsonFilterSchema).optional(),
  triggerToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  runId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const IntegrationOrderByWithAggregationInputSchema: z.ZodType<Prisma.IntegrationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  connectedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  triggerToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  runId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => IntegrationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => IntegrationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => IntegrationMinOrderByAggregateInputSchema).optional()
}).strict();

export const IntegrationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.IntegrationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => IntegrationScalarWhereWithAggregatesInputSchema),z.lazy(() => IntegrationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => IntegrationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IntegrationScalarWhereWithAggregatesInputSchema),z.lazy(() => IntegrationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  connectedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumSTATUSNullableWithAggregatesFilterSchema),z.lazy(() => STATUSSchema) ]).optional().nullable(),
  details: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  triggerToken: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  runId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LevelWhereInputSchema: z.ZodType<Prisma.LevelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LevelWhereInputSchema),z.lazy(() => LevelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LevelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LevelWhereInputSchema),z.lazy(() => LevelWhereInputSchema).array() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  from: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  to: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Member: z.lazy(() => MemberListRelationFilterSchema).optional()
}).strict();

export const LevelOrderByWithRelationInputSchema: z.ZodType<Prisma.LevelOrderByWithRelationInput> = z.object({
  number: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional(),
  to: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  Member: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional()
}).strict();

export const LevelWhereUniqueInputSchema: z.ZodType<Prisma.LevelWhereUniqueInput> = z.union([
  z.object({
    number: z.number().int(),
    number_workspaceId: z.lazy(() => LevelNumberWorkspaceIdCompoundUniqueInputSchema)
  }),
  z.object({
    number: z.number().int(),
  }),
  z.object({
    number_workspaceId: z.lazy(() => LevelNumberWorkspaceIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  number: z.number().int().optional(),
  number_workspaceId: z.lazy(() => LevelNumberWorkspaceIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => LevelWhereInputSchema),z.lazy(() => LevelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LevelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LevelWhereInputSchema),z.lazy(() => LevelWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  from: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  to: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Member: z.lazy(() => MemberListRelationFilterSchema).optional()
}).strict());

export const LevelOrderByWithAggregationInputSchema: z.ZodType<Prisma.LevelOrderByWithAggregationInput> = z.object({
  number: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional(),
  to: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LevelCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LevelAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LevelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LevelMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LevelSumOrderByAggregateInputSchema).optional()
}).strict();

export const LevelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LevelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LevelScalarWhereWithAggregatesInputSchema),z.lazy(() => LevelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LevelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LevelScalarWhereWithAggregatesInputSchema),z.lazy(() => LevelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  number: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  from: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  to: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ListWhereInputSchema: z.ZodType<Prisma.ListWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListWhereInputSchema),z.lazy(() => ListWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListWhereInputSchema),z.lazy(() => ListWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emoji: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  groupFilters: z.lazy(() => JsonFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const ListOrderByWithRelationInputSchema: z.ZodType<Prisma.ListOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  groupFilters: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const ListWhereUniqueInputSchema: z.ZodType<Prisma.ListWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ListWhereInputSchema),z.lazy(() => ListWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListWhereInputSchema),z.lazy(() => ListWhereInputSchema).array() ]).optional(),
  emoji: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  groupFilters: z.lazy(() => JsonFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const ListOrderByWithAggregationInputSchema: z.ZodType<Prisma.ListOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  groupFilters: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ListCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ListMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ListMinOrderByAggregateInputSchema).optional()
}).strict();

export const ListScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ListScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ListScalarWhereWithAggregatesInputSchema),z.lazy(() => ListScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListScalarWhereWithAggregatesInputSchema),z.lazy(() => ListScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emoji: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  groupFilters: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LogWhereInputSchema: z.ZodType<Prisma.LogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LogWhereInputSchema),z.lazy(() => LogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogWhereInputSchema),z.lazy(() => LogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  pulse: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  member: z.union([ z.lazy(() => MemberScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const LogOrderByWithRelationInputSchema: z.ZodType<Prisma.LogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  member: z.lazy(() => MemberOrderByWithRelationInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const LogWhereUniqueInputSchema: z.ZodType<Prisma.LogWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => LogWhereInputSchema),z.lazy(() => LogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogWhereInputSchema),z.lazy(() => LogWhereInputSchema).array() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  pulse: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  member: z.union([ z.lazy(() => MemberScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const LogOrderByWithAggregationInputSchema: z.ZodType<Prisma.LogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LogSumOrderByAggregateInputSchema).optional()
}).strict();

export const LogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LogScalarWhereWithAggregatesInputSchema),z.lazy(() => LogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogScalarWhereWithAggregatesInputSchema),z.lazy(() => LogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  pulse: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MemberWhereInputSchema: z.ZodType<Prisma.MemberWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  primaryEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emails: z.lazy(() => StringNullableListFilterSchema).optional(),
  phones: z.lazy(() => StringNullableListFilterSchema).optional(),
  jobTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  linkedinUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  levelNumber: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  pulse: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstActivity: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastActivity: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isStaff: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  customFields: z.lazy(() => JsonFilterSchema).optional(),
  atRiskMember: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  potentialAmbassador: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  level: z.union([ z.lazy(() => LevelNullableScalarRelationFilterSchema),z.lazy(() => LevelWhereInputSchema) ]).optional().nullable(),
  company: z.union([ z.lazy(() => CompanyNullableScalarRelationFilterSchema),z.lazy(() => CompanyWhereInputSchema) ]).optional().nullable(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityListRelationFilterSchema).optional(),
  logs: z.lazy(() => LogListRelationFilterSchema).optional(),
  profiles: z.lazy(() => ProfileListRelationFilterSchema).optional(),
  Tags: z.lazy(() => TagListRelationFilterSchema).optional()
}).strict();

export const MemberOrderByWithRelationInputSchema: z.ZodType<Prisma.MemberOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  primaryEmail: z.lazy(() => SortOrderSchema).optional(),
  emails: z.lazy(() => SortOrderSchema).optional(),
  phones: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatarUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  linkedinUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  levelNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstActivity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastActivity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isStaff: z.lazy(() => SortOrderSchema).optional(),
  customFields: z.lazy(() => SortOrderSchema).optional(),
  atRiskMember: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  potentialAmbassador: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => LevelOrderByWithRelationInputSchema).optional(),
  company: z.lazy(() => CompanyOrderByWithRelationInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  activities: z.lazy(() => ActivityOrderByRelationAggregateInputSchema).optional(),
  logs: z.lazy(() => LogOrderByRelationAggregateInputSchema).optional(),
  profiles: z.lazy(() => ProfileOrderByRelationAggregateInputSchema).optional(),
  Tags: z.lazy(() => TagOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MemberWhereUniqueInputSchema: z.ZodType<Prisma.MemberWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  primaryEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emails: z.lazy(() => StringNullableListFilterSchema).optional(),
  phones: z.lazy(() => StringNullableListFilterSchema).optional(),
  jobTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  linkedinUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  levelNumber: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  pulse: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstActivity: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastActivity: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isStaff: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  customFields: z.lazy(() => JsonFilterSchema).optional(),
  atRiskMember: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  potentialAmbassador: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  level: z.union([ z.lazy(() => LevelNullableScalarRelationFilterSchema),z.lazy(() => LevelWhereInputSchema) ]).optional().nullable(),
  company: z.union([ z.lazy(() => CompanyNullableScalarRelationFilterSchema),z.lazy(() => CompanyWhereInputSchema) ]).optional().nullable(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityListRelationFilterSchema).optional(),
  logs: z.lazy(() => LogListRelationFilterSchema).optional(),
  profiles: z.lazy(() => ProfileListRelationFilterSchema).optional(),
  Tags: z.lazy(() => TagListRelationFilterSchema).optional()
}).strict());

export const MemberOrderByWithAggregationInputSchema: z.ZodType<Prisma.MemberOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  primaryEmail: z.lazy(() => SortOrderSchema).optional(),
  emails: z.lazy(() => SortOrderSchema).optional(),
  phones: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatarUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  linkedinUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  levelNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstActivity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastActivity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isStaff: z.lazy(() => SortOrderSchema).optional(),
  customFields: z.lazy(() => SortOrderSchema).optional(),
  atRiskMember: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  potentialAmbassador: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MemberCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MemberAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MemberMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MemberMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MemberSumOrderByAggregateInputSchema).optional()
}).strict();

export const MemberScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MemberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  primaryEmail: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emails: z.lazy(() => StringNullableListFilterSchema).optional(),
  phones: z.lazy(() => StringNullableListFilterSchema).optional(),
  jobTitle: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  linkedinUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  levelNumber: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  pulse: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEWithAggregatesFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  firstActivity: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastActivity: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  isStaff: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  customFields: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  atRiskMember: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  potentialAmbassador: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProfileWhereInputSchema: z.ZodType<Prisma.ProfileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  attributes: z.lazy(() => JsonFilterSchema).optional(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  member: z.union([ z.lazy(() => MemberScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const ProfileOrderByWithRelationInputSchema: z.ZodType<Prisma.ProfileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  attributes: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  member: z.lazy(() => MemberOrderByWithRelationInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const ProfileWhereUniqueInputSchema: z.ZodType<Prisma.ProfileWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    externalId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    externalId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional(),
  AND: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  attributes: z.lazy(() => JsonFilterSchema).optional(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  member: z.union([ z.lazy(() => MemberScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const ProfileOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProfileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  attributes: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProfileCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProfileMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProfileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProfileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  attributes: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  memberId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RunWhereInputSchema: z.ZodType<Prisma.RunWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RunWhereInputSchema),z.lazy(() => RunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RunWhereInputSchema),z.lazy(() => RunWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  failedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumRUN_STATUSFilterSchema),z.lazy(() => RUN_STATUSSchema) ]).optional(),
  runNodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  credits: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workflow: z.union([ z.lazy(() => WorkflowScalarRelationFilterSchema),z.lazy(() => WorkflowWhereInputSchema) ]).optional(),
}).strict();

export const RunOrderByWithRelationInputSchema: z.ZodType<Prisma.RunOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  failedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  runNodes: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workflow: z.lazy(() => WorkflowOrderByWithRelationInputSchema).optional()
}).strict();

export const RunWhereUniqueInputSchema: z.ZodType<Prisma.RunWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => RunWhereInputSchema),z.lazy(() => RunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RunWhereInputSchema),z.lazy(() => RunWhereInputSchema).array() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  failedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumRUN_STATUSFilterSchema),z.lazy(() => RUN_STATUSSchema) ]).optional(),
  runNodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  credits: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workflow: z.union([ z.lazy(() => WorkflowScalarRelationFilterSchema),z.lazy(() => WorkflowWhereInputSchema) ]).optional(),
}).strict());

export const RunOrderByWithAggregationInputSchema: z.ZodType<Prisma.RunOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  failedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  runNodes: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RunCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RunAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RunMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RunMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RunSumOrderByAggregateInputSchema).optional()
}).strict();

export const RunScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RunScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RunScalarWhereWithAggregatesInputSchema),z.lazy(() => RunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RunScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RunScalarWhereWithAggregatesInputSchema),z.lazy(() => RunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  failedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumRUN_STATUSWithAggregatesFilterSchema),z.lazy(() => RUN_STATUSSchema) ]).optional(),
  runNodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  credits: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    sessionToken: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    sessionToken: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TagWhereInputSchema: z.ZodType<Prisma.TagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Company: z.union([ z.lazy(() => CompanyNullableScalarRelationFilterSchema),z.lazy(() => CompanyWhereInputSchema) ]).optional().nullable(),
  Member: z.union([ z.lazy(() => MemberNullableScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TagOrderByWithRelationInputSchema: z.ZodType<Prisma.TagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memberId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  Company: z.lazy(() => CompanyOrderByWithRelationInputSchema).optional(),
  Member: z.lazy(() => MemberOrderByWithRelationInputSchema).optional()
}).strict();

export const TagWhereUniqueInputSchema: z.ZodType<Prisma.TagWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    externalId_workspaceId: z.lazy(() => TagExternalIdWorkspaceIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    externalId_workspaceId: z.lazy(() => TagExternalIdWorkspaceIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  externalId_workspaceId: z.lazy(() => TagExternalIdWorkspaceIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  Company: z.union([ z.lazy(() => CompanyNullableScalarRelationFilterSchema),z.lazy(() => CompanyWhereInputSchema) ]).optional().nullable(),
  Member: z.union([ z.lazy(() => MemberNullableScalarRelationFilterSchema),z.lazy(() => MemberWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TagOrderByWithAggregationInputSchema: z.ZodType<Prisma.TagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memberId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TagCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TagMinOrderByAggregateInputSchema).optional()
}).strict();

export const TagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TaskWhereInputSchema: z.ZodType<Prisma.TaskWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isCompleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const TaskOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assignee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const TaskWhereUniqueInputSchema: z.ZodType<Prisma.TaskWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isCompleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const TaskOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assignee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaskScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignee: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isCompleted: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  onboarding: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  role: z.union([ z.lazy(() => EnumROLEFilterSchema),z.lazy(() => ROLESchema) ]).optional(),
  lastActivityAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  membersPreferences: z.lazy(() => JsonFilterSchema).optional(),
  companiesPreferences: z.lazy(() => JsonFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceListRelationFilterSchema).optional(),
  Workflow: z.lazy(() => WorkflowListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatarUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboarding: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  lastActivityAt: z.lazy(() => SortOrderSchema).optional(),
  membersPreferences: z.lazy(() => SortOrderSchema).optional(),
  companiesPreferences: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceOrderByRelationAggregateInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  onboarding: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  role: z.union([ z.lazy(() => EnumROLEFilterSchema),z.lazy(() => ROLESchema) ]).optional(),
  lastActivityAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  membersPreferences: z.lazy(() => JsonFilterSchema).optional(),
  companiesPreferences: z.lazy(() => JsonFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceListRelationFilterSchema).optional(),
  Workflow: z.lazy(() => WorkflowListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatarUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboarding: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  lastActivityAt: z.lazy(() => SortOrderSchema).optional(),
  membersPreferences: z.lazy(() => SortOrderSchema).optional(),
  companiesPreferences: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  lastName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  onboarding: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  role: z.union([ z.lazy(() => EnumROLEWithAggregatesFilterSchema),z.lazy(() => ROLESchema) ]).optional(),
  lastActivityAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  membersPreferences: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  companiesPreferences: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserInWorkspaceWhereInputSchema: z.ZodType<Prisma.UserInWorkspaceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserInWorkspaceWhereInputSchema),z.lazy(() => UserInWorkspaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserInWorkspaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserInWorkspaceWhereInputSchema),z.lazy(() => UserInWorkspaceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceOrderByWithRelationInputSchema: z.ZodType<Prisma.UserInWorkspaceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const UserInWorkspaceWhereUniqueInputSchema: z.ZodType<Prisma.UserInWorkspaceWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => UserInWorkspaceWhereInputSchema),z.lazy(() => UserInWorkspaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserInWorkspaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserInWorkspaceWhereInputSchema),z.lazy(() => UserInWorkspaceWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const UserInWorkspaceOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserInWorkspaceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserInWorkspaceCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserInWorkspaceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserInWorkspaceMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserInWorkspaceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserInWorkspaceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserInWorkspaceScalarWhereWithAggregatesInputSchema),z.lazy(() => UserInWorkspaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserInWorkspaceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserInWorkspaceScalarWhereWithAggregatesInputSchema),z.lazy(() => UserInWorkspaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationTokenWhereInputSchema: z.ZodType<Prisma.VerificationTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenWhereUniqueInputSchema: z.ZodType<Prisma.VerificationTokenWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const VerificationTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationTokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationTokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WorkflowWhereInputSchema: z.ZodType<Prisma.WorkflowWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkflowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  edges: z.lazy(() => JsonNullableListFilterSchema).optional(),
  published: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alertOnSuccess: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  alertOnFailure: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  runs: z.lazy(() => RunListRelationFilterSchema).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict();

export const WorkflowOrderByWithRelationInputSchema: z.ZodType<Prisma.WorkflowOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nodes: z.lazy(() => SortOrderSchema).optional(),
  edges: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  alertOnSuccess: z.lazy(() => SortOrderSchema).optional(),
  alertOnFailure: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  runs: z.lazy(() => RunOrderByRelationAggregateInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceOrderByWithRelationInputSchema).optional()
}).strict();

export const WorkflowWhereUniqueInputSchema: z.ZodType<Prisma.WorkflowWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkflowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  edges: z.lazy(() => JsonNullableListFilterSchema).optional(),
  published: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alertOnSuccess: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  alertOnFailure: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  runs: z.lazy(() => RunListRelationFilterSchema).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  workspace: z.union([ z.lazy(() => WorkspaceScalarRelationFilterSchema),z.lazy(() => WorkspaceWhereInputSchema) ]).optional(),
}).strict());

export const WorkflowOrderByWithAggregationInputSchema: z.ZodType<Prisma.WorkflowOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nodes: z.lazy(() => SortOrderSchema).optional(),
  edges: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  alertOnSuccess: z.lazy(() => SortOrderSchema).optional(),
  alertOnFailure: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => WorkflowCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => WorkflowMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => WorkflowMinOrderByAggregateInputSchema).optional()
}).strict();

export const WorkflowScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WorkflowScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema),z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema),z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  nodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  edges: z.lazy(() => JsonNullableListFilterSchema).optional(),
  published: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  alertOnSuccess: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  alertOnFailure: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const WorkspaceWhereInputSchema: z.ZodType<Prisma.WorkspaceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WorkspaceWhereInputSchema),z.lazy(() => WorkspaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkspaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkspaceWhereInputSchema),z.lazy(() => WorkspaceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  companySize: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  plan: z.union([ z.lazy(() => EnumPLANNullableFilterSchema),z.lazy(() => PLANSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  priceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trialEnd: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isPastDue: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  activities: z.lazy(() => ActivityListRelationFilterSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeListRelationFilterSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyListRelationFilterSchema).optional(),
  channels: z.lazy(() => ChannelListRelationFilterSchema).optional(),
  companies: z.lazy(() => CompanyListRelationFilterSchema).optional(),
  customFields: z.lazy(() => CustomFieldListRelationFilterSchema).optional(),
  duplicates: z.lazy(() => DuplicateListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  integrations: z.lazy(() => IntegrationListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  levels: z.lazy(() => LevelListRelationFilterSchema).optional(),
  lists: z.lazy(() => ListListRelationFilterSchema).optional(),
  logs: z.lazy(() => LogListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  tags: z.lazy(() => TagListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceListRelationFilterSchema).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  workflows: z.lazy(() => WorkflowListRelationFilterSchema).optional(),
  Profile: z.lazy(() => ProfileListRelationFilterSchema).optional()
}).strict();

export const WorkspaceOrderByWithRelationInputSchema: z.ZodType<Prisma.WorkspaceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  source: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companySize: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  plan: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  priceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trialEnd: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isPastDue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  activities: z.lazy(() => ActivityOrderByRelationAggregateInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeOrderByRelationAggregateInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyOrderByRelationAggregateInputSchema).optional(),
  channels: z.lazy(() => ChannelOrderByRelationAggregateInputSchema).optional(),
  companies: z.lazy(() => CompanyOrderByRelationAggregateInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldOrderByRelationAggregateInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateOrderByRelationAggregateInputSchema).optional(),
  events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  integrations: z.lazy(() => IntegrationOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  levels: z.lazy(() => LevelOrderByRelationAggregateInputSchema).optional(),
  lists: z.lazy(() => ListOrderByRelationAggregateInputSchema).optional(),
  logs: z.lazy(() => LogOrderByRelationAggregateInputSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  tags: z.lazy(() => TagOrderByRelationAggregateInputSchema).optional(),
  tasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  workflows: z.lazy(() => WorkflowOrderByRelationAggregateInputSchema).optional(),
  Profile: z.lazy(() => ProfileOrderByRelationAggregateInputSchema).optional()
}).strict();

export const WorkspaceWhereUniqueInputSchema: z.ZodType<Prisma.WorkspaceWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    slug: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => WorkspaceWhereInputSchema),z.lazy(() => WorkspaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkspaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkspaceWhereInputSchema),z.lazy(() => WorkspaceWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  companySize: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  plan: z.union([ z.lazy(() => EnumPLANNullableFilterSchema),z.lazy(() => PLANSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  priceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trialEnd: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isPastDue: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  activities: z.lazy(() => ActivityListRelationFilterSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeListRelationFilterSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyListRelationFilterSchema).optional(),
  channels: z.lazy(() => ChannelListRelationFilterSchema).optional(),
  companies: z.lazy(() => CompanyListRelationFilterSchema).optional(),
  customFields: z.lazy(() => CustomFieldListRelationFilterSchema).optional(),
  duplicates: z.lazy(() => DuplicateListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  integrations: z.lazy(() => IntegrationListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  levels: z.lazy(() => LevelListRelationFilterSchema).optional(),
  lists: z.lazy(() => ListListRelationFilterSchema).optional(),
  logs: z.lazy(() => LogListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  tags: z.lazy(() => TagListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceListRelationFilterSchema).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  workflows: z.lazy(() => WorkflowListRelationFilterSchema).optional(),
  Profile: z.lazy(() => ProfileListRelationFilterSchema).optional()
}).strict());

export const WorkspaceOrderByWithAggregationInputSchema: z.ZodType<Prisma.WorkspaceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  source: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companySize: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  plan: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  priceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trialEnd: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isPastDue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => WorkspaceCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => WorkspaceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => WorkspaceMinOrderByAggregateInputSchema).optional()
}).strict();

export const WorkspaceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WorkspaceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => WorkspaceScalarWhereWithAggregatesInputSchema),z.lazy(() => WorkspaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkspaceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkspaceScalarWhereWithAggregatesInputSchema),z.lazy(() => WorkspaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  companySize: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  plan: z.union([ z.lazy(() => EnumPLANNullableWithAggregatesFilterSchema),z.lazy(() => PLANSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  priceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  trialEnd: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  isPastDue: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ActivityCreateInputSchema: z.ZodType<Prisma.ActivityCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activityType: z.lazy(() => ActivityTypeCreateNestedOneWithoutActivityInputSchema),
  channel: z.lazy(() => ChannelCreateNestedOneWithoutActivityInputSchema).optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutActivitiesInputSchema).optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutActivitiesInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutActivitiesInputSchema)
}).strict();

export const ActivityUncheckedCreateInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityUpdateInputSchema: z.ZodType<Prisma.ActivityUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activityType: z.lazy(() => ActivityTypeUpdateOneRequiredWithoutActivityNestedInputSchema).optional(),
  channel: z.lazy(() => ChannelUpdateOneWithoutActivityNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutActivitiesNestedInputSchema).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional()
}).strict();

export const ActivityUncheckedUpdateInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityCreateManyInputSchema: z.ZodType<Prisma.ActivityCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityUpdateManyMutationInputSchema: z.ZodType<Prisma.ActivityUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityTypeCreateInputSchema: z.ZodType<Prisma.ActivityTypeCreateInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutActivityTypesInputSchema),
  Activity: z.lazy(() => ActivityCreateNestedManyWithoutActivityTypeInputSchema).optional()
}).strict();

export const ActivityTypeUncheckedCreateInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedCreateInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Activity: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutActivityTypeInputSchema).optional()
}).strict();

export const ActivityTypeUpdateInputSchema: z.ZodType<Prisma.ActivityTypeUpdateInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutActivityTypesNestedInputSchema).optional(),
  Activity: z.lazy(() => ActivityUpdateManyWithoutActivityTypeNestedInputSchema).optional()
}).strict();

export const ActivityTypeUncheckedUpdateInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedUpdateInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityUncheckedUpdateManyWithoutActivityTypeNestedInputSchema).optional()
}).strict();

export const ActivityTypeCreateManyInputSchema: z.ZodType<Prisma.ActivityTypeCreateManyInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityTypeUpdateManyMutationInputSchema: z.ZodType<Prisma.ActivityTypeUpdateManyMutationInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityTypeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedUpdateManyInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyCreateInputSchema: z.ZodType<Prisma.ApiKeyCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  token: z.string(),
  createdAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutApiKeysInputSchema)
}).strict();

export const ApiKeyUncheckedCreateInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  token: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ApiKeyUpdateInputSchema: z.ZodType<Prisma.ApiKeyUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutApiKeysNestedInputSchema).optional()
}).strict();

export const ApiKeyUncheckedUpdateInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyCreateManyInputSchema: z.ZodType<Prisma.ApiKeyCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  token: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ApiKeyUpdateManyMutationInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChannelCreateInputSchema: z.ZodType<Prisma.ChannelCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutChannelsInputSchema),
  Activity: z.lazy(() => ActivityCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUncheckedCreateInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Activity: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUpdateInputSchema: z.ZodType<Prisma.ChannelUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutChannelsNestedInputSchema).optional(),
  Activity: z.lazy(() => ActivityUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityUncheckedUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelCreateManyInputSchema: z.ZodType<Prisma.ChannelCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChannelUpdateManyMutationInputSchema: z.ZodType<Prisma.ChannelUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChannelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CompanyCreateInputSchema: z.ZodType<Prisma.CompanyCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutCompaniesInputSchema),
  Member: z.lazy(() => MemberCreateNestedManyWithoutCompanyInputSchema).optional(),
  Tag: z.lazy(() => TagCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyUncheckedCreateInputSchema: z.ZodType<Prisma.CompanyUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Member: z.lazy(() => MemberUncheckedCreateNestedManyWithoutCompanyInputSchema).optional(),
  Tag: z.lazy(() => TagUncheckedCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyUpdateInputSchema: z.ZodType<Prisma.CompanyUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutCompaniesNestedInputSchema).optional(),
  Member: z.lazy(() => MemberUpdateManyWithoutCompanyNestedInputSchema).optional(),
  Tag: z.lazy(() => TagUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const CompanyUncheckedUpdateInputSchema: z.ZodType<Prisma.CompanyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Member: z.lazy(() => MemberUncheckedUpdateManyWithoutCompanyNestedInputSchema).optional(),
  Tag: z.lazy(() => TagUncheckedUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const CompanyCreateManyInputSchema: z.ZodType<Prisma.CompanyCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CompanyUpdateManyMutationInputSchema: z.ZodType<Prisma.CompanyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CompanyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CompanyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldCreateInputSchema: z.ZodType<Prisma.CustomFieldCreateInput> = z.object({
  id: z.string().uuid().optional(),
  label: z.string(),
  type: z.lazy(() => TYPESchema),
  options: z.union([ z.lazy(() => CustomFieldCreateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.lazy(() => RECORDSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutCustomFieldsInputSchema)
}).strict();

export const CustomFieldUncheckedCreateInputSchema: z.ZodType<Prisma.CustomFieldUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  label: z.string(),
  type: z.lazy(() => TYPESchema),
  options: z.union([ z.lazy(() => CustomFieldCreateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.lazy(() => RECORDSchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomFieldUpdateInputSchema: z.ZodType<Prisma.CustomFieldUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TYPESchema),z.lazy(() => EnumTYPEFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.lazy(() => CustomFieldUpdateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => EnumRECORDFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutCustomFieldsNestedInputSchema).optional()
}).strict();

export const CustomFieldUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TYPESchema),z.lazy(() => EnumTYPEFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.lazy(() => CustomFieldUpdateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => EnumRECORDFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldCreateManyInputSchema: z.ZodType<Prisma.CustomFieldCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  label: z.string(),
  type: z.lazy(() => TYPESchema),
  options: z.union([ z.lazy(() => CustomFieldCreateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.lazy(() => RECORDSchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomFieldUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomFieldUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TYPESchema),z.lazy(() => EnumTYPEFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.lazy(() => CustomFieldUpdateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => EnumRECORDFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TYPESchema),z.lazy(() => EnumTYPEFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.lazy(() => CustomFieldUpdateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => EnumRECORDFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DuplicateCreateInputSchema: z.ZodType<Prisma.DuplicateCreateInput> = z.object({
  id: z.string().uuid().optional(),
  memberIds: z.union([ z.lazy(() => DuplicateCreatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.lazy(() => REASONSchema),
  state: z.lazy(() => STATESchema),
  totalPulse: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutDuplicatesInputSchema)
}).strict();

export const DuplicateUncheckedCreateInputSchema: z.ZodType<Prisma.DuplicateUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  memberIds: z.union([ z.lazy(() => DuplicateCreatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.lazy(() => REASONSchema),
  state: z.lazy(() => STATESchema),
  totalPulse: z.number().int().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DuplicateUpdateInputSchema: z.ZodType<Prisma.DuplicateUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberIds: z.union([ z.lazy(() => DuplicateUpdatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.union([ z.lazy(() => REASONSchema),z.lazy(() => EnumREASONFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => STATESchema),z.lazy(() => EnumSTATEFieldUpdateOperationsInputSchema) ]).optional(),
  totalPulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutDuplicatesNestedInputSchema).optional()
}).strict();

export const DuplicateUncheckedUpdateInputSchema: z.ZodType<Prisma.DuplicateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberIds: z.union([ z.lazy(() => DuplicateUpdatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.union([ z.lazy(() => REASONSchema),z.lazy(() => EnumREASONFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => STATESchema),z.lazy(() => EnumSTATEFieldUpdateOperationsInputSchema) ]).optional(),
  totalPulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DuplicateCreateManyInputSchema: z.ZodType<Prisma.DuplicateCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  memberIds: z.union([ z.lazy(() => DuplicateCreatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.lazy(() => REASONSchema),
  state: z.lazy(() => STATESchema),
  totalPulse: z.number().int().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DuplicateUpdateManyMutationInputSchema: z.ZodType<Prisma.DuplicateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberIds: z.union([ z.lazy(() => DuplicateUpdatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.union([ z.lazy(() => REASONSchema),z.lazy(() => EnumREASONFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => STATESchema),z.lazy(() => EnumSTATEFieldUpdateOperationsInputSchema) ]).optional(),
  totalPulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DuplicateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DuplicateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberIds: z.union([ z.lazy(() => DuplicateUpdatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.union([ z.lazy(() => REASONSchema),z.lazy(() => EnumREASONFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => STATESchema),z.lazy(() => EnumSTATEFieldUpdateOperationsInputSchema) ]).optional(),
  totalPulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventCreateInputSchema: z.ZodType<Prisma.EventCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutEventsInputSchema),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateInputSchema: z.ZodType<Prisma.EventUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUpdateInputSchema: z.ZodType<Prisma.EventUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateInputSchema: z.ZodType<Prisma.EventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventCreateManyInputSchema: z.ZodType<Prisma.EventCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventUpdateManyMutationInputSchema: z.ZodType<Prisma.EventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntegrationCreateInputSchema: z.ZodType<Prisma.IntegrationCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  connectedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => STATUSSchema).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  triggerToken: z.string(),
  expiresAt: z.coerce.date(),
  runId: z.string().optional().nullable(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutIntegrationsInputSchema)
}).strict();

export const IntegrationUncheckedCreateInputSchema: z.ZodType<Prisma.IntegrationUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  connectedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => STATUSSchema).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  triggerToken: z.string(),
  expiresAt: z.coerce.date(),
  runId: z.string().optional().nullable(),
  createdBy: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const IntegrationUpdateInputSchema: z.ZodType<Prisma.IntegrationUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NullableEnumSTATUSFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  triggerToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  runId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutIntegrationsNestedInputSchema).optional()
}).strict();

export const IntegrationUncheckedUpdateInputSchema: z.ZodType<Prisma.IntegrationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NullableEnumSTATUSFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  triggerToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  runId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntegrationCreateManyInputSchema: z.ZodType<Prisma.IntegrationCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  connectedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => STATUSSchema).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  triggerToken: z.string(),
  expiresAt: z.coerce.date(),
  runId: z.string().optional().nullable(),
  createdBy: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const IntegrationUpdateManyMutationInputSchema: z.ZodType<Prisma.IntegrationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NullableEnumSTATUSFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  triggerToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  runId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntegrationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.IntegrationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NullableEnumSTATUSFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  triggerToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  runId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LevelCreateInputSchema: z.ZodType<Prisma.LevelCreateInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutLevelsInputSchema),
  Member: z.lazy(() => MemberCreateNestedManyWithoutLevelInputSchema).optional()
}).strict();

export const LevelUncheckedCreateInputSchema: z.ZodType<Prisma.LevelUncheckedCreateInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Member: z.lazy(() => MemberUncheckedCreateNestedManyWithoutLevelInputSchema).optional()
}).strict();

export const LevelUpdateInputSchema: z.ZodType<Prisma.LevelUpdateInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutLevelsNestedInputSchema).optional(),
  Member: z.lazy(() => MemberUpdateManyWithoutLevelNestedInputSchema).optional()
}).strict();

export const LevelUncheckedUpdateInputSchema: z.ZodType<Prisma.LevelUncheckedUpdateInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Member: z.lazy(() => MemberUncheckedUpdateManyWithoutLevelNestedInputSchema).optional()
}).strict();

export const LevelCreateManyInputSchema: z.ZodType<Prisma.LevelCreateManyInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LevelUpdateManyMutationInputSchema: z.ZodType<Prisma.LevelUpdateManyMutationInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LevelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LevelUncheckedUpdateManyInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListCreateInputSchema: z.ZodType<Prisma.ListCreateInput> = z.object({
  id: z.string().uuid().optional(),
  emoji: z.string(),
  name: z.string(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutListsInputSchema)
}).strict();

export const ListUncheckedCreateInputSchema: z.ZodType<Prisma.ListUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  emoji: z.string(),
  name: z.string(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ListUpdateInputSchema: z.ZodType<Prisma.ListUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emoji: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutListsNestedInputSchema).optional()
}).strict();

export const ListUncheckedUpdateInputSchema: z.ZodType<Prisma.ListUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emoji: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListCreateManyInputSchema: z.ZodType<Prisma.ListCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  emoji: z.string(),
  name: z.string(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ListUpdateManyMutationInputSchema: z.ZodType<Prisma.ListUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emoji: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ListUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emoji: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LogCreateInputSchema: z.ZodType<Prisma.LogCreateInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutLogsInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutLogsInputSchema)
}).strict();

export const LogUncheckedCreateInputSchema: z.ZodType<Prisma.LogUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LogUpdateInputSchema: z.ZodType<Prisma.LogUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutLogsNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutLogsNestedInputSchema).optional()
}).strict();

export const LogUncheckedUpdateInputSchema: z.ZodType<Prisma.LogUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LogCreateManyInputSchema: z.ZodType<Prisma.LogCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LogUpdateManyMutationInputSchema: z.ZodType<Prisma.LogUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateInputSchema: z.ZodType<Prisma.MemberCreateInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  level: z.lazy(() => LevelCreateNestedOneWithoutMemberInputSchema).optional(),
  company: z.lazy(() => CompanyCreateNestedOneWithoutMemberInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutMembersInputSchema),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateInputSchema: z.ZodType<Prisma.MemberUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUpdateInputSchema: z.ZodType<Prisma.MemberUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.lazy(() => LevelUpdateOneWithoutMemberNestedInputSchema).optional(),
  company: z.lazy(() => CompanyUpdateOneWithoutMemberNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberCreateManyInputSchema: z.ZodType<Prisma.MemberCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MemberUpdateManyMutationInputSchema: z.ZodType<Prisma.MemberUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileCreateInputSchema: z.ZodType<Prisma.ProfileCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutProfilesInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutProfileInputSchema)
}).strict();

export const ProfileUncheckedCreateInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileUpdateInputSchema: z.ZodType<Prisma.ProfileUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutProfilesNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileCreateManyInputSchema: z.ZodType<Prisma.ProfileCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileUpdateManyMutationInputSchema: z.ZodType<Prisma.ProfileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RunCreateInputSchema: z.ZodType<Prisma.RunCreateInput> = z.object({
  id: z.string().uuid().optional(),
  memberId: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => RUN_STATUSSchema).optional(),
  runNodes: z.union([ z.lazy(() => RunCreaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutRunsInputSchema)
}).strict();

export const RunUncheckedCreateInputSchema: z.ZodType<Prisma.RunUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  memberId: z.string().optional().nullable(),
  workflowId: z.string(),
  completedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => RUN_STATUSSchema).optional(),
  runNodes: z.union([ z.lazy(() => RunCreaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RunUpdateInputSchema: z.ZodType<Prisma.RunUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => EnumRUN_STATUSFieldUpdateOperationsInputSchema) ]).optional(),
  runNodes: z.union([ z.lazy(() => RunUpdaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneRequiredWithoutRunsNestedInputSchema).optional()
}).strict();

export const RunUncheckedUpdateInputSchema: z.ZodType<Prisma.RunUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => EnumRUN_STATUSFieldUpdateOperationsInputSchema) ]).optional(),
  runNodes: z.union([ z.lazy(() => RunUpdaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RunCreateManyInputSchema: z.ZodType<Prisma.RunCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  memberId: z.string().optional().nullable(),
  workflowId: z.string(),
  completedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => RUN_STATUSSchema).optional(),
  runNodes: z.union([ z.lazy(() => RunCreaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RunUpdateManyMutationInputSchema: z.ZodType<Prisma.RunUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => EnumRUN_STATUSFieldUpdateOperationsInputSchema) ]).optional(),
  runNodes: z.union([ z.lazy(() => RunUpdaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RunUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RunUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => EnumRUN_STATUSFieldUpdateOperationsInputSchema) ]).optional(),
  runNodes: z.union([ z.lazy(() => RunUpdaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagCreateInputSchema: z.ZodType<Prisma.TagCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutTagsInputSchema),
  Company: z.lazy(() => CompanyCreateNestedOneWithoutTagInputSchema).optional(),
  Member: z.lazy(() => MemberCreateNestedOneWithoutTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateInputSchema: z.ZodType<Prisma.TagUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.string().optional().nullable(),
  memberId: z.string().optional().nullable()
}).strict();

export const TagUpdateInputSchema: z.ZodType<Prisma.TagUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  Company: z.lazy(() => CompanyUpdateOneWithoutTagNestedInputSchema).optional(),
  Member: z.lazy(() => MemberUpdateOneWithoutTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateInputSchema: z.ZodType<Prisma.TagUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagCreateManyInputSchema: z.ZodType<Prisma.TagCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.string().optional().nullable(),
  memberId: z.string().optional().nullable()
}).strict();

export const TagUpdateManyMutationInputSchema: z.ZodType<Prisma.TagUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskCreateInputSchema: z.ZodType<Prisma.TaskCreateInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  assignee: z.string().optional().nullable(),
  isCompleted: z.boolean().optional(),
  memberId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutTasksInputSchema)
}).strict();

export const TaskUncheckedCreateInputSchema: z.ZodType<Prisma.TaskUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  assignee: z.string().optional().nullable(),
  isCompleted: z.boolean().optional(),
  memberId: z.string().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateInputSchema: z.ZodType<Prisma.TaskUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateManyInputSchema: z.ZodType<Prisma.TaskCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  assignee: z.string().optional().nullable(),
  isCompleted: z.boolean().optional(),
  memberId: z.string().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutUsersInputSchema),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceCreateInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserInWorkspaceInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutUserInWorkspacesInputSchema)
}).strict();

export const UserInWorkspaceUncheckedCreateInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserInWorkspaceUpdateInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserInWorkspaceNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutUserInWorkspacesNestedInputSchema).optional()
}).strict();

export const UserInWorkspaceUncheckedUpdateInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceCreateManyInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserInWorkspaceUpdateManyMutationInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateInputSchema: z.ZodType<Prisma.VerificationTokenCreateInput> = z.object({
  id: z.string().uuid().optional(),
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateManyInputSchema: z.ZodType<Prisma.VerificationTokenCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationTokenUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WorkflowCreateInputSchema: z.ZodType<Prisma.WorkflowCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable(),
  runs: z.lazy(() => RunCreateNestedManyWithoutWorkflowInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutWorkflowInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutWorkflowsInputSchema)
}).strict();

export const WorkflowUncheckedCreateInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  createdBy: z.string(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable(),
  runs: z.lazy(() => RunUncheckedCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowUpdateInputSchema: z.ZodType<Prisma.WorkflowUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  runs: z.lazy(() => RunUpdateManyWithoutWorkflowNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutWorkflowNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutWorkflowsNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  runs: z.lazy(() => RunUncheckedUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowCreateManyInputSchema: z.ZodType<Prisma.WorkflowCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  createdBy: z.string(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable()
}).strict();

export const WorkflowUpdateManyMutationInputSchema: z.ZodType<Prisma.WorkflowUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const WorkflowUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const WorkspaceCreateInputSchema: z.ZodType<Prisma.WorkspaceCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUpdateInputSchema: z.ZodType<Prisma.WorkspaceUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateManyInputSchema: z.ZodType<Prisma.WorkspaceCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WorkspaceUpdateManyMutationInputSchema: z.ZodType<Prisma.WorkspaceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WorkspaceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const AccountProviderProviderAccountIdCompoundUniqueInputSchema: z.ZodType<Prisma.AccountProviderProviderAccountIdCompoundUniqueInput> = z.object({
  provider: z.string(),
  providerAccountId: z.string()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAvgOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountSumOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const EnumSOURCEFilterSchema: z.ZodType<Prisma.EnumSOURCEFilter> = z.object({
  equals: z.lazy(() => SOURCESchema).optional(),
  in: z.lazy(() => SOURCESchema).array().optional(),
  notIn: z.lazy(() => SOURCESchema).array().optional(),
  not: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => NestedEnumSOURCEFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const ActivityTypeScalarRelationFilterSchema: z.ZodType<Prisma.ActivityTypeScalarRelationFilter> = z.object({
  is: z.lazy(() => ActivityTypeWhereInputSchema).optional(),
  isNot: z.lazy(() => ActivityTypeWhereInputSchema).optional()
}).strict();

export const ChannelNullableScalarRelationFilterSchema: z.ZodType<Prisma.ChannelNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ChannelWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ChannelWhereInputSchema).optional().nullable()
}).strict();

export const EventNullableScalarRelationFilterSchema: z.ZodType<Prisma.EventNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => EventWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => EventWhereInputSchema).optional().nullable()
}).strict();

export const MemberScalarRelationFilterSchema: z.ZodType<Prisma.MemberScalarRelationFilter> = z.object({
  is: z.lazy(() => MemberWhereInputSchema).optional(),
  isNot: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const WorkspaceScalarRelationFilterSchema: z.ZodType<Prisma.WorkspaceScalarRelationFilter> = z.object({
  is: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  isNot: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const ActivityCountOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  activityTypeKey: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.lazy(() => SortOrderSchema).optional(),
  reactTo: z.lazy(() => SortOrderSchema).optional(),
  inviteTo: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActivityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  activityTypeKey: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.lazy(() => SortOrderSchema).optional(),
  reactTo: z.lazy(() => SortOrderSchema).optional(),
  inviteTo: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActivityMinOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  activityTypeKey: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  replyTo: z.lazy(() => SortOrderSchema).optional(),
  reactTo: z.lazy(() => SortOrderSchema).optional(),
  inviteTo: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  channelId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSOURCEWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSOURCEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SOURCESchema).optional(),
  in: z.lazy(() => SOURCESchema).array().optional(),
  notIn: z.lazy(() => SOURCESchema).array().optional(),
  not: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => NestedEnumSOURCEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSOURCEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSOURCEFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const JsonNullableListFilterSchema: z.ZodType<Prisma.JsonNullableListFilter> = z.object({
  equals: InputJsonValueSchema.array().optional().nullable(),
  has: InputJsonValueSchema.optional().nullable(),
  hasEvery: InputJsonValueSchema.array().optional(),
  hasSome: InputJsonValueSchema.array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const ActivityListRelationFilterSchema: z.ZodType<Prisma.ActivityListRelationFilter> = z.object({
  every: z.lazy(() => ActivityWhereInputSchema).optional(),
  some: z.lazy(() => ActivityWhereInputSchema).optional(),
  none: z.lazy(() => ActivityWhereInputSchema).optional()
}).strict();

export const ActivityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ActivityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActivityTypeKeyWorkspaceIdCompoundUniqueInputSchema: z.ZodType<Prisma.ActivityTypeKeyWorkspaceIdCompoundUniqueInput> = z.object({
  key: z.string(),
  workspaceId: z.string()
}).strict();

export const ActivityTypeCountOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityTypeCountOrderByAggregateInput> = z.object({
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  deletable: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActivityTypeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityTypeAvgOrderByAggregateInput> = z.object({
  points: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActivityTypeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityTypeMaxOrderByAggregateInput> = z.object({
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  deletable: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActivityTypeMinOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityTypeMinOrderByAggregateInput> = z.object({
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  deletable: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActivityTypeSumOrderByAggregateInputSchema: z.ZodType<Prisma.ActivityTypeSumOrderByAggregateInput> = z.object({
  points: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const ApiKeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelCountOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelMinOrderByAggregateInputSchema: z.ZodType<Prisma.ChannelMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const MemberListRelationFilterSchema: z.ZodType<Prisma.MemberListRelationFilter> = z.object({
  every: z.lazy(() => MemberWhereInputSchema).optional(),
  some: z.lazy(() => MemberWhereInputSchema).optional(),
  none: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const TagListRelationFilterSchema: z.ZodType<Prisma.TagListRelationFilter> = z.object({
  every: z.lazy(() => TagWhereInputSchema).optional(),
  some: z.lazy(() => TagWhereInputSchema).optional(),
  none: z.lazy(() => TagWhereInputSchema).optional()
}).strict();

export const MemberOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MemberOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TagOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompanyCountOrderByAggregateInputSchema: z.ZodType<Prisma.CompanyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  industry: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  employees: z.lazy(() => SortOrderSchema).optional(),
  foundedAt: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  customFields: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompanyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CompanyAvgOrderByAggregateInput> = z.object({
  employees: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompanyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CompanyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  industry: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  employees: z.lazy(() => SortOrderSchema).optional(),
  foundedAt: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompanyMinOrderByAggregateInputSchema: z.ZodType<Prisma.CompanyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  industry: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  domain: z.lazy(() => SortOrderSchema).optional(),
  employees: z.lazy(() => SortOrderSchema).optional(),
  foundedAt: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompanySumOrderByAggregateInputSchema: z.ZodType<Prisma.CompanySumOrderByAggregateInput> = z.object({
  employees: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const EnumTYPEFilterSchema: z.ZodType<Prisma.EnumTYPEFilter> = z.object({
  equals: z.lazy(() => TYPESchema).optional(),
  in: z.lazy(() => TYPESchema).array().optional(),
  notIn: z.lazy(() => TYPESchema).array().optional(),
  not: z.union([ z.lazy(() => TYPESchema),z.lazy(() => NestedEnumTYPEFilterSchema) ]).optional(),
}).strict();

export const EnumRECORDFilterSchema: z.ZodType<Prisma.EnumRECORDFilter> = z.object({
  equals: z.lazy(() => RECORDSchema).optional(),
  in: z.lazy(() => RECORDSchema).array().optional(),
  notIn: z.lazy(() => RECORDSchema).array().optional(),
  not: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => NestedEnumRECORDFilterSchema) ]).optional(),
}).strict();

export const CustomFieldCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  options: z.lazy(() => SortOrderSchema).optional(),
  record: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  record: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  record: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTYPEWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTYPEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TYPESchema).optional(),
  in: z.lazy(() => TYPESchema).array().optional(),
  notIn: z.lazy(() => TYPESchema).array().optional(),
  not: z.union([ z.lazy(() => TYPESchema),z.lazy(() => NestedEnumTYPEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTYPEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTYPEFilterSchema).optional()
}).strict();

export const EnumRECORDWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRECORDWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RECORDSchema).optional(),
  in: z.lazy(() => RECORDSchema).array().optional(),
  notIn: z.lazy(() => RECORDSchema).array().optional(),
  not: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => NestedEnumRECORDWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRECORDFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRECORDFilterSchema).optional()
}).strict();

export const EnumREASONFilterSchema: z.ZodType<Prisma.EnumREASONFilter> = z.object({
  equals: z.lazy(() => REASONSchema).optional(),
  in: z.lazy(() => REASONSchema).array().optional(),
  notIn: z.lazy(() => REASONSchema).array().optional(),
  not: z.union([ z.lazy(() => REASONSchema),z.lazy(() => NestedEnumREASONFilterSchema) ]).optional(),
}).strict();

export const EnumSTATEFilterSchema: z.ZodType<Prisma.EnumSTATEFilter> = z.object({
  equals: z.lazy(() => STATESchema).optional(),
  in: z.lazy(() => STATESchema).array().optional(),
  notIn: z.lazy(() => STATESchema).array().optional(),
  not: z.union([ z.lazy(() => STATESchema),z.lazy(() => NestedEnumSTATEFilterSchema) ]).optional(),
}).strict();

export const DuplicateCountOrderByAggregateInputSchema: z.ZodType<Prisma.DuplicateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberIds: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  totalPulse: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DuplicateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DuplicateAvgOrderByAggregateInput> = z.object({
  totalPulse: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DuplicateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DuplicateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  totalPulse: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DuplicateMinOrderByAggregateInputSchema: z.ZodType<Prisma.DuplicateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  totalPulse: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DuplicateSumOrderByAggregateInputSchema: z.ZodType<Prisma.DuplicateSumOrderByAggregateInput> = z.object({
  totalPulse: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumREASONWithAggregatesFilterSchema: z.ZodType<Prisma.EnumREASONWithAggregatesFilter> = z.object({
  equals: z.lazy(() => REASONSchema).optional(),
  in: z.lazy(() => REASONSchema).array().optional(),
  notIn: z.lazy(() => REASONSchema).array().optional(),
  not: z.union([ z.lazy(() => REASONSchema),z.lazy(() => NestedEnumREASONWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumREASONFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumREASONFilterSchema).optional()
}).strict();

export const EnumSTATEWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSTATEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => STATESchema).optional(),
  in: z.lazy(() => STATESchema).array().optional(),
  notIn: z.lazy(() => STATESchema).array().optional(),
  not: z.union([ z.lazy(() => STATESchema),z.lazy(() => NestedEnumSTATEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSTATEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSTATEFilterSchema).optional()
}).strict();

export const EventCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  endedAt: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  endedAt: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  endedAt: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSTATUSNullableFilterSchema: z.ZodType<Prisma.EnumSTATUSNullableFilter> = z.object({
  equals: z.lazy(() => STATUSSchema).optional().nullable(),
  in: z.lazy(() => STATUSSchema).array().optional().nullable(),
  notIn: z.lazy(() => STATUSSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NestedEnumSTATUSNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const IntegrationCountOrderByAggregateInputSchema: z.ZodType<Prisma.IntegrationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  connectedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  triggerToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  runId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntegrationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.IntegrationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  connectedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  triggerToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  runId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntegrationMinOrderByAggregateInputSchema: z.ZodType<Prisma.IntegrationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  connectedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  triggerToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  runId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSTATUSNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSTATUSNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => STATUSSchema).optional().nullable(),
  in: z.lazy(() => STATUSSchema).array().optional().nullable(),
  notIn: z.lazy(() => STATUSSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NestedEnumSTATUSNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSTATUSNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSTATUSNullableFilterSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LevelNumberWorkspaceIdCompoundUniqueInputSchema: z.ZodType<Prisma.LevelNumberWorkspaceIdCompoundUniqueInput> = z.object({
  number: z.number(),
  workspaceId: z.string()
}).strict();

export const LevelCountOrderByAggregateInputSchema: z.ZodType<Prisma.LevelCountOrderByAggregateInput> = z.object({
  number: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional(),
  to: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LevelAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LevelAvgOrderByAggregateInput> = z.object({
  number: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional(),
  to: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LevelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LevelMaxOrderByAggregateInput> = z.object({
  number: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional(),
  to: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LevelMinOrderByAggregateInputSchema: z.ZodType<Prisma.LevelMinOrderByAggregateInput> = z.object({
  number: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional(),
  to: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LevelSumOrderByAggregateInputSchema: z.ZodType<Prisma.LevelSumOrderByAggregateInput> = z.object({
  number: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional(),
  to: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListCountOrderByAggregateInputSchema: z.ZodType<Prisma.ListCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  groupFilters: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ListMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListMinOrderByAggregateInputSchema: z.ZodType<Prisma.ListMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogCountOrderByAggregateInputSchema: z.ZodType<Prisma.LogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LogAvgOrderByAggregateInput> = z.object({
  pulse: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogMinOrderByAggregateInputSchema: z.ZodType<Prisma.LogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogSumOrderByAggregateInputSchema: z.ZodType<Prisma.LogSumOrderByAggregateInput> = z.object({
  pulse: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const LevelNullableScalarRelationFilterSchema: z.ZodType<Prisma.LevelNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => LevelWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => LevelWhereInputSchema).optional().nullable()
}).strict();

export const CompanyNullableScalarRelationFilterSchema: z.ZodType<Prisma.CompanyNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CompanyWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CompanyWhereInputSchema).optional().nullable()
}).strict();

export const LogListRelationFilterSchema: z.ZodType<Prisma.LogListRelationFilter> = z.object({
  every: z.lazy(() => LogWhereInputSchema).optional(),
  some: z.lazy(() => LogWhereInputSchema).optional(),
  none: z.lazy(() => LogWhereInputSchema).optional()
}).strict();

export const ProfileListRelationFilterSchema: z.ZodType<Prisma.ProfileListRelationFilter> = z.object({
  every: z.lazy(() => ProfileWhereInputSchema).optional(),
  some: z.lazy(() => ProfileWhereInputSchema).optional(),
  none: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const LogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProfileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberCountOrderByAggregateInputSchema: z.ZodType<Prisma.MemberCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  primaryEmail: z.lazy(() => SortOrderSchema).optional(),
  emails: z.lazy(() => SortOrderSchema).optional(),
  phones: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  linkedinUrl: z.lazy(() => SortOrderSchema).optional(),
  levelNumber: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  firstActivity: z.lazy(() => SortOrderSchema).optional(),
  lastActivity: z.lazy(() => SortOrderSchema).optional(),
  isStaff: z.lazy(() => SortOrderSchema).optional(),
  customFields: z.lazy(() => SortOrderSchema).optional(),
  atRiskMember: z.lazy(() => SortOrderSchema).optional(),
  potentialAmbassador: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MemberAvgOrderByAggregateInput> = z.object({
  levelNumber: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  primaryEmail: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  linkedinUrl: z.lazy(() => SortOrderSchema).optional(),
  levelNumber: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  firstActivity: z.lazy(() => SortOrderSchema).optional(),
  lastActivity: z.lazy(() => SortOrderSchema).optional(),
  isStaff: z.lazy(() => SortOrderSchema).optional(),
  atRiskMember: z.lazy(() => SortOrderSchema).optional(),
  potentialAmbassador: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMinOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  primaryEmail: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  linkedinUrl: z.lazy(() => SortOrderSchema).optional(),
  levelNumber: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  firstActivity: z.lazy(() => SortOrderSchema).optional(),
  lastActivity: z.lazy(() => SortOrderSchema).optional(),
  isStaff: z.lazy(() => SortOrderSchema).optional(),
  atRiskMember: z.lazy(() => SortOrderSchema).optional(),
  potentialAmbassador: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberSumOrderByAggregateInputSchema: z.ZodType<Prisma.MemberSumOrderByAggregateInput> = z.object({
  levelNumber: z.lazy(() => SortOrderSchema).optional(),
  pulse: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const ProfileCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  attributes: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRUN_STATUSFilterSchema: z.ZodType<Prisma.EnumRUN_STATUSFilter> = z.object({
  equals: z.lazy(() => RUN_STATUSSchema).optional(),
  in: z.lazy(() => RUN_STATUSSchema).array().optional(),
  notIn: z.lazy(() => RUN_STATUSSchema).array().optional(),
  not: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => NestedEnumRUN_STATUSFilterSchema) ]).optional(),
}).strict();

export const WorkflowScalarRelationFilterSchema: z.ZodType<Prisma.WorkflowScalarRelationFilter> = z.object({
  is: z.lazy(() => WorkflowWhereInputSchema).optional(),
  isNot: z.lazy(() => WorkflowWhereInputSchema).optional()
}).strict();

export const RunCountOrderByAggregateInputSchema: z.ZodType<Prisma.RunCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  failedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  runNodes: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RunAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RunAvgOrderByAggregateInput> = z.object({
  credits: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RunMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RunMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  failedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RunMinOrderByAggregateInputSchema: z.ZodType<Prisma.RunMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  failedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RunSumOrderByAggregateInputSchema: z.ZodType<Prisma.RunSumOrderByAggregateInput> = z.object({
  credits: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRUN_STATUSWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRUN_STATUSWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RUN_STATUSSchema).optional(),
  in: z.lazy(() => RUN_STATUSSchema).array().optional(),
  notIn: z.lazy(() => RUN_STATUSSchema).array().optional(),
  not: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => NestedEnumRUN_STATUSWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRUN_STATUSFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRUN_STATUSFilterSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberNullableScalarRelationFilterSchema: z.ZodType<Prisma.MemberNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => MemberWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => MemberWhereInputSchema).optional().nullable()
}).strict();

export const TagExternalIdWorkspaceIdCompoundUniqueInputSchema: z.ZodType<Prisma.TagExternalIdWorkspaceIdCompoundUniqueInput> = z.object({
  externalId: z.string(),
  workspaceId: z.string()
}).strict();

export const TagCountOrderByAggregateInputSchema: z.ZodType<Prisma.TagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMinOrderByAggregateInputSchema: z.ZodType<Prisma.TagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  externalId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  companyId: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  assignee: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  assignee: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  assignee: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  memberId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumROLEFilterSchema: z.ZodType<Prisma.EnumROLEFilter> = z.object({
  equals: z.lazy(() => ROLESchema).optional(),
  in: z.lazy(() => ROLESchema).array().optional(),
  notIn: z.lazy(() => ROLESchema).array().optional(),
  not: z.union([ z.lazy(() => ROLESchema),z.lazy(() => NestedEnumROLEFilterSchema) ]).optional(),
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const UserInWorkspaceListRelationFilterSchema: z.ZodType<Prisma.UserInWorkspaceListRelationFilter> = z.object({
  every: z.lazy(() => UserInWorkspaceWhereInputSchema).optional(),
  some: z.lazy(() => UserInWorkspaceWhereInputSchema).optional(),
  none: z.lazy(() => UserInWorkspaceWhereInputSchema).optional()
}).strict();

export const WorkflowListRelationFilterSchema: z.ZodType<Prisma.WorkflowListRelationFilter> = z.object({
  every: z.lazy(() => WorkflowWhereInputSchema).optional(),
  some: z.lazy(() => WorkflowWhereInputSchema).optional(),
  none: z.lazy(() => WorkflowWhereInputSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserInWorkspaceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserInWorkspaceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkflowOrderByRelationAggregateInputSchema: z.ZodType<Prisma.WorkflowOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  onboarding: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  lastActivityAt: z.lazy(() => SortOrderSchema).optional(),
  membersPreferences: z.lazy(() => SortOrderSchema).optional(),
  companiesPreferences: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  onboarding: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  lastActivityAt: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  onboarding: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  lastActivityAt: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumROLEWithAggregatesFilterSchema: z.ZodType<Prisma.EnumROLEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ROLESchema).optional(),
  in: z.lazy(() => ROLESchema).array().optional(),
  notIn: z.lazy(() => ROLESchema).array().optional(),
  not: z.union([ z.lazy(() => ROLESchema),z.lazy(() => NestedEnumROLEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumROLEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumROLEFilterSchema).optional()
}).strict();

export const UserInWorkspaceCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserInWorkspaceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserInWorkspaceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserInWorkspaceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserInWorkspaceMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserInWorkspaceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenIdentifierTokenCompoundUniqueInputSchema: z.ZodType<Prisma.VerificationTokenIdentifierTokenCompoundUniqueInput> = z.object({
  identifier: z.string(),
  token: z.string()
}).strict();

export const VerificationTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RunListRelationFilterSchema: z.ZodType<Prisma.RunListRelationFilter> = z.object({
  every: z.lazy(() => RunWhereInputSchema).optional(),
  some: z.lazy(() => RunWhereInputSchema).optional(),
  none: z.lazy(() => RunWhereInputSchema).optional()
}).strict();

export const RunOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RunOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkflowCountOrderByAggregateInputSchema: z.ZodType<Prisma.WorkflowCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  nodes: z.lazy(() => SortOrderSchema).optional(),
  edges: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  alertOnSuccess: z.lazy(() => SortOrderSchema).optional(),
  alertOnFailure: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkflowMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WorkflowMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  alertOnSuccess: z.lazy(() => SortOrderSchema).optional(),
  alertOnFailure: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkflowMinOrderByAggregateInputSchema: z.ZodType<Prisma.WorkflowMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  alertOnSuccess: z.lazy(() => SortOrderSchema).optional(),
  alertOnFailure: z.lazy(() => SortOrderSchema).optional(),
  workspaceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  archivedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPLANNullableFilterSchema: z.ZodType<Prisma.EnumPLANNullableFilter> = z.object({
  equals: z.lazy(() => PLANSchema).optional().nullable(),
  in: z.lazy(() => PLANSchema).array().optional().nullable(),
  notIn: z.lazy(() => PLANSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NestedEnumPLANNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ActivityTypeListRelationFilterSchema: z.ZodType<Prisma.ActivityTypeListRelationFilter> = z.object({
  every: z.lazy(() => ActivityTypeWhereInputSchema).optional(),
  some: z.lazy(() => ActivityTypeWhereInputSchema).optional(),
  none: z.lazy(() => ActivityTypeWhereInputSchema).optional()
}).strict();

export const ApiKeyListRelationFilterSchema: z.ZodType<Prisma.ApiKeyListRelationFilter> = z.object({
  every: z.lazy(() => ApiKeyWhereInputSchema).optional(),
  some: z.lazy(() => ApiKeyWhereInputSchema).optional(),
  none: z.lazy(() => ApiKeyWhereInputSchema).optional()
}).strict();

export const ChannelListRelationFilterSchema: z.ZodType<Prisma.ChannelListRelationFilter> = z.object({
  every: z.lazy(() => ChannelWhereInputSchema).optional(),
  some: z.lazy(() => ChannelWhereInputSchema).optional(),
  none: z.lazy(() => ChannelWhereInputSchema).optional()
}).strict();

export const CompanyListRelationFilterSchema: z.ZodType<Prisma.CompanyListRelationFilter> = z.object({
  every: z.lazy(() => CompanyWhereInputSchema).optional(),
  some: z.lazy(() => CompanyWhereInputSchema).optional(),
  none: z.lazy(() => CompanyWhereInputSchema).optional()
}).strict();

export const CustomFieldListRelationFilterSchema: z.ZodType<Prisma.CustomFieldListRelationFilter> = z.object({
  every: z.lazy(() => CustomFieldWhereInputSchema).optional(),
  some: z.lazy(() => CustomFieldWhereInputSchema).optional(),
  none: z.lazy(() => CustomFieldWhereInputSchema).optional()
}).strict();

export const DuplicateListRelationFilterSchema: z.ZodType<Prisma.DuplicateListRelationFilter> = z.object({
  every: z.lazy(() => DuplicateWhereInputSchema).optional(),
  some: z.lazy(() => DuplicateWhereInputSchema).optional(),
  none: z.lazy(() => DuplicateWhereInputSchema).optional()
}).strict();

export const EventListRelationFilterSchema: z.ZodType<Prisma.EventListRelationFilter> = z.object({
  every: z.lazy(() => EventWhereInputSchema).optional(),
  some: z.lazy(() => EventWhereInputSchema).optional(),
  none: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const IntegrationListRelationFilterSchema: z.ZodType<Prisma.IntegrationListRelationFilter> = z.object({
  every: z.lazy(() => IntegrationWhereInputSchema).optional(),
  some: z.lazy(() => IntegrationWhereInputSchema).optional(),
  none: z.lazy(() => IntegrationWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const LevelListRelationFilterSchema: z.ZodType<Prisma.LevelListRelationFilter> = z.object({
  every: z.lazy(() => LevelWhereInputSchema).optional(),
  some: z.lazy(() => LevelWhereInputSchema).optional(),
  none: z.lazy(() => LevelWhereInputSchema).optional()
}).strict();

export const ListListRelationFilterSchema: z.ZodType<Prisma.ListListRelationFilter> = z.object({
  every: z.lazy(() => ListWhereInputSchema).optional(),
  some: z.lazy(() => ListWhereInputSchema).optional(),
  none: z.lazy(() => ListWhereInputSchema).optional()
}).strict();

export const TaskListRelationFilterSchema: z.ZodType<Prisma.TaskListRelationFilter> = z.object({
  every: z.lazy(() => TaskWhereInputSchema).optional(),
  some: z.lazy(() => TaskWhereInputSchema).optional(),
  none: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const ActivityTypeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ActivityTypeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ApiKeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChannelOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ChannelOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompanyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CompanyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomFieldOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DuplicateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DuplicateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntegrationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.IntegrationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LevelOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LevelOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ListOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkspaceCountOrderByAggregateInputSchema: z.ZodType<Prisma.WorkspaceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companySize: z.lazy(() => SortOrderSchema).optional(),
  plan: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  priceId: z.lazy(() => SortOrderSchema).optional(),
  trialEnd: z.lazy(() => SortOrderSchema).optional(),
  isPastDue: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkspaceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WorkspaceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companySize: z.lazy(() => SortOrderSchema).optional(),
  plan: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  priceId: z.lazy(() => SortOrderSchema).optional(),
  trialEnd: z.lazy(() => SortOrderSchema).optional(),
  isPastDue: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkspaceMinOrderByAggregateInputSchema: z.ZodType<Prisma.WorkspaceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  companySize: z.lazy(() => SortOrderSchema).optional(),
  plan: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  priceId: z.lazy(() => SortOrderSchema).optional(),
  trialEnd: z.lazy(() => SortOrderSchema).optional(),
  isPastDue: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPLANNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPLANNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PLANSchema).optional().nullable(),
  in: z.lazy(() => PLANSchema).array().optional().nullable(),
  notIn: z.lazy(() => PLANSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NestedEnumPLANNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPLANNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPLANNullableFilterSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const ActivityTypeCreateNestedOneWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeCreateNestedOneWithoutActivityInput> = z.object({
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutActivityInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutActivityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ActivityTypeCreateOrConnectWithoutActivityInputSchema).optional(),
  connect: z.lazy(() => ActivityTypeWhereUniqueInputSchema).optional()
}).strict();

export const ChannelCreateNestedOneWithoutActivityInputSchema: z.ZodType<Prisma.ChannelCreateNestedOneWithoutActivityInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutActivityInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutActivityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChannelCreateOrConnectWithoutActivityInputSchema).optional(),
  connect: z.lazy(() => ChannelWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutActivitiesInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutActivitiesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutActivitiesInputSchema),z.lazy(() => EventUncheckedCreateWithoutActivitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutActivitiesInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const MemberCreateNestedOneWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberCreateNestedOneWithoutActivitiesInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutActivitiesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutActivitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutActivitiesInputSchema).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceCreateNestedOneWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutActivitiesInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutActivitiesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const EnumSOURCEFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumSOURCEFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => SOURCESchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const ActivityTypeUpdateOneRequiredWithoutActivityNestedInputSchema: z.ZodType<Prisma.ActivityTypeUpdateOneRequiredWithoutActivityNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutActivityInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutActivityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ActivityTypeCreateOrConnectWithoutActivityInputSchema).optional(),
  upsert: z.lazy(() => ActivityTypeUpsertWithoutActivityInputSchema).optional(),
  connect: z.lazy(() => ActivityTypeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ActivityTypeUpdateToOneWithWhereWithoutActivityInputSchema),z.lazy(() => ActivityTypeUpdateWithoutActivityInputSchema),z.lazy(() => ActivityTypeUncheckedUpdateWithoutActivityInputSchema) ]).optional(),
}).strict();

export const ChannelUpdateOneWithoutActivityNestedInputSchema: z.ZodType<Prisma.ChannelUpdateOneWithoutActivityNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutActivityInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutActivityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChannelCreateOrConnectWithoutActivityInputSchema).optional(),
  upsert: z.lazy(() => ChannelUpsertWithoutActivityInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ChannelWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ChannelWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ChannelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateToOneWithWhereWithoutActivityInputSchema),z.lazy(() => ChannelUpdateWithoutActivityInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutActivityInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutActivitiesNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutActivitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutActivitiesInputSchema),z.lazy(() => EventUncheckedCreateWithoutActivitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutActivitiesInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutActivitiesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutActivitiesInputSchema),z.lazy(() => EventUpdateWithoutActivitiesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActivitiesInputSchema) ]).optional(),
}).strict();

export const MemberUpdateOneRequiredWithoutActivitiesNestedInputSchema: z.ZodType<Prisma.MemberUpdateOneRequiredWithoutActivitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutActivitiesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutActivitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutActivitiesInputSchema).optional(),
  upsert: z.lazy(() => MemberUpsertWithoutActivitiesInputSchema).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MemberUpdateToOneWithWhereWithoutActivitiesInputSchema),z.lazy(() => MemberUpdateWithoutActivitiesInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutActivitiesInputSchema) ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutActivitiesNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutActivitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutActivitiesInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutActivitiesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUpdateWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutActivitiesInputSchema) ]).optional(),
}).strict();

export const ActivityTypeCreateconditionsInputSchema: z.ZodType<Prisma.ActivityTypeCreateconditionsInput> = z.object({
  set: InputJsonValueSchema.array()
}).strict();

export const WorkspaceCreateNestedOneWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutActivityTypesInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivityTypesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutActivityTypesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const ActivityCreateNestedManyWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityCreateNestedManyWithoutActivityTypeInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyActivityTypeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedCreateNestedManyWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateNestedManyWithoutActivityTypeInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyActivityTypeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const ActivityTypeUpdateconditionsInputSchema: z.ZodType<Prisma.ActivityTypeUpdateconditionsInput> = z.object({
  set: InputJsonValueSchema.array().optional(),
  push: z.union([ InputJsonValueSchema,InputJsonValueSchema.array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutActivityTypesNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutActivityTypesNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivityTypesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutActivityTypesInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutActivityTypesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUpdateWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutActivityTypesInputSchema) ]).optional(),
}).strict();

export const ActivityUpdateManyWithoutActivityTypeNestedInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithoutActivityTypeNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutActivityTypeInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutActivityTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyActivityTypeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutActivityTypeInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutActivityTypeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutActivityTypeInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutActivityTypeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutActivityTypeNestedInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutActivityTypeNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutActivityTypeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutActivityTypeInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutActivityTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyActivityTypeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutActivityTypeInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutActivityTypeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutActivityTypeInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutActivityTypeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutApiKeysInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutApiKeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutApiKeysInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutApiKeysNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutApiKeysNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutApiKeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutApiKeysInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutApiKeysInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUpdateWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutApiKeysInputSchema) ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutChannelsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutChannelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutChannelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutChannelsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const ActivityCreateNestedManyWithoutChannelInputSchema: z.ZodType<Prisma.ActivityCreateNestedManyWithoutChannelInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutChannelInputSchema),z.lazy(() => ActivityCreateWithoutChannelInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyChannelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedCreateNestedManyWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateNestedManyWithoutChannelInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutChannelInputSchema),z.lazy(() => ActivityCreateWithoutChannelInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyChannelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutChannelsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutChannelsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutChannelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutChannelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutChannelsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutChannelsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutChannelsInputSchema),z.lazy(() => WorkspaceUpdateWithoutChannelsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutChannelsInputSchema) ]).optional(),
}).strict();

export const ActivityUpdateManyWithoutChannelNestedInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithoutChannelNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutChannelInputSchema),z.lazy(() => ActivityCreateWithoutChannelInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyChannelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutChannelInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutChannelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutChannelNestedInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutChannelNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutChannelInputSchema),z.lazy(() => ActivityCreateWithoutChannelInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutChannelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyChannelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutChannelInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutChannelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutChannelInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutChannelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompanyCreatetagsInputSchema: z.ZodType<Prisma.CompanyCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const CompanyCreatecustomFieldsInputSchema: z.ZodType<Prisma.CompanyCreatecustomFieldsInput> = z.object({
  set: InputJsonValueSchema.array()
}).strict();

export const WorkspaceCreateNestedOneWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutCompaniesInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCompaniesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutCompaniesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const MemberCreateNestedManyWithoutCompanyInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutCompanyInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutCompanyInputSchema),z.lazy(() => MemberCreateWithoutCompanyInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyCompanyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCreateNestedManyWithoutCompanyInputSchema: z.ZodType<Prisma.TagCreateNestedManyWithoutCompanyInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCompanyInputSchema),z.lazy(() => TagCreateWithoutCompanyInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCompanyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutCompanyInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutCompanyInputSchema),z.lazy(() => MemberCreateWithoutCompanyInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyCompanyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedCreateNestedManyWithoutCompanyInputSchema: z.ZodType<Prisma.TagUncheckedCreateNestedManyWithoutCompanyInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCompanyInputSchema),z.lazy(() => TagCreateWithoutCompanyInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCompanyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const CompanyUpdatetagsInputSchema: z.ZodType<Prisma.CompanyUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CompanyUpdatecustomFieldsInputSchema: z.ZodType<Prisma.CompanyUpdatecustomFieldsInput> = z.object({
  set: InputJsonValueSchema.array().optional(),
  push: z.union([ InputJsonValueSchema,InputJsonValueSchema.array() ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutCompaniesNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutCompaniesNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCompaniesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutCompaniesInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutCompaniesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUpdateWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutCompaniesInputSchema) ]).optional(),
}).strict();

export const MemberUpdateManyWithoutCompanyNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutCompanyNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutCompanyInputSchema),z.lazy(() => MemberCreateWithoutCompanyInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyCompanyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutCompanyInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutCompanyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUpdateManyWithoutCompanyNestedInputSchema: z.ZodType<Prisma.TagUpdateManyWithoutCompanyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCompanyInputSchema),z.lazy(() => TagCreateWithoutCompanyInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCompanyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutCompanyInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutCompanyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutCompanyNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutCompanyNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutCompanyInputSchema),z.lazy(() => MemberCreateWithoutCompanyInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => MemberCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyCompanyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutCompanyInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutCompanyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedUpdateManyWithoutCompanyNestedInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutCompanyNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCompanyInputSchema),z.lazy(() => TagCreateWithoutCompanyInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema),z.lazy(() => TagCreateOrConnectWithoutCompanyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCompanyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutCompanyInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutCompanyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutCompanyInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutCompanyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomFieldCreateoptionsInputSchema: z.ZodType<Prisma.CustomFieldCreateoptionsInput> = z.object({
  set: InputJsonValueSchema.array()
}).strict();

export const WorkspaceCreateNestedOneWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutCustomFieldsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCustomFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutCustomFieldsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const EnumTYPEFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTYPEFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TYPESchema).optional()
}).strict();

export const CustomFieldUpdateoptionsInputSchema: z.ZodType<Prisma.CustomFieldUpdateoptionsInput> = z.object({
  set: InputJsonValueSchema.array().optional(),
  push: z.union([ InputJsonValueSchema,InputJsonValueSchema.array() ]).optional(),
}).strict();

export const EnumRECORDFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRECORDFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RECORDSchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutCustomFieldsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutCustomFieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCustomFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutCustomFieldsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutCustomFieldsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUpdateWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutCustomFieldsInputSchema) ]).optional(),
}).strict();

export const DuplicateCreatememberIdsInputSchema: z.ZodType<Prisma.DuplicateCreatememberIdsInput> = z.object({
  set: z.string().array()
}).strict();

export const WorkspaceCreateNestedOneWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutDuplicatesInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutDuplicatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutDuplicatesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const DuplicateUpdatememberIdsInputSchema: z.ZodType<Prisma.DuplicateUpdatememberIdsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const EnumREASONFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumREASONFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => REASONSchema).optional()
}).strict();

export const EnumSTATEFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumSTATEFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => STATESchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutDuplicatesNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutDuplicatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutDuplicatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutDuplicatesInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutDuplicatesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUpdateWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutDuplicatesInputSchema) ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutEventsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const ActivityCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.ActivityCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutEventInputSchema),z.lazy(() => ActivityCreateWithoutEventInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutEventInputSchema),z.lazy(() => ActivityCreateWithoutEventInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutEventsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutEventsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => WorkspaceUpdateWithoutEventsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const ActivityUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutEventInputSchema),z.lazy(() => ActivityCreateWithoutEventInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutEventInputSchema),z.lazy(() => ActivityCreateWithoutEventInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutIntegrationsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutIntegrationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutIntegrationsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumSTATUSFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumSTATUSFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => STATUSSchema).optional().nullable()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutIntegrationsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutIntegrationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutIntegrationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutIntegrationsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutIntegrationsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUpdateWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutIntegrationsInputSchema) ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUpdateWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutLevelsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLevelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLevelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutLevelsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const MemberCreateNestedManyWithoutLevelInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutLevelInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutLevelInputSchema),z.lazy(() => MemberCreateWithoutLevelInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema),z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyLevelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutLevelInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutLevelInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutLevelInputSchema),z.lazy(() => MemberCreateWithoutLevelInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema),z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyLevelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutLevelsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutLevelsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLevelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLevelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutLevelsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutLevelsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutLevelsInputSchema),z.lazy(() => WorkspaceUpdateWithoutLevelsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutLevelsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateManyWithoutLevelNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutLevelNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutLevelInputSchema),z.lazy(() => MemberCreateWithoutLevelInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema),z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutLevelInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutLevelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyLevelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutLevelInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutLevelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutLevelInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutLevelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutLevelNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutLevelNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutLevelInputSchema),z.lazy(() => MemberCreateWithoutLevelInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema),z.lazy(() => MemberCreateOrConnectWithoutLevelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutLevelInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutLevelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyLevelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutLevelInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutLevelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutLevelInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutLevelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutListsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutListsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutListsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutListsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutListsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutListsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutListsInputSchema),z.lazy(() => WorkspaceUpdateWithoutListsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutListsInputSchema) ]).optional(),
}).strict();

export const MemberCreateNestedOneWithoutLogsInputSchema: z.ZodType<Prisma.MemberCreateNestedOneWithoutLogsInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutLogsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutLogsInputSchema).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceCreateNestedOneWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutLogsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLogsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutLogsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const MemberUpdateOneRequiredWithoutLogsNestedInputSchema: z.ZodType<Prisma.MemberUpdateOneRequiredWithoutLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutLogsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutLogsInputSchema).optional(),
  upsert: z.lazy(() => MemberUpsertWithoutLogsInputSchema).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MemberUpdateToOneWithWhereWithoutLogsInputSchema),z.lazy(() => MemberUpdateWithoutLogsInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutLogsInputSchema) ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutLogsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLogsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutLogsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutLogsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutLogsInputSchema),z.lazy(() => WorkspaceUpdateWithoutLogsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutLogsInputSchema) ]).optional(),
}).strict();

export const MemberCreateemailsInputSchema: z.ZodType<Prisma.MemberCreateemailsInput> = z.object({
  set: z.string().array()
}).strict();

export const MemberCreatephonesInputSchema: z.ZodType<Prisma.MemberCreatephonesInput> = z.object({
  set: z.string().array()
}).strict();

export const MemberCreatetagsInputSchema: z.ZodType<Prisma.MemberCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const LevelCreateNestedOneWithoutMemberInputSchema: z.ZodType<Prisma.LevelCreateNestedOneWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => LevelCreateWithoutMemberInputSchema),z.lazy(() => LevelUncheckedCreateWithoutMemberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LevelCreateOrConnectWithoutMemberInputSchema).optional(),
  connect: z.lazy(() => LevelWhereUniqueInputSchema).optional()
}).strict();

export const CompanyCreateNestedOneWithoutMemberInputSchema: z.ZodType<Prisma.CompanyCreateNestedOneWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutMemberInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutMemberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompanyCreateOrConnectWithoutMemberInputSchema).optional(),
  connect: z.lazy(() => CompanyWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutMembersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const ActivityCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.ActivityCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutMemberInputSchema),z.lazy(() => ActivityCreateWithoutMemberInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LogCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.LogCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutMemberInputSchema),z.lazy(() => LogCreateWithoutMemberInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema),z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.ProfileCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutMemberInputSchema),z.lazy(() => ProfileCreateWithoutMemberInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.TagCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutMemberInputSchema),z.lazy(() => TagCreateWithoutMemberInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema),z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutMemberInputSchema),z.lazy(() => ActivityCreateWithoutMemberInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LogUncheckedCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.LogUncheckedCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutMemberInputSchema),z.lazy(() => LogCreateWithoutMemberInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema),z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutMemberInputSchema),z.lazy(() => ProfileCreateWithoutMemberInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedCreateNestedManyWithoutMemberInputSchema: z.ZodType<Prisma.TagUncheckedCreateNestedManyWithoutMemberInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutMemberInputSchema),z.lazy(() => TagCreateWithoutMemberInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema),z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyMemberInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateemailsInputSchema: z.ZodType<Prisma.MemberUpdateemailsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const MemberUpdatephonesInputSchema: z.ZodType<Prisma.MemberUpdatephonesInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const MemberUpdatetagsInputSchema: z.ZodType<Prisma.MemberUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const LevelUpdateOneWithoutMemberNestedInputSchema: z.ZodType<Prisma.LevelUpdateOneWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => LevelCreateWithoutMemberInputSchema),z.lazy(() => LevelUncheckedCreateWithoutMemberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LevelCreateOrConnectWithoutMemberInputSchema).optional(),
  upsert: z.lazy(() => LevelUpsertWithoutMemberInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LevelWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LevelWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LevelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LevelUpdateToOneWithWhereWithoutMemberInputSchema),z.lazy(() => LevelUpdateWithoutMemberInputSchema),z.lazy(() => LevelUncheckedUpdateWithoutMemberInputSchema) ]).optional(),
}).strict();

export const CompanyUpdateOneWithoutMemberNestedInputSchema: z.ZodType<Prisma.CompanyUpdateOneWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutMemberInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutMemberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompanyCreateOrConnectWithoutMemberInputSchema).optional(),
  upsert: z.lazy(() => CompanyUpsertWithoutMemberInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompanyWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompanyWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompanyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompanyUpdateToOneWithWhereWithoutMemberInputSchema),z.lazy(() => CompanyUpdateWithoutMemberInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutMemberInputSchema) ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutMembersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => WorkspaceUpdateWithoutMembersInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const ActivityUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutMemberInputSchema),z.lazy(() => ActivityCreateWithoutMemberInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LogUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.LogUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutMemberInputSchema),z.lazy(() => LogCreateWithoutMemberInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema),z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LogUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => LogUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LogUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => LogUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LogUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => LogUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LogScalarWhereInputSchema),z.lazy(() => LogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutMemberInputSchema),z.lazy(() => ProfileCreateWithoutMemberInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.TagUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutMemberInputSchema),z.lazy(() => TagCreateWithoutMemberInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema),z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutMemberInputSchema),z.lazy(() => ActivityCreateWithoutMemberInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LogUncheckedUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.LogUncheckedUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutMemberInputSchema),z.lazy(() => LogCreateWithoutMemberInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema),z.lazy(() => LogCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LogUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => LogUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LogUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => LogUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LogUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => LogUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LogScalarWhereInputSchema),z.lazy(() => LogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutMemberInputSchema),z.lazy(() => ProfileCreateWithoutMemberInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedUpdateManyWithoutMemberNestedInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutMemberNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutMemberInputSchema),z.lazy(() => TagCreateWithoutMemberInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema),z.lazy(() => TagCreateOrConnectWithoutMemberInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyMemberInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutMemberInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutMemberInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutMemberInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutMemberInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedOneWithoutProfilesInputSchema: z.ZodType<Prisma.MemberCreateNestedOneWithoutProfilesInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutProfilesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutProfilesInputSchema).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutProfileInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const MemberUpdateOneRequiredWithoutProfilesNestedInputSchema: z.ZodType<Prisma.MemberUpdateOneRequiredWithoutProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutProfilesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutProfilesInputSchema).optional(),
  upsert: z.lazy(() => MemberUpsertWithoutProfilesInputSchema).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MemberUpdateToOneWithWhereWithoutProfilesInputSchema),z.lazy(() => MemberUpdateWithoutProfilesInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutProfilesInputSchema) ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutProfileNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutProfileInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => WorkspaceUpdateWithoutProfileInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const RunCreaterunNodesInputSchema: z.ZodType<Prisma.RunCreaterunNodesInput> = z.object({
  set: InputJsonValueSchema.array()
}).strict();

export const WorkflowCreateNestedOneWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowCreateNestedOneWithoutRunsInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutRunsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutRunsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkflowCreateOrConnectWithoutRunsInputSchema).optional(),
  connect: z.lazy(() => WorkflowWhereUniqueInputSchema).optional()
}).strict();

export const EnumRUN_STATUSFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRUN_STATUSFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RUN_STATUSSchema).optional()
}).strict();

export const RunUpdaterunNodesInputSchema: z.ZodType<Prisma.RunUpdaterunNodesInput> = z.object({
  set: InputJsonValueSchema.array().optional(),
  push: z.union([ InputJsonValueSchema,InputJsonValueSchema.array() ]).optional(),
}).strict();

export const WorkflowUpdateOneRequiredWithoutRunsNestedInputSchema: z.ZodType<Prisma.WorkflowUpdateOneRequiredWithoutRunsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutRunsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutRunsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkflowCreateOrConnectWithoutRunsInputSchema).optional(),
  upsert: z.lazy(() => WorkflowUpsertWithoutRunsInputSchema).optional(),
  connect: z.lazy(() => WorkflowWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkflowUpdateToOneWithWhereWithoutRunsInputSchema),z.lazy(() => WorkflowUpdateWithoutRunsInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutRunsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutTagsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTagsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const CompanyCreateNestedOneWithoutTagInputSchema: z.ZodType<Prisma.CompanyCreateNestedOneWithoutTagInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutTagInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutTagInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompanyCreateOrConnectWithoutTagInputSchema).optional(),
  connect: z.lazy(() => CompanyWhereUniqueInputSchema).optional()
}).strict();

export const MemberCreateNestedOneWithoutTagsInputSchema: z.ZodType<Prisma.MemberCreateNestedOneWithoutTagsInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutTagsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutTagsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTagsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutTagsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutTagsInputSchema),z.lazy(() => WorkspaceUpdateWithoutTagsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutTagsInputSchema) ]).optional(),
}).strict();

export const CompanyUpdateOneWithoutTagNestedInputSchema: z.ZodType<Prisma.CompanyUpdateOneWithoutTagNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutTagInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutTagInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompanyCreateOrConnectWithoutTagInputSchema).optional(),
  upsert: z.lazy(() => CompanyUpsertWithoutTagInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompanyWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompanyWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompanyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompanyUpdateToOneWithWhereWithoutTagInputSchema),z.lazy(() => CompanyUpdateWithoutTagInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutTagInputSchema) ]).optional(),
}).strict();

export const MemberUpdateOneWithoutTagsNestedInputSchema: z.ZodType<Prisma.MemberUpdateOneWithoutTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutTagsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MemberCreateOrConnectWithoutTagsInputSchema).optional(),
  upsert: z.lazy(() => MemberUpsertWithoutTagsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => MemberWhereInputSchema) ]).optional(),
  connect: z.lazy(() => MemberWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MemberUpdateToOneWithWhereWithoutTagsInputSchema),z.lazy(() => MemberUpdateWithoutTagsInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutTagsInputSchema) ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTasksInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutTasksNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTasksInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => WorkspaceUpdateWithoutTasksInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const WorkspaceCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUsersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkflowCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.WorkflowCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutUserInputSchema),z.lazy(() => WorkflowCreateWithoutUserInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkflowUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutUserInputSchema),z.lazy(() => WorkflowCreateWithoutUserInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumROLEFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumROLEFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ROLESchema).optional()
}).strict();

export const WorkspaceUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUsersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => WorkspaceUpdateWithoutUsersInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserInWorkspaceScalarWhereInputSchema),z.lazy(() => UserInWorkspaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WorkflowUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.WorkflowUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutUserInputSchema),z.lazy(() => WorkflowCreateWithoutUserInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WorkflowUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => WorkflowUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WorkflowScalarWhereInputSchema),z.lazy(() => WorkflowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserInWorkspaceScalarWhereInputSchema),z.lazy(() => UserInWorkspaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WorkflowUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutUserInputSchema),z.lazy(() => WorkflowCreateWithoutUserInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WorkflowUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => WorkflowUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WorkflowScalarWhereInputSchema),z.lazy(() => WorkflowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserInWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserInWorkspaceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserInWorkspaceInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceCreateNestedOneWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutUserInWorkspacesInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUserInWorkspacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutUserInWorkspacesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutUserInWorkspaceNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserInWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserInWorkspaceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserInWorkspaceInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserInWorkspaceInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUpdateWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserInWorkspaceInputSchema) ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutUserInWorkspacesNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutUserInWorkspacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUserInWorkspacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutUserInWorkspacesInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutUserInWorkspacesInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUpdateWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutUserInWorkspacesInputSchema) ]).optional(),
}).strict();

export const WorkflowCreatenodesInputSchema: z.ZodType<Prisma.WorkflowCreatenodesInput> = z.object({
  set: InputJsonValueSchema.array()
}).strict();

export const WorkflowCreateedgesInputSchema: z.ZodType<Prisma.WorkflowCreateedgesInput> = z.object({
  set: InputJsonValueSchema.array()
}).strict();

export const RunCreateNestedManyWithoutWorkflowInputSchema: z.ZodType<Prisma.RunCreateNestedManyWithoutWorkflowInput> = z.object({
  create: z.union([ z.lazy(() => RunCreateWithoutWorkflowInputSchema),z.lazy(() => RunCreateWithoutWorkflowInputSchema).array(),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RunCreateManyWorkflowInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutWorkflowInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutWorkflowInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWorkflowInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkflowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutWorkflowInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const WorkspaceCreateNestedOneWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceCreateNestedOneWithoutWorkflowsInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutWorkflowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutWorkflowsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional()
}).strict();

export const RunUncheckedCreateNestedManyWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUncheckedCreateNestedManyWithoutWorkflowInput> = z.object({
  create: z.union([ z.lazy(() => RunCreateWithoutWorkflowInputSchema),z.lazy(() => RunCreateWithoutWorkflowInputSchema).array(),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RunCreateManyWorkflowInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkflowUpdatenodesInputSchema: z.ZodType<Prisma.WorkflowUpdatenodesInput> = z.object({
  set: InputJsonValueSchema.array().optional(),
  push: z.union([ InputJsonValueSchema,InputJsonValueSchema.array() ]).optional(),
}).strict();

export const WorkflowUpdateedgesInputSchema: z.ZodType<Prisma.WorkflowUpdateedgesInput> = z.object({
  set: InputJsonValueSchema.array().optional(),
  push: z.union([ InputJsonValueSchema,InputJsonValueSchema.array() ]).optional(),
}).strict();

export const RunUpdateManyWithoutWorkflowNestedInputSchema: z.ZodType<Prisma.RunUpdateManyWithoutWorkflowNestedInput> = z.object({
  create: z.union([ z.lazy(() => RunCreateWithoutWorkflowInputSchema),z.lazy(() => RunCreateWithoutWorkflowInputSchema).array(),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RunUpsertWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => RunUpsertWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RunCreateManyWorkflowInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RunUpdateWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => RunUpdateWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RunUpdateManyWithWhereWithoutWorkflowInputSchema),z.lazy(() => RunUpdateManyWithWhereWithoutWorkflowInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RunScalarWhereInputSchema),z.lazy(() => RunScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutWorkflowNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutWorkflowNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWorkflowInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkflowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutWorkflowInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutWorkflowInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutWorkflowInputSchema),z.lazy(() => UserUpdateWithoutWorkflowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWorkflowInputSchema) ]).optional(),
}).strict();

export const WorkspaceUpdateOneRequiredWithoutWorkflowsNestedInputSchema: z.ZodType<Prisma.WorkspaceUpdateOneRequiredWithoutWorkflowsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutWorkflowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkspaceCreateOrConnectWithoutWorkflowsInputSchema).optional(),
  upsert: z.lazy(() => WorkspaceUpsertWithoutWorkflowsInputSchema).optional(),
  connect: z.lazy(() => WorkspaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkspaceUpdateToOneWithWhereWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUpdateWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutWorkflowsInputSchema) ]).optional(),
}).strict();

export const RunUncheckedUpdateManyWithoutWorkflowNestedInputSchema: z.ZodType<Prisma.RunUncheckedUpdateManyWithoutWorkflowNestedInput> = z.object({
  create: z.union([ z.lazy(() => RunCreateWithoutWorkflowInputSchema),z.lazy(() => RunCreateWithoutWorkflowInputSchema).array(),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => RunCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RunUpsertWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => RunUpsertWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RunCreateManyWorkflowInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RunWhereUniqueInputSchema),z.lazy(() => RunWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RunUpdateWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => RunUpdateWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RunUpdateManyWithWhereWithoutWorkflowInputSchema),z.lazy(() => RunUpdateManyWithWhereWithoutWorkflowInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RunScalarWhereInputSchema),z.lazy(() => RunScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityTypeCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChannelCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompanyCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompanyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomFieldCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomFieldCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DuplicateCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DuplicateCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutWorkspaceInputSchema),z.lazy(() => EventCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IntegrationCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IntegrationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LevelCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => LevelCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LevelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ListCreateWithoutWorkspaceInputSchema),z.lazy(() => ListCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LogCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutWorkspaceInputSchema),z.lazy(() => LogCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutWorkspaceInputSchema),z.lazy(() => TagCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWorkspaceInputSchema),z.lazy(() => UserCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkflowCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityTypeCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompanyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomFieldCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DuplicateCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutWorkspaceInputSchema),z.lazy(() => EventCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IntegrationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => LevelCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LevelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ListCreateWithoutWorkspaceInputSchema),z.lazy(() => ListCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutWorkspaceInputSchema),z.lazy(() => LogCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutWorkspaceInputSchema),z.lazy(() => TagCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWorkspaceInputSchema),z.lazy(() => UserCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateNestedManyWithoutWorkspaceInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyWorkspaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumPLANFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumPLANFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PLANSchema).optional().nullable()
}).strict();

export const ActivityUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ActivityTypeUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityTypeUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityTypeCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityTypeUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityTypeUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityTypeScalarWhereInputSchema),z.lazy(() => ActivityTypeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ApiKeyUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChannelUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ChannelUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChannelUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ChannelUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ChannelUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChannelUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ChannelUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompanyUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.CompanyUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompanyUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CompanyUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompanyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompanyUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CompanyUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompanyUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => CompanyUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompanyScalarWhereInputSchema),z.lazy(() => CompanyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.CustomFieldUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomFieldUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomFieldCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomFieldUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomFieldUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomFieldScalarWhereInputSchema),z.lazy(() => CustomFieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DuplicateUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.DuplicateUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DuplicateUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DuplicateCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DuplicateUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DuplicateUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DuplicateScalarWhereInputSchema),z.lazy(() => DuplicateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutWorkspaceInputSchema),z.lazy(() => EventCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IntegrationUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.IntegrationUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IntegrationUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IntegrationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IntegrationUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IntegrationUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IntegrationScalarWhereInputSchema),z.lazy(() => IntegrationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LevelUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.LevelUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => LevelCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LevelUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LevelUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LevelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LevelUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LevelUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LevelUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => LevelUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LevelScalarWhereInputSchema),z.lazy(() => LevelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ListUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListCreateWithoutWorkspaceInputSchema),z.lazy(() => ListCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ListUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ListUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ListUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListScalarWhereInputSchema),z.lazy(() => ListScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LogUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.LogUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutWorkspaceInputSchema),z.lazy(() => LogCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LogUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LogUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LogUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LogUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LogUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => LogUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LogScalarWhereInputSchema),z.lazy(() => LogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.TagUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutWorkspaceInputSchema),z.lazy(() => TagCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserInWorkspaceScalarWhereInputSchema),z.lazy(() => UserInWorkspaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWorkspaceInputSchema),z.lazy(() => UserCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WorkflowUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.WorkflowUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WorkflowUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WorkflowScalarWhereInputSchema),z.lazy(() => WorkflowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityWhereUniqueInputSchema),z.lazy(() => ActivityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ActivityUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ActivityTypeUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ActivityTypeCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ActivityTypeWhereUniqueInputSchema),z.lazy(() => ActivityTypeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ActivityTypeUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ActivityTypeUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ActivityTypeScalarWhereInputSchema),z.lazy(() => ActivityTypeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ApiKeyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ApiKeyWhereUniqueInputSchema),z.lazy(() => ApiKeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ApiKeyUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ChannelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChannelUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ChannelUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChannelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChannelWhereUniqueInputSchema),z.lazy(() => ChannelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChannelUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ChannelUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChannelUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ChannelUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.CompanyUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CompanyCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompanyUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CompanyUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompanyCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompanyWhereUniqueInputSchema),z.lazy(() => CompanyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompanyUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CompanyUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompanyUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => CompanyUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompanyScalarWhereInputSchema),z.lazy(() => CompanyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomFieldUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomFieldCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomFieldWhereUniqueInputSchema),z.lazy(() => CustomFieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomFieldUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomFieldUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomFieldScalarWhereInputSchema),z.lazy(() => CustomFieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => DuplicateCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DuplicateUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DuplicateCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DuplicateWhereUniqueInputSchema),z.lazy(() => DuplicateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DuplicateUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DuplicateUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DuplicateScalarWhereInputSchema),z.lazy(() => DuplicateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutWorkspaceInputSchema),z.lazy(() => EventCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => EventCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => IntegrationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IntegrationUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IntegrationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IntegrationWhereUniqueInputSchema),z.lazy(() => IntegrationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IntegrationUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IntegrationUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IntegrationScalarWhereInputSchema),z.lazy(() => IntegrationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.LevelUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => LevelCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LevelCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LevelUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LevelUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LevelCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LevelWhereUniqueInputSchema),z.lazy(() => LevelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LevelUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LevelUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LevelUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => LevelUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LevelScalarWhereInputSchema),z.lazy(() => LevelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ListUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListCreateWithoutWorkspaceInputSchema),z.lazy(() => ListCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ListCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ListUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListWhereUniqueInputSchema),z.lazy(() => ListWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ListUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ListUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListScalarWhereInputSchema),z.lazy(() => ListScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.LogUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => LogCreateWithoutWorkspaceInputSchema),z.lazy(() => LogCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => LogCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LogUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LogUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LogWhereUniqueInputSchema),z.lazy(() => LogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LogUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => LogUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LogUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => LogUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LogScalarWhereInputSchema),z.lazy(() => LogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => MemberCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutWorkspaceInputSchema),z.lazy(() => TagCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TagCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserInWorkspaceCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),z.lazy(() => UserInWorkspaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserInWorkspaceScalarWhereInputSchema),z.lazy(() => UserInWorkspaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWorkspaceInputSchema),z.lazy(() => UserCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => UserCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => WorkflowCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WorkflowCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WorkflowWhereUniqueInputSchema),z.lazy(() => WorkflowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WorkflowUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WorkflowScalarWhereInputSchema),z.lazy(() => WorkflowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutWorkspaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutWorkspaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyWorkspaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutWorkspaceInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutWorkspaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutWorkspaceInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutWorkspaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumSOURCEFilterSchema: z.ZodType<Prisma.NestedEnumSOURCEFilter> = z.object({
  equals: z.lazy(() => SOURCESchema).optional(),
  in: z.lazy(() => SOURCESchema).array().optional(),
  notIn: z.lazy(() => SOURCESchema).array().optional(),
  not: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => NestedEnumSOURCEFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumSOURCEWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSOURCEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SOURCESchema).optional(),
  in: z.lazy(() => SOURCESchema).array().optional(),
  notIn: z.lazy(() => SOURCESchema).array().optional(),
  not: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => NestedEnumSOURCEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSOURCEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSOURCEFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedEnumTYPEFilterSchema: z.ZodType<Prisma.NestedEnumTYPEFilter> = z.object({
  equals: z.lazy(() => TYPESchema).optional(),
  in: z.lazy(() => TYPESchema).array().optional(),
  notIn: z.lazy(() => TYPESchema).array().optional(),
  not: z.union([ z.lazy(() => TYPESchema),z.lazy(() => NestedEnumTYPEFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRECORDFilterSchema: z.ZodType<Prisma.NestedEnumRECORDFilter> = z.object({
  equals: z.lazy(() => RECORDSchema).optional(),
  in: z.lazy(() => RECORDSchema).array().optional(),
  notIn: z.lazy(() => RECORDSchema).array().optional(),
  not: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => NestedEnumRECORDFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTYPEWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTYPEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TYPESchema).optional(),
  in: z.lazy(() => TYPESchema).array().optional(),
  notIn: z.lazy(() => TYPESchema).array().optional(),
  not: z.union([ z.lazy(() => TYPESchema),z.lazy(() => NestedEnumTYPEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTYPEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTYPEFilterSchema).optional()
}).strict();

export const NestedEnumRECORDWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRECORDWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RECORDSchema).optional(),
  in: z.lazy(() => RECORDSchema).array().optional(),
  notIn: z.lazy(() => RECORDSchema).array().optional(),
  not: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => NestedEnumRECORDWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRECORDFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRECORDFilterSchema).optional()
}).strict();

export const NestedEnumREASONFilterSchema: z.ZodType<Prisma.NestedEnumREASONFilter> = z.object({
  equals: z.lazy(() => REASONSchema).optional(),
  in: z.lazy(() => REASONSchema).array().optional(),
  notIn: z.lazy(() => REASONSchema).array().optional(),
  not: z.union([ z.lazy(() => REASONSchema),z.lazy(() => NestedEnumREASONFilterSchema) ]).optional(),
}).strict();

export const NestedEnumSTATEFilterSchema: z.ZodType<Prisma.NestedEnumSTATEFilter> = z.object({
  equals: z.lazy(() => STATESchema).optional(),
  in: z.lazy(() => STATESchema).array().optional(),
  notIn: z.lazy(() => STATESchema).array().optional(),
  not: z.union([ z.lazy(() => STATESchema),z.lazy(() => NestedEnumSTATEFilterSchema) ]).optional(),
}).strict();

export const NestedEnumREASONWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumREASONWithAggregatesFilter> = z.object({
  equals: z.lazy(() => REASONSchema).optional(),
  in: z.lazy(() => REASONSchema).array().optional(),
  notIn: z.lazy(() => REASONSchema).array().optional(),
  not: z.union([ z.lazy(() => REASONSchema),z.lazy(() => NestedEnumREASONWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumREASONFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumREASONFilterSchema).optional()
}).strict();

export const NestedEnumSTATEWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSTATEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => STATESchema).optional(),
  in: z.lazy(() => STATESchema).array().optional(),
  notIn: z.lazy(() => STATESchema).array().optional(),
  not: z.union([ z.lazy(() => STATESchema),z.lazy(() => NestedEnumSTATEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSTATEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSTATEFilterSchema).optional()
}).strict();

export const NestedEnumSTATUSNullableFilterSchema: z.ZodType<Prisma.NestedEnumSTATUSNullableFilter> = z.object({
  equals: z.lazy(() => STATUSSchema).optional().nullable(),
  in: z.lazy(() => STATUSSchema).array().optional().nullable(),
  notIn: z.lazy(() => STATUSSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NestedEnumSTATUSNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumSTATUSNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSTATUSNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => STATUSSchema).optional().nullable(),
  in: z.lazy(() => STATUSSchema).array().optional().nullable(),
  notIn: z.lazy(() => STATUSSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NestedEnumSTATUSNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSTATUSNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSTATUSNullableFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedEnumRUN_STATUSFilterSchema: z.ZodType<Prisma.NestedEnumRUN_STATUSFilter> = z.object({
  equals: z.lazy(() => RUN_STATUSSchema).optional(),
  in: z.lazy(() => RUN_STATUSSchema).array().optional(),
  notIn: z.lazy(() => RUN_STATUSSchema).array().optional(),
  not: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => NestedEnumRUN_STATUSFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRUN_STATUSWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRUN_STATUSWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RUN_STATUSSchema).optional(),
  in: z.lazy(() => RUN_STATUSSchema).array().optional(),
  notIn: z.lazy(() => RUN_STATUSSchema).array().optional(),
  not: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => NestedEnumRUN_STATUSWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRUN_STATUSFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRUN_STATUSFilterSchema).optional()
}).strict();

export const NestedEnumROLEFilterSchema: z.ZodType<Prisma.NestedEnumROLEFilter> = z.object({
  equals: z.lazy(() => ROLESchema).optional(),
  in: z.lazy(() => ROLESchema).array().optional(),
  notIn: z.lazy(() => ROLESchema).array().optional(),
  not: z.union([ z.lazy(() => ROLESchema),z.lazy(() => NestedEnumROLEFilterSchema) ]).optional(),
}).strict();

export const NestedEnumROLEWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumROLEWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ROLESchema).optional(),
  in: z.lazy(() => ROLESchema).array().optional(),
  notIn: z.lazy(() => ROLESchema).array().optional(),
  not: z.union([ z.lazy(() => ROLESchema),z.lazy(() => NestedEnumROLEWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumROLEFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumROLEFilterSchema).optional()
}).strict();

export const NestedEnumPLANNullableFilterSchema: z.ZodType<Prisma.NestedEnumPLANNullableFilter> = z.object({
  equals: z.lazy(() => PLANSchema).optional().nullable(),
  in: z.lazy(() => PLANSchema).array().optional().nullable(),
  notIn: z.lazy(() => PLANSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NestedEnumPLANNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumPLANNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPLANNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PLANSchema).optional().nullable(),
  in: z.lazy(() => PLANSchema).array().optional().nullable(),
  notIn: z.lazy(() => PLANSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NestedEnumPLANNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPLANNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPLANNullableFilterSchema).optional()
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutUsersInputSchema),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const ActivityTypeCreateWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeCreateWithoutActivityInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutActivityTypesInputSchema)
}).strict();

export const ActivityTypeUncheckedCreateWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedCreateWithoutActivityInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityTypeCreateOrConnectWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeCreateOrConnectWithoutActivityInput> = z.object({
  where: z.lazy(() => ActivityTypeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutActivityInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutActivityInputSchema) ]),
}).strict();

export const ChannelCreateWithoutActivityInputSchema: z.ZodType<Prisma.ChannelCreateWithoutActivityInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutChannelsInputSchema)
}).strict();

export const ChannelUncheckedCreateWithoutActivityInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateWithoutActivityInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChannelCreateOrConnectWithoutActivityInputSchema: z.ZodType<Prisma.ChannelCreateOrConnectWithoutActivityInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChannelCreateWithoutActivityInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutActivityInputSchema) ]),
}).strict();

export const EventCreateWithoutActivitiesInputSchema: z.ZodType<Prisma.EventCreateWithoutActivitiesInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutActivitiesInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutActivitiesInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventCreateOrConnectWithoutActivitiesInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutActivitiesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutActivitiesInputSchema),z.lazy(() => EventUncheckedCreateWithoutActivitiesInputSchema) ]),
}).strict();

export const MemberCreateWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberCreateWithoutActivitiesInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  level: z.lazy(() => LevelCreateNestedOneWithoutMemberInputSchema).optional(),
  company: z.lazy(() => CompanyCreateNestedOneWithoutMemberInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutMembersInputSchema),
  logs: z.lazy(() => LogCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutActivitiesInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberCreateOrConnectWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutActivitiesInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutActivitiesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutActivitiesInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutActivitiesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutActivitiesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutActivitiesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivitiesInputSchema) ]),
}).strict();

export const ActivityTypeUpsertWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeUpsertWithoutActivityInput> = z.object({
  update: z.union([ z.lazy(() => ActivityTypeUpdateWithoutActivityInputSchema),z.lazy(() => ActivityTypeUncheckedUpdateWithoutActivityInputSchema) ]),
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutActivityInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutActivityInputSchema) ]),
  where: z.lazy(() => ActivityTypeWhereInputSchema).optional()
}).strict();

export const ActivityTypeUpdateToOneWithWhereWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeUpdateToOneWithWhereWithoutActivityInput> = z.object({
  where: z.lazy(() => ActivityTypeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ActivityTypeUpdateWithoutActivityInputSchema),z.lazy(() => ActivityTypeUncheckedUpdateWithoutActivityInputSchema) ]),
}).strict();

export const ActivityTypeUpdateWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeUpdateWithoutActivityInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutActivityTypesNestedInputSchema).optional()
}).strict();

export const ActivityTypeUncheckedUpdateWithoutActivityInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedUpdateWithoutActivityInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChannelUpsertWithoutActivityInputSchema: z.ZodType<Prisma.ChannelUpsertWithoutActivityInput> = z.object({
  update: z.union([ z.lazy(() => ChannelUpdateWithoutActivityInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutActivityInputSchema) ]),
  create: z.union([ z.lazy(() => ChannelCreateWithoutActivityInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutActivityInputSchema) ]),
  where: z.lazy(() => ChannelWhereInputSchema).optional()
}).strict();

export const ChannelUpdateToOneWithWhereWithoutActivityInputSchema: z.ZodType<Prisma.ChannelUpdateToOneWithWhereWithoutActivityInput> = z.object({
  where: z.lazy(() => ChannelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ChannelUpdateWithoutActivityInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutActivityInputSchema) ]),
}).strict();

export const ChannelUpdateWithoutActivityInputSchema: z.ZodType<Prisma.ChannelUpdateWithoutActivityInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutChannelsNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateWithoutActivityInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateWithoutActivityInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpsertWithoutActivitiesInputSchema: z.ZodType<Prisma.EventUpsertWithoutActivitiesInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutActivitiesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActivitiesInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutActivitiesInputSchema),z.lazy(() => EventUncheckedCreateWithoutActivitiesInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutActivitiesInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutActivitiesInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutActivitiesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActivitiesInputSchema) ]),
}).strict();

export const EventUpdateWithoutActivitiesInputSchema: z.ZodType<Prisma.EventUpdateWithoutActivitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutActivitiesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutActivitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpsertWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberUpsertWithoutActivitiesInput> = z.object({
  update: z.union([ z.lazy(() => MemberUpdateWithoutActivitiesInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutActivitiesInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutActivitiesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutActivitiesInputSchema) ]),
  where: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const MemberUpdateToOneWithWhereWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberUpdateToOneWithWhereWithoutActivitiesInput> = z.object({
  where: z.lazy(() => MemberWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MemberUpdateWithoutActivitiesInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutActivitiesInputSchema) ]),
}).strict();

export const MemberUpdateWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberUpdateWithoutActivitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.lazy(() => LevelUpdateOneWithoutMemberNestedInputSchema).optional(),
  company: z.lazy(() => CompanyUpdateOneWithoutMemberNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutActivitiesInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutActivitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const WorkspaceUpsertWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutActivitiesInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutActivitiesInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivitiesInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutActivitiesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutActivitiesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutActivitiesInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutActivitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutActivitiesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutActivitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutActivityTypesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutActivityTypesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutActivityTypesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivityTypesInputSchema) ]),
}).strict();

export const ActivityCreateWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityCreateWithoutActivityTypeInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  channel: z.lazy(() => ChannelCreateNestedOneWithoutActivityInputSchema).optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutActivitiesInputSchema).optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutActivitiesInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutActivitiesInputSchema)
}).strict();

export const ActivityUncheckedCreateWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateWithoutActivityTypeInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityCreateOrConnectWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityCreateOrConnectWithoutActivityTypeInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema) ]),
}).strict();

export const ActivityCreateManyActivityTypeInputEnvelopeSchema: z.ZodType<Prisma.ActivityCreateManyActivityTypeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ActivityCreateManyActivityTypeInputSchema),z.lazy(() => ActivityCreateManyActivityTypeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkspaceUpsertWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutActivityTypesInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutActivityTypesInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutActivityTypesInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutActivityTypesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutActivityTypesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutActivityTypesInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutActivityTypesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutActivityTypesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutActivityTypesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const ActivityUpsertWithWhereUniqueWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUpsertWithWhereUniqueWithoutActivityTypeInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ActivityUpdateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutActivityTypeInputSchema) ]),
  create: z.union([ z.lazy(() => ActivityCreateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutActivityTypeInputSchema) ]),
}).strict();

export const ActivityUpdateWithWhereUniqueWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUpdateWithWhereUniqueWithoutActivityTypeInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateWithoutActivityTypeInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutActivityTypeInputSchema) ]),
}).strict();

export const ActivityUpdateManyWithWhereWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithWhereWithoutActivityTypeInput> = z.object({
  where: z.lazy(() => ActivityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateManyMutationInputSchema),z.lazy(() => ActivityUncheckedUpdateManyWithoutActivityTypeInputSchema) ]),
}).strict();

export const ActivityScalarWhereInputSchema: z.ZodType<Prisma.ActivityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityScalarWhereInputSchema),z.lazy(() => ActivityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activityTypeKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  replyTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reactTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inviteTo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  channelId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WorkspaceCreateWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutApiKeysInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutApiKeysInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutApiKeysInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutApiKeysInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutApiKeysInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutApiKeysInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutApiKeysInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutApiKeysInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutApiKeysInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutApiKeysInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutApiKeysInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutApiKeysInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutApiKeysInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutChannelsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutChannelsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutChannelsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutChannelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutChannelsInputSchema) ]),
}).strict();

export const ActivityCreateWithoutChannelInputSchema: z.ZodType<Prisma.ActivityCreateWithoutChannelInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activityType: z.lazy(() => ActivityTypeCreateNestedOneWithoutActivityInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutActivitiesInputSchema).optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutActivitiesInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutActivitiesInputSchema)
}).strict();

export const ActivityUncheckedCreateWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateWithoutChannelInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityCreateOrConnectWithoutChannelInputSchema: z.ZodType<Prisma.ActivityCreateOrConnectWithoutChannelInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActivityCreateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema) ]),
}).strict();

export const ActivityCreateManyChannelInputEnvelopeSchema: z.ZodType<Prisma.ActivityCreateManyChannelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ActivityCreateManyChannelInputSchema),z.lazy(() => ActivityCreateManyChannelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkspaceUpsertWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutChannelsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutChannelsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutChannelsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutChannelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutChannelsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutChannelsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutChannelsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutChannelsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutChannelsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutChannelsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutChannelsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const ActivityUpsertWithWhereUniqueWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUpsertWithWhereUniqueWithoutChannelInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ActivityUpdateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutChannelInputSchema) ]),
  create: z.union([ z.lazy(() => ActivityCreateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutChannelInputSchema) ]),
}).strict();

export const ActivityUpdateWithWhereUniqueWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUpdateWithWhereUniqueWithoutChannelInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateWithoutChannelInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutChannelInputSchema) ]),
}).strict();

export const ActivityUpdateManyWithWhereWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithWhereWithoutChannelInput> = z.object({
  where: z.lazy(() => ActivityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateManyMutationInputSchema),z.lazy(() => ActivityUncheckedUpdateManyWithoutChannelInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutCompaniesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutCompaniesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutCompaniesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCompaniesInputSchema) ]),
}).strict();

export const MemberCreateWithoutCompanyInputSchema: z.ZodType<Prisma.MemberCreateWithoutCompanyInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  level: z.lazy(() => LevelCreateNestedOneWithoutMemberInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutMembersInputSchema),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutCompanyInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberCreateOrConnectWithoutCompanyInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutCompanyInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema) ]),
}).strict();

export const MemberCreateManyCompanyInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyCompanyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyCompanyInputSchema),z.lazy(() => MemberCreateManyCompanyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TagCreateWithoutCompanyInputSchema: z.ZodType<Prisma.TagCreateWithoutCompanyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutTagsInputSchema),
  Member: z.lazy(() => MemberCreateNestedOneWithoutTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutCompanyInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutCompanyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  memberId: z.string().optional().nullable()
}).strict();

export const TagCreateOrConnectWithoutCompanyInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutCompanyInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema) ]),
}).strict();

export const TagCreateManyCompanyInputEnvelopeSchema: z.ZodType<Prisma.TagCreateManyCompanyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCreateManyCompanyInputSchema),z.lazy(() => TagCreateManyCompanyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkspaceUpsertWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutCompaniesInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutCompaniesInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCompaniesInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutCompaniesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutCompaniesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutCompaniesInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutCompaniesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutCompaniesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutCompaniesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const MemberUpsertWithWhereUniqueWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutCompanyInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutCompanyInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedCreateWithoutCompanyInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutCompanyInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutCompanyInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutCompanyInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutCompanyInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutCompanyInputSchema) ]),
}).strict();

export const MemberScalarWhereInputSchema: z.ZodType<Prisma.MemberScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  primaryEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emails: z.lazy(() => StringNullableListFilterSchema).optional(),
  phones: z.lazy(() => StringNullableListFilterSchema).optional(),
  jobTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  linkedinUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  levelNumber: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  pulse: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstActivity: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastActivity: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isStaff: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  customFields: z.lazy(() => JsonFilterSchema).optional(),
  atRiskMember: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  potentialAmbassador: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TagUpsertWithWhereUniqueWithoutCompanyInputSchema: z.ZodType<Prisma.TagUpsertWithWhereUniqueWithoutCompanyInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagUpdateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedUpdateWithoutCompanyInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedCreateWithoutCompanyInputSchema) ]),
}).strict();

export const TagUpdateWithWhereUniqueWithoutCompanyInputSchema: z.ZodType<Prisma.TagUpdateWithWhereUniqueWithoutCompanyInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagUpdateWithoutCompanyInputSchema),z.lazy(() => TagUncheckedUpdateWithoutCompanyInputSchema) ]),
}).strict();

export const TagUpdateManyWithWhereWithoutCompanyInputSchema: z.ZodType<Prisma.TagUpdateManyWithWhereWithoutCompanyInput> = z.object({
  where: z.lazy(() => TagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagUpdateManyMutationInputSchema),z.lazy(() => TagUncheckedUpdateManyWithoutCompanyInputSchema) ]),
}).strict();

export const TagScalarWhereInputSchema: z.ZodType<Prisma.TagScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const WorkspaceCreateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutCustomFieldsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutCustomFieldsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutCustomFieldsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCustomFieldsInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutCustomFieldsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutCustomFieldsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutCustomFieldsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutCustomFieldsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutCustomFieldsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutCustomFieldsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutCustomFieldsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutCustomFieldsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutDuplicatesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutDuplicatesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutDuplicatesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutDuplicatesInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutDuplicatesInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutDuplicatesInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutDuplicatesInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutDuplicatesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutDuplicatesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutDuplicatesInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutDuplicatesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutDuplicatesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutDuplicatesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutEventsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutEventsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const ActivityCreateWithoutEventInputSchema: z.ZodType<Prisma.ActivityCreateWithoutEventInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activityType: z.lazy(() => ActivityTypeCreateNestedOneWithoutActivityInputSchema),
  channel: z.lazy(() => ChannelCreateNestedOneWithoutActivityInputSchema).optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutActivitiesInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutActivitiesInputSchema)
}).strict();

export const ActivityUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.ActivityCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActivityCreateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const ActivityCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.ActivityCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ActivityCreateManyEventInputSchema),z.lazy(() => ActivityCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkspaceUpsertWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutEventsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutEventsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutEventsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const ActivityUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.ActivityUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ActivityUpdateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => ActivityCreateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const ActivityUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.ActivityUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateWithoutEventInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const ActivityUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => ActivityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateManyMutationInputSchema),z.lazy(() => ActivityUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutIntegrationsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutIntegrationsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutIntegrationsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutIntegrationsInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutIntegrationsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutIntegrationsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutIntegrationsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutIntegrationsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutIntegrationsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutIntegrationsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutIntegrationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutIntegrationsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutIntegrationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutInvitationsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutInvitationsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutLevelsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutLevelsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutLevelsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLevelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLevelsInputSchema) ]),
}).strict();

export const MemberCreateWithoutLevelInputSchema: z.ZodType<Prisma.MemberCreateWithoutLevelInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  company: z.lazy(() => CompanyCreateNestedOneWithoutMemberInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutMembersInputSchema),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateWithoutLevelInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutLevelInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberCreateOrConnectWithoutLevelInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutLevelInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema) ]),
}).strict();

export const MemberCreateManyLevelInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyLevelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyLevelInputSchema),z.lazy(() => MemberCreateManyLevelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkspaceUpsertWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutLevelsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutLevelsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutLevelsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLevelsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLevelsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutLevelsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutLevelsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutLevelsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutLevelsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutLevelsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutLevelsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const MemberUpsertWithWhereUniqueWithoutLevelInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutLevelInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutLevelInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLevelInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutLevelInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutLevelInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutLevelInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutLevelInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutLevelInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutLevelInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutLevelInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutListsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutListsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutListsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutListsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutListsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutListsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutListsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutListsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutListsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutListsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutListsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutListsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const MemberCreateWithoutLogsInputSchema: z.ZodType<Prisma.MemberCreateWithoutLogsInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  level: z.lazy(() => LevelCreateNestedOneWithoutMemberInputSchema).optional(),
  company: z.lazy(() => CompanyCreateNestedOneWithoutMemberInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutMembersInputSchema),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateWithoutLogsInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutLogsInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberCreateOrConnectWithoutLogsInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutLogsInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutLogsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLogsInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutLogsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutLogsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutLogsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLogsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLogsInputSchema) ]),
}).strict();

export const MemberUpsertWithoutLogsInputSchema: z.ZodType<Prisma.MemberUpsertWithoutLogsInput> = z.object({
  update: z.union([ z.lazy(() => MemberUpdateWithoutLogsInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutLogsInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutLogsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutLogsInputSchema) ]),
  where: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const MemberUpdateToOneWithWhereWithoutLogsInputSchema: z.ZodType<Prisma.MemberUpdateToOneWithWhereWithoutLogsInput> = z.object({
  where: z.lazy(() => MemberWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MemberUpdateWithoutLogsInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutLogsInputSchema) ]),
}).strict();

export const MemberUpdateWithoutLogsInputSchema: z.ZodType<Prisma.MemberUpdateWithoutLogsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.lazy(() => LevelUpdateOneWithoutMemberNestedInputSchema).optional(),
  company: z.lazy(() => CompanyUpdateOneWithoutMemberNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutLogsInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutLogsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const WorkspaceUpsertWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutLogsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutLogsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutLogsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutLogsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutLogsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutLogsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutLogsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutLogsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutLogsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutLogsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutLogsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const LevelCreateWithoutMemberInputSchema: z.ZodType<Prisma.LevelCreateWithoutMemberInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutLevelsInputSchema)
}).strict();

export const LevelUncheckedCreateWithoutMemberInputSchema: z.ZodType<Prisma.LevelUncheckedCreateWithoutMemberInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LevelCreateOrConnectWithoutMemberInputSchema: z.ZodType<Prisma.LevelCreateOrConnectWithoutMemberInput> = z.object({
  where: z.lazy(() => LevelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LevelCreateWithoutMemberInputSchema),z.lazy(() => LevelUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const CompanyCreateWithoutMemberInputSchema: z.ZodType<Prisma.CompanyCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutCompaniesInputSchema),
  Tag: z.lazy(() => TagCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyUncheckedCreateWithoutMemberInputSchema: z.ZodType<Prisma.CompanyUncheckedCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Tag: z.lazy(() => TagUncheckedCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyCreateOrConnectWithoutMemberInputSchema: z.ZodType<Prisma.CompanyCreateOrConnectWithoutMemberInput> = z.object({
  where: z.lazy(() => CompanyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompanyCreateWithoutMemberInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutMembersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutMembersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const ActivityCreateWithoutMemberInputSchema: z.ZodType<Prisma.ActivityCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activityType: z.lazy(() => ActivityTypeCreateNestedOneWithoutActivityInputSchema),
  channel: z.lazy(() => ChannelCreateNestedOneWithoutActivityInputSchema).optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutActivitiesInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutActivitiesInputSchema)
}).strict();

export const ActivityUncheckedCreateWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityCreateOrConnectWithoutMemberInputSchema: z.ZodType<Prisma.ActivityCreateOrConnectWithoutMemberInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActivityCreateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const ActivityCreateManyMemberInputEnvelopeSchema: z.ZodType<Prisma.ActivityCreateManyMemberInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ActivityCreateManyMemberInputSchema),z.lazy(() => ActivityCreateManyMemberInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LogCreateWithoutMemberInputSchema: z.ZodType<Prisma.LogCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutLogsInputSchema)
}).strict();

export const LogUncheckedCreateWithoutMemberInputSchema: z.ZodType<Prisma.LogUncheckedCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LogCreateOrConnectWithoutMemberInputSchema: z.ZodType<Prisma.LogCreateOrConnectWithoutMemberInput> = z.object({
  where: z.lazy(() => LogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LogCreateWithoutMemberInputSchema),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const LogCreateManyMemberInputEnvelopeSchema: z.ZodType<Prisma.LogCreateManyMemberInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LogCreateManyMemberInputSchema),z.lazy(() => LogCreateManyMemberInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProfileCreateWithoutMemberInputSchema: z.ZodType<Prisma.ProfileCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutProfileInputSchema)
}).strict();

export const ProfileUncheckedCreateWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileCreateOrConnectWithoutMemberInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutMemberInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const ProfileCreateManyMemberInputEnvelopeSchema: z.ZodType<Prisma.ProfileCreateManyMemberInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfileCreateManyMemberInputSchema),z.lazy(() => ProfileCreateManyMemberInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TagCreateWithoutMemberInputSchema: z.ZodType<Prisma.TagCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutTagsInputSchema),
  Company: z.lazy(() => CompanyCreateNestedOneWithoutTagInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutMemberInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.string().optional().nullable()
}).strict();

export const TagCreateOrConnectWithoutMemberInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutMemberInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutMemberInputSchema),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const TagCreateManyMemberInputEnvelopeSchema: z.ZodType<Prisma.TagCreateManyMemberInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCreateManyMemberInputSchema),z.lazy(() => TagCreateManyMemberInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LevelUpsertWithoutMemberInputSchema: z.ZodType<Prisma.LevelUpsertWithoutMemberInput> = z.object({
  update: z.union([ z.lazy(() => LevelUpdateWithoutMemberInputSchema),z.lazy(() => LevelUncheckedUpdateWithoutMemberInputSchema) ]),
  create: z.union([ z.lazy(() => LevelCreateWithoutMemberInputSchema),z.lazy(() => LevelUncheckedCreateWithoutMemberInputSchema) ]),
  where: z.lazy(() => LevelWhereInputSchema).optional()
}).strict();

export const LevelUpdateToOneWithWhereWithoutMemberInputSchema: z.ZodType<Prisma.LevelUpdateToOneWithWhereWithoutMemberInput> = z.object({
  where: z.lazy(() => LevelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LevelUpdateWithoutMemberInputSchema),z.lazy(() => LevelUncheckedUpdateWithoutMemberInputSchema) ]),
}).strict();

export const LevelUpdateWithoutMemberInputSchema: z.ZodType<Prisma.LevelUpdateWithoutMemberInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutLevelsNestedInputSchema).optional()
}).strict();

export const LevelUncheckedUpdateWithoutMemberInputSchema: z.ZodType<Prisma.LevelUncheckedUpdateWithoutMemberInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CompanyUpsertWithoutMemberInputSchema: z.ZodType<Prisma.CompanyUpsertWithoutMemberInput> = z.object({
  update: z.union([ z.lazy(() => CompanyUpdateWithoutMemberInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutMemberInputSchema) ]),
  create: z.union([ z.lazy(() => CompanyCreateWithoutMemberInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutMemberInputSchema) ]),
  where: z.lazy(() => CompanyWhereInputSchema).optional()
}).strict();

export const CompanyUpdateToOneWithWhereWithoutMemberInputSchema: z.ZodType<Prisma.CompanyUpdateToOneWithWhereWithoutMemberInput> = z.object({
  where: z.lazy(() => CompanyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompanyUpdateWithoutMemberInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutMemberInputSchema) ]),
}).strict();

export const CompanyUpdateWithoutMemberInputSchema: z.ZodType<Prisma.CompanyUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutCompaniesNestedInputSchema).optional(),
  Tag: z.lazy(() => TagUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const CompanyUncheckedUpdateWithoutMemberInputSchema: z.ZodType<Prisma.CompanyUncheckedUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Tag: z.lazy(() => TagUncheckedUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const WorkspaceUpsertWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutMembersInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutMembersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutMembersInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const ActivityUpsertWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUpsertWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ActivityUpdateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutMemberInputSchema) ]),
  create: z.union([ z.lazy(() => ActivityCreateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const ActivityUpdateWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUpdateWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateWithoutMemberInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutMemberInputSchema) ]),
}).strict();

export const ActivityUpdateManyWithWhereWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithWhereWithoutMemberInput> = z.object({
  where: z.lazy(() => ActivityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateManyMutationInputSchema),z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberInputSchema) ]),
}).strict();

export const LogUpsertWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.LogUpsertWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => LogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LogUpdateWithoutMemberInputSchema),z.lazy(() => LogUncheckedUpdateWithoutMemberInputSchema) ]),
  create: z.union([ z.lazy(() => LogCreateWithoutMemberInputSchema),z.lazy(() => LogUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const LogUpdateWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.LogUpdateWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => LogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LogUpdateWithoutMemberInputSchema),z.lazy(() => LogUncheckedUpdateWithoutMemberInputSchema) ]),
}).strict();

export const LogUpdateManyWithWhereWithoutMemberInputSchema: z.ZodType<Prisma.LogUpdateManyWithWhereWithoutMemberInput> = z.object({
  where: z.lazy(() => LogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LogUpdateManyMutationInputSchema),z.lazy(() => LogUncheckedUpdateManyWithoutMemberInputSchema) ]),
}).strict();

export const LogScalarWhereInputSchema: z.ZodType<Prisma.LogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LogScalarWhereInputSchema),z.lazy(() => LogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogScalarWhereInputSchema),z.lazy(() => LogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  pulse: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProfileUpsertWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUpsertWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfileUpdateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutMemberInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const ProfileUpdateWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUpdateWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutMemberInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutMemberInputSchema) ]),
}).strict();

export const ProfileUpdateManyWithWhereWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithWhereWithoutMemberInput> = z.object({
  where: z.lazy(() => ProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateManyMutationInputSchema),z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberInputSchema) ]),
}).strict();

export const ProfileScalarWhereInputSchema: z.ZodType<Prisma.ProfileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  attributes: z.lazy(() => JsonFilterSchema).optional(),
  memberId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TagUpsertWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.TagUpsertWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagUpdateWithoutMemberInputSchema),z.lazy(() => TagUncheckedUpdateWithoutMemberInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutMemberInputSchema),z.lazy(() => TagUncheckedCreateWithoutMemberInputSchema) ]),
}).strict();

export const TagUpdateWithWhereUniqueWithoutMemberInputSchema: z.ZodType<Prisma.TagUpdateWithWhereUniqueWithoutMemberInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagUpdateWithoutMemberInputSchema),z.lazy(() => TagUncheckedUpdateWithoutMemberInputSchema) ]),
}).strict();

export const TagUpdateManyWithWhereWithoutMemberInputSchema: z.ZodType<Prisma.TagUpdateManyWithWhereWithoutMemberInput> = z.object({
  where: z.lazy(() => TagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagUpdateManyMutationInputSchema),z.lazy(() => TagUncheckedUpdateManyWithoutMemberInputSchema) ]),
}).strict();

export const MemberCreateWithoutProfilesInputSchema: z.ZodType<Prisma.MemberCreateWithoutProfilesInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  level: z.lazy(() => LevelCreateNestedOneWithoutMemberInputSchema).optional(),
  company: z.lazy(() => CompanyCreateNestedOneWithoutMemberInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutMembersInputSchema),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateWithoutProfilesInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutProfilesInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberCreateOrConnectWithoutProfilesInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutProfilesInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutProfilesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutProfilesInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutProfileInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutProfileInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const MemberUpsertWithoutProfilesInputSchema: z.ZodType<Prisma.MemberUpsertWithoutProfilesInput> = z.object({
  update: z.union([ z.lazy(() => MemberUpdateWithoutProfilesInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutProfilesInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutProfilesInputSchema),z.lazy(() => MemberUncheckedCreateWithoutProfilesInputSchema) ]),
  where: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const MemberUpdateToOneWithWhereWithoutProfilesInputSchema: z.ZodType<Prisma.MemberUpdateToOneWithWhereWithoutProfilesInput> = z.object({
  where: z.lazy(() => MemberWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MemberUpdateWithoutProfilesInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutProfilesInputSchema) ]),
}).strict();

export const MemberUpdateWithoutProfilesInputSchema: z.ZodType<Prisma.MemberUpdateWithoutProfilesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.lazy(() => LevelUpdateOneWithoutMemberNestedInputSchema).optional(),
  company: z.lazy(() => CompanyUpdateOneWithoutMemberNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutProfilesInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutProfilesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const WorkspaceUpsertWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutProfileInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutProfileInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutProfileInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutProfileInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutProfileInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkflowCreateWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowCreateWithoutRunsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutWorkflowInputSchema),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutWorkflowsInputSchema)
}).strict();

export const WorkflowUncheckedCreateWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateWithoutRunsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  createdBy: z.string(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable()
}).strict();

export const WorkflowCreateOrConnectWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowCreateOrConnectWithoutRunsInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutRunsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutRunsInputSchema) ]),
}).strict();

export const WorkflowUpsertWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowUpsertWithoutRunsInput> = z.object({
  update: z.union([ z.lazy(() => WorkflowUpdateWithoutRunsInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutRunsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutRunsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutRunsInputSchema) ]),
  where: z.lazy(() => WorkflowWhereInputSchema).optional()
}).strict();

export const WorkflowUpdateToOneWithWhereWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowUpdateToOneWithWhereWithoutRunsInput> = z.object({
  where: z.lazy(() => WorkflowWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkflowUpdateWithoutRunsInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutRunsInputSchema) ]),
}).strict();

export const WorkflowUpdateWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowUpdateWithoutRunsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutWorkflowNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutWorkflowsNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateWithoutRunsInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateWithoutRunsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutUsersInputSchema),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutTagsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutTagsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutTagsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTagsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTagsInputSchema) ]),
}).strict();

export const CompanyCreateWithoutTagInputSchema: z.ZodType<Prisma.CompanyCreateWithoutTagInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutCompaniesInputSchema),
  Member: z.lazy(() => MemberCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyUncheckedCreateWithoutTagInputSchema: z.ZodType<Prisma.CompanyUncheckedCreateWithoutTagInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Member: z.lazy(() => MemberUncheckedCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyCreateOrConnectWithoutTagInputSchema: z.ZodType<Prisma.CompanyCreateOrConnectWithoutTagInput> = z.object({
  where: z.lazy(() => CompanyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompanyCreateWithoutTagInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutTagInputSchema) ]),
}).strict();

export const MemberCreateWithoutTagsInputSchema: z.ZodType<Prisma.MemberCreateWithoutTagsInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  level: z.lazy(() => LevelCreateNestedOneWithoutMemberInputSchema).optional(),
  company: z.lazy(() => CompanyCreateNestedOneWithoutMemberInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutMembersInputSchema),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateWithoutTagsInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutTagsInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberCreateOrConnectWithoutTagsInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutTagsInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutTagsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutTagsInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutTagsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutTagsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutTagsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTagsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTagsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutTagsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutTagsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutTagsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutTagsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const CompanyUpsertWithoutTagInputSchema: z.ZodType<Prisma.CompanyUpsertWithoutTagInput> = z.object({
  update: z.union([ z.lazy(() => CompanyUpdateWithoutTagInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutTagInputSchema) ]),
  create: z.union([ z.lazy(() => CompanyCreateWithoutTagInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutTagInputSchema) ]),
  where: z.lazy(() => CompanyWhereInputSchema).optional()
}).strict();

export const CompanyUpdateToOneWithWhereWithoutTagInputSchema: z.ZodType<Prisma.CompanyUpdateToOneWithWhereWithoutTagInput> = z.object({
  where: z.lazy(() => CompanyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompanyUpdateWithoutTagInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutTagInputSchema) ]),
}).strict();

export const CompanyUpdateWithoutTagInputSchema: z.ZodType<Prisma.CompanyUpdateWithoutTagInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutCompaniesNestedInputSchema).optional(),
  Member: z.lazy(() => MemberUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const CompanyUncheckedUpdateWithoutTagInputSchema: z.ZodType<Prisma.CompanyUncheckedUpdateWithoutTagInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Member: z.lazy(() => MemberUncheckedUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const MemberUpsertWithoutTagsInputSchema: z.ZodType<Prisma.MemberUpsertWithoutTagsInput> = z.object({
  update: z.union([ z.lazy(() => MemberUpdateWithoutTagsInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutTagsInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutTagsInputSchema),z.lazy(() => MemberUncheckedCreateWithoutTagsInputSchema) ]),
  where: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const MemberUpdateToOneWithWhereWithoutTagsInputSchema: z.ZodType<Prisma.MemberUpdateToOneWithWhereWithoutTagsInput> = z.object({
  where: z.lazy(() => MemberWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MemberUpdateWithoutTagsInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutTagsInputSchema) ]),
}).strict();

export const MemberUpdateWithoutTagsInputSchema: z.ZodType<Prisma.MemberUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.lazy(() => LevelUpdateOneWithoutMemberNestedInputSchema).optional(),
  company: z.lazy(() => CompanyUpdateOneWithoutMemberNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutTagsInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutTasksInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutTasksInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTasksInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const WorkspaceUpsertWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutTasksInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutTasksInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutTasksInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceCreateWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutUsersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUsersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserInWorkspaceCreateWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutUserInWorkspacesInputSchema)
}).strict();

export const UserInWorkspaceUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserInWorkspaceCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserInWorkspaceCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.UserInWorkspaceCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserInWorkspaceCreateManyUserInputSchema),z.lazy(() => UserInWorkspaceCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkflowCreateWithoutUserInputSchema: z.ZodType<Prisma.WorkflowCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable(),
  runs: z.lazy(() => RunCreateNestedManyWithoutWorkflowInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutWorkflowsInputSchema)
}).strict();

export const WorkflowUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable(),
  runs: z.lazy(() => RunUncheckedCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.WorkflowCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const WorkflowCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.WorkflowCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WorkflowCreateManyUserInputSchema),z.lazy(() => WorkflowCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkspaceUpsertWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutUsersInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUsersInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutUsersInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserInWorkspaceUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserInWorkspaceUpdateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserInWorkspaceUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserInWorkspaceUpdateWithoutUserInputSchema),z.lazy(() => UserInWorkspaceUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserInWorkspaceUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserInWorkspaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserInWorkspaceUpdateManyMutationInputSchema),z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserInWorkspaceScalarWhereInputSchema: z.ZodType<Prisma.UserInWorkspaceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserInWorkspaceScalarWhereInputSchema),z.lazy(() => UserInWorkspaceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserInWorkspaceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserInWorkspaceScalarWhereInputSchema),z.lazy(() => UserInWorkspaceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WorkflowUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WorkflowUpdateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const WorkflowUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WorkflowUpdateWithoutUserInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const WorkflowUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => WorkflowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WorkflowUpdateManyMutationInputSchema),z.lazy(() => WorkflowUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const WorkflowScalarWhereInputSchema: z.ZodType<Prisma.WorkflowScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WorkflowScalarWhereInputSchema),z.lazy(() => WorkflowScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkflowScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkflowScalarWhereInputSchema),z.lazy(() => WorkflowScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  edges: z.lazy(() => JsonNullableListFilterSchema).optional(),
  published: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alertOnSuccess: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  alertOnFailure: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  archivedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserCreateWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserCreateWithoutUserInWorkspaceInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutUsersInputSchema),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserInWorkspaceInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserInWorkspaceInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserInWorkspaceInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutUserInWorkspacesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutUserInWorkspacesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutUserInWorkspacesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUserInWorkspacesInputSchema) ]),
}).strict();

export const UserUpsertWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserInWorkspaceInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserInWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserInWorkspaceInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserInWorkspaceInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserInWorkspaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserInWorkspaceInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserInWorkspaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserInWorkspaceInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserInWorkspaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const WorkspaceUpsertWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutUserInWorkspacesInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutUserInWorkspacesInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutUserInWorkspacesInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutUserInWorkspacesInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutUserInWorkspacesInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutUserInWorkspacesInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutUserInWorkspacesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutUserInWorkspacesInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutUserInWorkspacesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  workflows: z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const RunCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.RunCreateWithoutWorkflowInput> = z.object({
  id: z.string().uuid().optional(),
  memberId: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => RUN_STATUSSchema).optional(),
  runNodes: z.union([ z.lazy(() => RunCreaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RunUncheckedCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUncheckedCreateWithoutWorkflowInput> = z.object({
  id: z.string().uuid().optional(),
  memberId: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => RUN_STATUSSchema).optional(),
  runNodes: z.union([ z.lazy(() => RunCreaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RunCreateOrConnectWithoutWorkflowInputSchema: z.ZodType<Prisma.RunCreateOrConnectWithoutWorkflowInput> = z.object({
  where: z.lazy(() => RunWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RunCreateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema) ]),
}).strict();

export const RunCreateManyWorkflowInputEnvelopeSchema: z.ZodType<Prisma.RunCreateManyWorkflowInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RunCreateManyWorkflowInputSchema),z.lazy(() => RunCreateManyWorkflowInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.UserCreateWithoutWorkflowInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  workspace: z.lazy(() => WorkspaceCreateNestedOneWithoutUsersInputSchema),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutWorkflowInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutWorkflowInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutWorkflowInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutWorkflowInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkflowInputSchema) ]),
}).strict();

export const WorkspaceCreateWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceCreateWithoutWorkflowsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceUncheckedCreateWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedCreateWithoutWorkflowsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  slug: z.string(),
  source: z.string().optional().nullable(),
  companySize: z.string().optional().nullable(),
  plan: z.lazy(() => PLANSchema).optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  priceId: z.string().optional().nullable(),
  trialEnd: z.coerce.date().optional().nullable(),
  isPastDue: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutWorkspaceInputSchema).optional()
}).strict();

export const WorkspaceCreateOrConnectWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceCreateOrConnectWithoutWorkflowsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutWorkflowsInputSchema) ]),
}).strict();

export const RunUpsertWithWhereUniqueWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUpsertWithWhereUniqueWithoutWorkflowInput> = z.object({
  where: z.lazy(() => RunWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RunUpdateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedUpdateWithoutWorkflowInputSchema) ]),
  create: z.union([ z.lazy(() => RunCreateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedCreateWithoutWorkflowInputSchema) ]),
}).strict();

export const RunUpdateWithWhereUniqueWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUpdateWithWhereUniqueWithoutWorkflowInput> = z.object({
  where: z.lazy(() => RunWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RunUpdateWithoutWorkflowInputSchema),z.lazy(() => RunUncheckedUpdateWithoutWorkflowInputSchema) ]),
}).strict();

export const RunUpdateManyWithWhereWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUpdateManyWithWhereWithoutWorkflowInput> = z.object({
  where: z.lazy(() => RunScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RunUpdateManyMutationInputSchema),z.lazy(() => RunUncheckedUpdateManyWithoutWorkflowInputSchema) ]),
}).strict();

export const RunScalarWhereInputSchema: z.ZodType<Prisma.RunScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RunScalarWhereInputSchema),z.lazy(() => RunScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RunScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RunScalarWhereInputSchema),z.lazy(() => RunScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  failedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumRUN_STATUSFilterSchema),z.lazy(() => RUN_STATUSSchema) ]).optional(),
  runNodes: z.lazy(() => JsonNullableListFilterSchema).optional(),
  credits: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserUpsertWithoutWorkflowInputSchema: z.ZodType<Prisma.UserUpsertWithoutWorkflowInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutWorkflowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWorkflowInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutWorkflowInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkflowInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutWorkflowInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutWorkflowInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutWorkflowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWorkflowInputSchema) ]),
}).strict();

export const UserUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.UserUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const WorkspaceUpsertWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceUpsertWithoutWorkflowsInput> = z.object({
  update: z.union([ z.lazy(() => WorkspaceUpdateWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutWorkflowsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkspaceCreateWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUncheckedCreateWithoutWorkflowsInputSchema) ]),
  where: z.lazy(() => WorkspaceWhereInputSchema).optional()
}).strict();

export const WorkspaceUpdateToOneWithWhereWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceUpdateToOneWithWhereWithoutWorkflowsInput> = z.object({
  where: z.lazy(() => WorkspaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkspaceUpdateWithoutWorkflowsInputSchema),z.lazy(() => WorkspaceUncheckedUpdateWithoutWorkflowsInputSchema) ]),
}).strict();

export const WorkspaceUpdateWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceUpdateWithoutWorkflowsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const WorkspaceUncheckedUpdateWithoutWorkflowsInputSchema: z.ZodType<Prisma.WorkspaceUncheckedUpdateWithoutWorkflowsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companySize: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PLANSchema),z.lazy(() => NullableEnumPLANFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  priceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialEnd: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isPastDue: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  activityTypes: z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  apiKeys: z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  channels: z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  companies: z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  customFields: z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  duplicates: z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  integrations: z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  levels: z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  lists: z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  userInWorkspaces: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional(),
  Profile: z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceNestedInputSchema).optional()
}).strict();

export const ActivityCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activityType: z.lazy(() => ActivityTypeCreateNestedOneWithoutActivityInputSchema),
  channel: z.lazy(() => ChannelCreateNestedOneWithoutActivityInputSchema).optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutActivitiesInputSchema).optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutActivitiesInputSchema)
}).strict();

export const ActivityUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.ActivityCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ActivityCreateManyWorkspaceInputSchema),z.lazy(() => ActivityCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ActivityTypeCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeCreateWithoutWorkspaceInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Activity: z.lazy(() => ActivityCreateNestedManyWithoutActivityTypeInputSchema).optional()
}).strict();

export const ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedCreateWithoutWorkspaceInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Activity: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutActivityTypeInputSchema).optional()
}).strict();

export const ActivityTypeCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityTypeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityTypeCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.ActivityTypeCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ActivityTypeCreateManyWorkspaceInputSchema),z.lazy(() => ActivityTypeCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ApiKeyCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  token: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ApiKeyUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  token: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ApiKeyCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ApiKeyCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.ApiKeyCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ApiKeyCreateManyWorkspaceInputSchema),z.lazy(() => ApiKeyCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChannelCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Activity: z.lazy(() => ActivityCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Activity: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutChannelInputSchema).optional()
}).strict();

export const ChannelCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ChannelCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.ChannelCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChannelCreateManyWorkspaceInputSchema),z.lazy(() => ChannelCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CompanyCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Member: z.lazy(() => MemberCreateNestedManyWithoutCompanyInputSchema).optional(),
  Tag: z.lazy(() => TagCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Member: z.lazy(() => MemberUncheckedCreateNestedManyWithoutCompanyInputSchema).optional(),
  Tag: z.lazy(() => TagUncheckedCreateNestedManyWithoutCompanyInputSchema).optional()
}).strict();

export const CompanyCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CompanyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const CompanyCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.CompanyCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CompanyCreateManyWorkspaceInputSchema),z.lazy(() => CompanyCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomFieldCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  label: z.string(),
  type: z.lazy(() => TYPESchema),
  options: z.union([ z.lazy(() => CustomFieldCreateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.lazy(() => RECORDSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomFieldUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  label: z.string(),
  type: z.lazy(() => TYPESchema),
  options: z.union([ z.lazy(() => CustomFieldCreateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.lazy(() => RECORDSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomFieldCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CustomFieldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const CustomFieldCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.CustomFieldCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomFieldCreateManyWorkspaceInputSchema),z.lazy(() => CustomFieldCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DuplicateCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  memberIds: z.union([ z.lazy(() => DuplicateCreatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.lazy(() => REASONSchema),
  state: z.lazy(() => STATESchema),
  totalPulse: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DuplicateUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  memberIds: z.union([ z.lazy(() => DuplicateCreatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.lazy(() => REASONSchema),
  state: z.lazy(() => STATESchema),
  totalPulse: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DuplicateCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => DuplicateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const DuplicateCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.DuplicateCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DuplicateCreateManyWorkspaceInputSchema),z.lazy(() => DuplicateCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const EventCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyWorkspaceInputSchema),z.lazy(() => EventCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const IntegrationCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  connectedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => STATUSSchema).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  triggerToken: z.string(),
  expiresAt: z.coerce.date(),
  runId: z.string().optional().nullable(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const IntegrationUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  connectedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => STATUSSchema).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  triggerToken: z.string(),
  expiresAt: z.coerce.date(),
  runId: z.string().optional().nullable(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const IntegrationCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => IntegrationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const IntegrationCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.IntegrationCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => IntegrationCreateManyWorkspaceInputSchema),z.lazy(() => IntegrationCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const InvitationCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyWorkspaceInputSchema),z.lazy(() => InvitationCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LevelCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelCreateWithoutWorkspaceInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Member: z.lazy(() => MemberCreateNestedManyWithoutLevelInputSchema).optional()
}).strict();

export const LevelUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUncheckedCreateWithoutWorkspaceInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Member: z.lazy(() => MemberUncheckedCreateNestedManyWithoutLevelInputSchema).optional()
}).strict();

export const LevelCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LevelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LevelCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const LevelCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.LevelCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LevelCreateManyWorkspaceInputSchema),z.lazy(() => LevelCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  emoji: z.string(),
  name: z.string(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ListUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  emoji: z.string(),
  name: z.string(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ListCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ListWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListCreateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ListCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.ListCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ListCreateManyWorkspaceInputSchema),z.lazy(() => ListCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LogCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutLogsInputSchema)
}).strict();

export const LogUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  memberId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LogCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LogCreateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const LogCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.LogCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LogCreateManyWorkspaceInputSchema),z.lazy(() => LogCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  level: z.lazy(() => LevelCreateNestedOneWithoutMemberInputSchema).optional(),
  company: z.lazy(() => CompanyCreateNestedOneWithoutMemberInputSchema).optional(),
  activities: z.lazy(() => ActivityCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  activities: z.lazy(() => ActivityUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutMemberInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutMemberInputSchema).optional()
}).strict();

export const MemberCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const MemberCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyWorkspaceInputSchema),z.lazy(() => MemberCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TagCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  Company: z.lazy(() => CompanyCreateNestedOneWithoutTagInputSchema).optional(),
  Member: z.lazy(() => MemberCreateNestedOneWithoutTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.string().optional().nullable(),
  memberId: z.string().optional().nullable()
}).strict();

export const TagCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const TagCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.TagCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCreateManyWorkspaceInputSchema),z.lazy(() => TagCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  assignee: z.string().optional().nullable(),
  isCompleted: z.boolean().optional(),
  memberId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  assignee: z.string().optional().nullable(),
  isCompleted: z.boolean().optional(),
  memberId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const TaskCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyWorkspaceInputSchema),z.lazy(() => TaskCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserInWorkspaceCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserInWorkspaceInputSchema)
}).strict();

export const UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserInWorkspaceCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserInWorkspaceCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.UserInWorkspaceCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserInWorkspaceCreateManyWorkspaceInputSchema),z.lazy(() => UserInWorkspaceCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserCreateWithoutWorkspaceInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyWorkspaceInputSchema),z.lazy(() => UserCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WorkflowCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable(),
  runs: z.lazy(() => RunCreateNestedManyWithoutWorkflowInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutWorkflowInputSchema)
}).strict();

export const WorkflowUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  createdBy: z.string(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable(),
  runs: z.lazy(() => RunUncheckedCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const WorkflowCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.WorkflowCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WorkflowCreateManyWorkspaceInputSchema),z.lazy(() => WorkflowCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProfileCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  member: z.lazy(() => MemberCreateNestedOneWithoutProfilesInputSchema)
}).strict();

export const ProfileUncheckedCreateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  memberId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileCreateOrConnectWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ProfileCreateManyWorkspaceInputEnvelopeSchema: z.ZodType<Prisma.ProfileCreateManyWorkspaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfileCreateManyWorkspaceInputSchema),z.lazy(() => ProfileCreateManyWorkspaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ActivityUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ActivityUpdateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => ActivityCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateWithoutWorkspaceInputSchema),z.lazy(() => ActivityUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ActivityUpdateManyMutationInputSchema),z.lazy(() => ActivityUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityTypeUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityTypeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ActivityTypeUpdateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => ActivityTypeCreateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityTypeUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityTypeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ActivityTypeUpdateWithoutWorkspaceInputSchema),z.lazy(() => ActivityTypeUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityTypeUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ActivityTypeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ActivityTypeUpdateManyMutationInputSchema),z.lazy(() => ActivityTypeUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityTypeScalarWhereInputSchema: z.ZodType<Prisma.ActivityTypeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ActivityTypeScalarWhereInputSchema),z.lazy(() => ActivityTypeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActivityTypeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActivityTypeScalarWhereInputSchema),z.lazy(() => ActivityTypeScalarWhereInputSchema).array() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  points: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  conditions: z.lazy(() => JsonNullableListFilterSchema).optional(),
  deletable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ApiKeyUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ApiKeyUpdateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => ApiKeyCreateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ApiKeyUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ApiKeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ApiKeyUpdateWithoutWorkspaceInputSchema),z.lazy(() => ApiKeyUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ApiKeyUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ApiKeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ApiKeyUpdateManyMutationInputSchema),z.lazy(() => ApiKeyUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const ApiKeyScalarWhereInputSchema: z.ZodType<Prisma.ApiKeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyScalarWhereInputSchema),z.lazy(() => ApiKeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ChannelUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChannelUpdateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => ChannelCreateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ChannelUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ChannelWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChannelUpdateWithoutWorkspaceInputSchema),z.lazy(() => ChannelUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ChannelUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ChannelScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChannelUpdateManyMutationInputSchema),z.lazy(() => ChannelUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const ChannelScalarWhereInputSchema: z.ZodType<Prisma.ChannelScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChannelScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChannelScalarWhereInputSchema),z.lazy(() => ChannelScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CompanyUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CompanyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CompanyUpdateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => CompanyCreateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const CompanyUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CompanyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CompanyUpdateWithoutWorkspaceInputSchema),z.lazy(() => CompanyUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const CompanyUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CompanyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CompanyUpdateManyMutationInputSchema),z.lazy(() => CompanyUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const CompanyScalarWhereInputSchema: z.ZodType<Prisma.CompanyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CompanyScalarWhereInputSchema),z.lazy(() => CompanyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompanyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompanyScalarWhereInputSchema),z.lazy(() => CompanyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  industry: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  domain: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  employees: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  foundedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  customFields: z.lazy(() => JsonNullableListFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomFieldUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CustomFieldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomFieldUpdateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const CustomFieldUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CustomFieldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomFieldUpdateWithoutWorkspaceInputSchema),z.lazy(() => CustomFieldUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const CustomFieldUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => CustomFieldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomFieldUpdateManyMutationInputSchema),z.lazy(() => CustomFieldUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const CustomFieldScalarWhereInputSchema: z.ZodType<Prisma.CustomFieldScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomFieldScalarWhereInputSchema),z.lazy(() => CustomFieldScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomFieldScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomFieldScalarWhereInputSchema),z.lazy(() => CustomFieldScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTYPEFilterSchema),z.lazy(() => TYPESchema) ]).optional(),
  options: z.lazy(() => JsonNullableListFilterSchema).optional(),
  record: z.union([ z.lazy(() => EnumRECORDFilterSchema),z.lazy(() => RECORDSchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DuplicateUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => DuplicateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DuplicateUpdateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => DuplicateCreateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const DuplicateUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => DuplicateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DuplicateUpdateWithoutWorkspaceInputSchema),z.lazy(() => DuplicateUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const DuplicateUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => DuplicateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DuplicateUpdateManyMutationInputSchema),z.lazy(() => DuplicateUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const DuplicateScalarWhereInputSchema: z.ZodType<Prisma.DuplicateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DuplicateScalarWhereInputSchema),z.lazy(() => DuplicateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DuplicateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DuplicateScalarWhereInputSchema),z.lazy(() => DuplicateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  memberIds: z.lazy(() => StringNullableListFilterSchema).optional(),
  reason: z.union([ z.lazy(() => EnumREASONFilterSchema),z.lazy(() => REASONSchema) ]).optional(),
  state: z.union([ z.lazy(() => EnumSTATEFilterSchema),z.lazy(() => STATESchema) ]).optional(),
  totalPulse: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutWorkspaceInputSchema),z.lazy(() => EventUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const EventScalarWhereInputSchema: z.ZodType<Prisma.EventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumSOURCEFilterSchema),z.lazy(() => SOURCESchema) ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const IntegrationUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => IntegrationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => IntegrationUpdateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => IntegrationCreateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const IntegrationUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => IntegrationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => IntegrationUpdateWithoutWorkspaceInputSchema),z.lazy(() => IntegrationUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const IntegrationUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => IntegrationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => IntegrationUpdateManyMutationInputSchema),z.lazy(() => IntegrationUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const IntegrationScalarWhereInputSchema: z.ZodType<Prisma.IntegrationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IntegrationScalarWhereInputSchema),z.lazy(() => IntegrationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IntegrationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IntegrationScalarWhereInputSchema),z.lazy(() => IntegrationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  externalId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  connectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumSTATUSNullableFilterSchema),z.lazy(() => STATUSSchema) ]).optional().nullable(),
  details: z.lazy(() => JsonFilterSchema).optional(),
  triggerToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  runId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutWorkspaceInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LevelUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LevelWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LevelUpdateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => LevelCreateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const LevelUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LevelWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LevelUpdateWithoutWorkspaceInputSchema),z.lazy(() => LevelUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const LevelUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LevelScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LevelUpdateManyMutationInputSchema),z.lazy(() => LevelUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const LevelScalarWhereInputSchema: z.ZodType<Prisma.LevelScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LevelScalarWhereInputSchema),z.lazy(() => LevelScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LevelScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LevelScalarWhereInputSchema),z.lazy(() => LevelScalarWhereInputSchema).array() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  from: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  to: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ListUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ListWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListUpdateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => ListCreateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ListUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ListWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListUpdateWithoutWorkspaceInputSchema),z.lazy(() => ListUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ListUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ListScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListUpdateManyMutationInputSchema),z.lazy(() => ListUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const ListScalarWhereInputSchema: z.ZodType<Prisma.ListScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListScalarWhereInputSchema),z.lazy(() => ListScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListScalarWhereInputSchema),z.lazy(() => ListScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emoji: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  groupFilters: z.lazy(() => JsonFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LogUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LogUpdateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => LogCreateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const LogUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LogUpdateWithoutWorkspaceInputSchema),z.lazy(() => LogUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const LogUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => LogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LogUpdateManyMutationInputSchema),z.lazy(() => LogUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutWorkspaceInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const TagUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagUpdateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const TagUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagUpdateWithoutWorkspaceInputSchema),z.lazy(() => TagUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const TagUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagUpdateManyMutationInputSchema),z.lazy(() => TagUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutWorkspaceInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const TaskScalarWhereInputSchema: z.ZodType<Prisma.TaskScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isCompleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  memberId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserInWorkspaceUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserInWorkspaceUpdateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => UserInWorkspaceCreateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserInWorkspaceUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserInWorkspaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserInWorkspaceUpdateWithoutWorkspaceInputSchema),z.lazy(() => UserInWorkspaceUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserInWorkspaceUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserInWorkspaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserInWorkspaceUpdateManyMutationInputSchema),z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutWorkspaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  onboarding: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  role: z.union([ z.lazy(() => EnumROLEFilterSchema),z.lazy(() => ROLESchema) ]).optional(),
  lastActivityAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  membersPreferences: z.lazy(() => JsonFilterSchema).optional(),
  companiesPreferences: z.lazy(() => JsonFilterSchema).optional(),
  workspaceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WorkflowUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WorkflowUpdateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const WorkflowUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WorkflowUpdateWithoutWorkspaceInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const WorkflowUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => WorkflowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WorkflowUpdateManyMutationInputSchema),z.lazy(() => WorkflowUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const ProfileUpsertWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUpsertWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfileUpdateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutWorkspaceInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ProfileUpdateWithWhereUniqueWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUpdateWithWhereUniqueWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutWorkspaceInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutWorkspaceInputSchema) ]),
}).strict();

export const ProfileUpdateManyWithWhereWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithWhereWithoutWorkspaceInput> = z.object({
  where: z.lazy(() => ProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateManyMutationInputSchema),z.lazy(() => ProfileUncheckedUpdateManyWithoutWorkspaceInputSchema) ]),
}).strict();

export const ActivityCreateManyActivityTypeInputSchema: z.ZodType<Prisma.ActivityCreateManyActivityTypeInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityUpdateWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUpdateWithoutActivityTypeInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  channel: z.lazy(() => ChannelUpdateOneWithoutActivityNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutActivitiesNestedInputSchema).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional()
}).strict();

export const ActivityUncheckedUpdateWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateWithoutActivityTypeInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutActivityTypeInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutActivityTypeInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityCreateManyChannelInputSchema: z.ZodType<Prisma.ActivityCreateManyChannelInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityUpdateWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUpdateWithoutChannelInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activityType: z.lazy(() => ActivityTypeUpdateOneRequiredWithoutActivityNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutActivitiesNestedInputSchema).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional()
}).strict();

export const ActivityUncheckedUpdateWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateWithoutChannelInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutChannelInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutChannelInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateManyCompanyInputSchema: z.ZodType<Prisma.MemberCreateManyCompanyInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TagCreateManyCompanyInputSchema: z.ZodType<Prisma.TagCreateManyCompanyInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  memberId: z.string().optional().nullable()
}).strict();

export const MemberUpdateWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUpdateWithoutCompanyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.lazy(() => LevelUpdateOneWithoutMemberNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutCompanyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateManyWithoutCompanyInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutCompanyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUpdateWithoutCompanyInputSchema: z.ZodType<Prisma.TagUpdateWithoutCompanyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  Member: z.lazy(() => MemberUpdateOneWithoutTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutCompanyInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutCompanyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagUncheckedUpdateManyWithoutCompanyInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutCompanyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ActivityCreateManyEventInputSchema: z.ZodType<Prisma.ActivityCreateManyEventInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  memberId: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityUpdateWithoutEventInputSchema: z.ZodType<Prisma.ActivityUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activityType: z.lazy(() => ActivityTypeUpdateOneRequiredWithoutActivityNestedInputSchema).optional(),
  channel: z.lazy(() => ChannelUpdateOneWithoutActivityNestedInputSchema).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional()
}).strict();

export const ActivityUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateManyLevelInputSchema: z.ZodType<Prisma.MemberCreateManyLevelInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MemberUpdateWithoutLevelInputSchema: z.ZodType<Prisma.MemberUpdateWithoutLevelInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  company: z.lazy(() => CompanyUpdateOneWithoutMemberNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutLevelInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutLevelInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateManyWithoutLevelInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutLevelInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityCreateManyMemberInputSchema: z.ZodType<Prisma.ActivityCreateManyMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LogCreateManyMemberInputSchema: z.ZodType<Prisma.LogCreateManyMemberInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileCreateManyMemberInputSchema: z.ZodType<Prisma.ProfileCreateManyMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TagCreateManyMemberInputSchema: z.ZodType<Prisma.TagCreateManyMemberInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.string().optional().nullable()
}).strict();

export const ActivityUpdateWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activityType: z.lazy(() => ActivityTypeUpdateOneRequiredWithoutActivityNestedInputSchema).optional(),
  channel: z.lazy(() => ChannelUpdateOneWithoutActivityNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutActivitiesNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional()
}).strict();

export const ActivityUncheckedUpdateWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutMemberInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LogUpdateWithoutMemberInputSchema: z.ZodType<Prisma.LogUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutLogsNestedInputSchema).optional()
}).strict();

export const LogUncheckedUpdateWithoutMemberInputSchema: z.ZodType<Prisma.LogUncheckedUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LogUncheckedUpdateManyWithoutMemberInputSchema: z.ZodType<Prisma.LogUncheckedUpdateManyWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUpdateWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyWithoutMemberInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUpdateWithoutMemberInputSchema: z.ZodType<Prisma.TagUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  Company: z.lazy(() => CompanyUpdateOneWithoutTagNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutMemberInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagUncheckedUpdateManyWithoutMemberInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutMemberInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const UserInWorkspaceCreateManyUserInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WorkflowCreateManyUserInputSchema: z.ZodType<Prisma.WorkflowCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  workspaceId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable()
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutUserInWorkspacesNestedInputSchema).optional()
}).strict();

export const UserInWorkspaceUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WorkflowUpdateWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  runs: z.lazy(() => RunUpdateManyWithoutWorkflowNestedInputSchema).optional(),
  workspace: z.lazy(() => WorkspaceUpdateOneRequiredWithoutWorkflowsNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  runs: z.lazy(() => RunUncheckedUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  workspaceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RunCreateManyWorkflowInputSchema: z.ZodType<Prisma.RunCreateManyWorkflowInput> = z.object({
  id: z.string().uuid().optional(),
  memberId: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => RUN_STATUSSchema).optional(),
  runNodes: z.union([ z.lazy(() => RunCreaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RunUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => EnumRUN_STATUSFieldUpdateOperationsInputSchema) ]).optional(),
  runNodes: z.union([ z.lazy(() => RunUpdaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RunUncheckedUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUncheckedUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => EnumRUN_STATUSFieldUpdateOperationsInputSchema) ]).optional(),
  runNodes: z.union([ z.lazy(() => RunUpdaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RunUncheckedUpdateManyWithoutWorkflowInputSchema: z.ZodType<Prisma.RunUncheckedUpdateManyWithoutWorkflowInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  failedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => RUN_STATUSSchema),z.lazy(() => EnumRUN_STATUSFieldUpdateOperationsInputSchema) ]).optional(),
  runNodes: z.union([ z.lazy(() => RunUpdaterunNodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityCreateManyWorkspaceInputSchema: z.ZodType<Prisma.ActivityCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  activityTypeKey: z.string(),
  title: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  replyTo: z.string().optional().nullable(),
  reactTo: z.string().optional().nullable(),
  inviteTo: z.string().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  channelId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  memberId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityTypeCreateManyWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeCreateManyWorkspaceInput> = z.object({
  key: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  points: z.number().int(),
  conditions: z.union([ z.lazy(() => ActivityTypeCreateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ApiKeyCreateManyWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  token: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ChannelCreateManyWorkspaceInputSchema: z.ZodType<Prisma.ChannelCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  name: z.string(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CompanyCreateManyWorkspaceInputSchema: z.ZodType<Prisma.CompanyCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  industry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  employees: z.number().int().optional().nullable(),
  foundedAt: z.coerce.date().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyCreatetagsInputSchema),z.string().array() ]).optional(),
  source: z.lazy(() => SOURCESchema),
  customFields: z.union([ z.lazy(() => CompanyCreatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomFieldCreateManyWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  label: z.string(),
  type: z.lazy(() => TYPESchema),
  options: z.union([ z.lazy(() => CustomFieldCreateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.lazy(() => RECORDSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DuplicateCreateManyWorkspaceInputSchema: z.ZodType<Prisma.DuplicateCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  memberIds: z.union([ z.lazy(() => DuplicateCreatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.lazy(() => REASONSchema),
  state: z.lazy(() => STATESchema),
  totalPulse: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventCreateManyWorkspaceInputSchema: z.ZodType<Prisma.EventCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  title: z.string(),
  startedAt: z.coerce.date(),
  endedAt: z.coerce.date().optional().nullable(),
  source: z.lazy(() => SOURCESchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const IntegrationCreateManyWorkspaceInputSchema: z.ZodType<Prisma.IntegrationCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  connectedAt: z.coerce.date().optional().nullable(),
  status: z.lazy(() => STATUSSchema).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  triggerToken: z.string(),
  expiresAt: z.coerce.date(),
  runId: z.string().optional().nullable(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateManyWorkspaceInputSchema: z.ZodType<Prisma.InvitationCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  email: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LevelCreateManyWorkspaceInputSchema: z.ZodType<Prisma.LevelCreateManyWorkspaceInput> = z.object({
  number: z.number().int(),
  name: z.string(),
  from: z.number().int(),
  to: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ListCreateManyWorkspaceInputSchema: z.ZodType<Prisma.ListCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  emoji: z.string(),
  name: z.string(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LogCreateManyWorkspaceInputSchema: z.ZodType<Prisma.LogCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  date: z.coerce.date(),
  pulse: z.number().int(),
  level: z.number().int().optional().nullable(),
  memberId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MemberCreateManyWorkspaceInputSchema: z.ZodType<Prisma.MemberCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  primaryEmail: z.string(),
  emails: z.union([ z.lazy(() => MemberCreateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberCreatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MemberCreatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.string().optional().nullable(),
  levelNumber: z.number().int().optional().nullable(),
  pulse: z.number().int().optional(),
  source: z.lazy(() => SOURCESchema),
  companyId: z.string().optional().nullable(),
  firstActivity: z.coerce.date().optional().nullable(),
  lastActivity: z.coerce.date().optional().nullable(),
  isStaff: z.boolean().optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.boolean().optional().nullable(),
  potentialAmbassador: z.boolean().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TagCreateManyWorkspaceInputSchema: z.ZodType<Prisma.TagCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string().optional().nullable(),
  name: z.string(),
  color: z.string(),
  source: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  companyId: z.string().optional().nullable(),
  memberId: z.string().optional().nullable()
}).strict();

export const TaskCreateManyWorkspaceInputSchema: z.ZodType<Prisma.TaskCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  assignee: z.string().optional().nullable(),
  isCompleted: z.boolean().optional(),
  memberId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserInWorkspaceCreateManyWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserCreateManyWorkspaceInputSchema: z.ZodType<Prisma.UserCreateManyWorkspaceInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  avatarUrl: z.string().optional().nullable(),
  onboarding: z.coerce.date().optional().nullable(),
  role: z.lazy(() => ROLESchema).optional(),
  lastActivityAt: z.coerce.date().optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WorkflowCreateManyWorkspaceInputSchema: z.ZodType<Prisma.WorkflowCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowCreatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowCreateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.boolean().optional(),
  createdBy: z.string(),
  alertOnSuccess: z.boolean().optional(),
  alertOnFailure: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  archivedAt: z.coerce.date().optional().nullable()
}).strict();

export const ProfileCreateManyWorkspaceInputSchema: z.ZodType<Prisma.ProfileCreateManyWorkspaceInput> = z.object({
  id: z.string().uuid().optional(),
  externalId: z.string(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  memberId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ActivityUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activityType: z.lazy(() => ActivityTypeUpdateOneRequiredWithoutActivityNestedInputSchema).optional(),
  channel: z.lazy(() => ChannelUpdateOneWithoutActivityNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutActivitiesNestedInputSchema).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutActivitiesNestedInputSchema).optional()
}).strict();

export const ActivityUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activityTypeKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  replyTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reactTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inviteTo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  channelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActivityTypeUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUpdateWithoutWorkspaceInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityUpdateManyWithoutActivityTypeNestedInputSchema).optional()
}).strict();

export const ActivityTypeUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedUpdateWithoutWorkspaceInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityUncheckedUpdateManyWithoutActivityTypeNestedInputSchema).optional()
}).strict();

export const ActivityTypeUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ActivityTypeUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => ActivityTypeUpdateconditionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  deletable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChannelUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Activity: z.lazy(() => ActivityUncheckedUpdateManyWithoutChannelNestedInputSchema).optional()
}).strict();

export const ChannelUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ChannelUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CompanyUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Member: z.lazy(() => MemberUpdateManyWithoutCompanyNestedInputSchema).optional(),
  Tag: z.lazy(() => TagUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const CompanyUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Member: z.lazy(() => MemberUncheckedUpdateManyWithoutCompanyNestedInputSchema).optional(),
  Tag: z.lazy(() => TagUncheckedUpdateManyWithoutCompanyNestedInputSchema).optional()
}).strict();

export const CompanyUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.CompanyUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  domain: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  employees: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foundedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => CompanyUpdatetagsInputSchema),z.string().array() ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => CompanyUpdatecustomFieldsInputSchema),InputJsonValueSchema.array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TYPESchema),z.lazy(() => EnumTYPEFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.lazy(() => CustomFieldUpdateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => EnumRECORDFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TYPESchema),z.lazy(() => EnumTYPEFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.lazy(() => CustomFieldUpdateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => EnumRECORDFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TYPESchema),z.lazy(() => EnumTYPEFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.lazy(() => CustomFieldUpdateoptionsInputSchema),InputJsonValueSchema.array() ]).optional(),
  record: z.union([ z.lazy(() => RECORDSchema),z.lazy(() => EnumRECORDFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DuplicateUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberIds: z.union([ z.lazy(() => DuplicateUpdatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.union([ z.lazy(() => REASONSchema),z.lazy(() => EnumREASONFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => STATESchema),z.lazy(() => EnumSTATEFieldUpdateOperationsInputSchema) ]).optional(),
  totalPulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DuplicateUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberIds: z.union([ z.lazy(() => DuplicateUpdatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.union([ z.lazy(() => REASONSchema),z.lazy(() => EnumREASONFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => STATESchema),z.lazy(() => EnumSTATEFieldUpdateOperationsInputSchema) ]).optional(),
  totalPulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DuplicateUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.DuplicateUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  memberIds: z.union([ z.lazy(() => DuplicateUpdatememberIdsInputSchema),z.string().array() ]).optional(),
  reason: z.union([ z.lazy(() => REASONSchema),z.lazy(() => EnumREASONFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => STATESchema),z.lazy(() => EnumSTATEFieldUpdateOperationsInputSchema) ]).optional(),
  totalPulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntegrationUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NullableEnumSTATUSFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  triggerToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  runId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntegrationUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NullableEnumSTATUSFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  triggerToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  runId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntegrationUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.IntegrationUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => STATUSSchema),z.lazy(() => NullableEnumSTATUSFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  triggerToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  runId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LevelUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUpdateWithoutWorkspaceInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Member: z.lazy(() => MemberUpdateManyWithoutLevelNestedInputSchema).optional()
}).strict();

export const LevelUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUncheckedUpdateWithoutWorkspaceInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Member: z.lazy(() => MemberUncheckedUpdateManyWithoutLevelNestedInputSchema).optional()
}).strict();

export const LevelUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.LevelUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  from: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  to: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emoji: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emoji: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ListUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ListUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emoji: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  groupFilters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LogUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutLogsNestedInputSchema).optional()
}).strict();

export const LogUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LogUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.LogUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.lazy(() => LevelUpdateOneWithoutMemberNestedInputSchema).optional(),
  company: z.lazy(() => CompanyUpdateOneWithoutMemberNestedInputSchema).optional(),
  activities: z.lazy(() => ActivityUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  activities: z.lazy(() => ActivityUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  logs: z.lazy(() => LogUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  profiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutMemberNestedInputSchema).optional(),
  Tags: z.lazy(() => TagUncheckedUpdateManyWithoutMemberNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  primaryEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emails: z.union([ z.lazy(() => MemberUpdateemailsInputSchema),z.string().array() ]).optional(),
  phones: z.union([ z.lazy(() => MemberUpdatephonesInputSchema),z.string().array() ]).optional(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MemberUpdatetagsInputSchema),z.string().array() ]).optional(),
  linkedinUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  levelNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pulse: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SOURCESchema),z.lazy(() => EnumSOURCEFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastActivity: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isStaff: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  customFields: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  atRiskMember: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  potentialAmbassador: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Company: z.lazy(() => CompanyUpdateOneWithoutTagNestedInputSchema).optional(),
  Member: z.lazy(() => MemberUpdateOneWithoutTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserInWorkspaceNestedInputSchema).optional()
}).strict();

export const UserInWorkspaceUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserInWorkspaceUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userInWorkspace: z.lazy(() => UserInWorkspaceUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Workflow: z.lazy(() => WorkflowUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarding: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => ROLESchema),z.lazy(() => EnumROLEFieldUpdateOperationsInputSchema) ]).optional(),
  lastActivityAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  membersPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  companiesPreferences: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WorkflowUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  runs: z.lazy(() => RunUpdateManyWithoutWorkflowNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  runs: z.lazy(() => RunUncheckedUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nodes: z.union([ z.lazy(() => WorkflowUpdatenodesInputSchema),InputJsonValueSchema.array() ]).optional(),
  edges: z.union([ z.lazy(() => WorkflowUpdateedgesInputSchema),InputJsonValueSchema.array() ]).optional(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnSuccess: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  alertOnFailure: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  archivedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfileUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  member: z.lazy(() => MemberUpdateOneRequiredWithoutProfilesNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyWithoutWorkspaceInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutWorkspaceInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  externalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  attributes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  memberId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityFindFirstArgsSchema: z.ZodType<Prisma.ActivityFindFirstArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  where: ActivityWhereInputSchema.optional(),
  orderBy: z.union([ ActivityOrderByWithRelationInputSchema.array(),ActivityOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActivityScalarFieldEnumSchema,ActivityScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ActivityFindFirstOrThrowArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  where: ActivityWhereInputSchema.optional(),
  orderBy: z.union([ ActivityOrderByWithRelationInputSchema.array(),ActivityOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActivityScalarFieldEnumSchema,ActivityScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityFindManyArgsSchema: z.ZodType<Prisma.ActivityFindManyArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  where: ActivityWhereInputSchema.optional(),
  orderBy: z.union([ ActivityOrderByWithRelationInputSchema.array(),ActivityOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActivityScalarFieldEnumSchema,ActivityScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityAggregateArgsSchema: z.ZodType<Prisma.ActivityAggregateArgs> = z.object({
  where: ActivityWhereInputSchema.optional(),
  orderBy: z.union([ ActivityOrderByWithRelationInputSchema.array(),ActivityOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ActivityGroupByArgsSchema: z.ZodType<Prisma.ActivityGroupByArgs> = z.object({
  where: ActivityWhereInputSchema.optional(),
  orderBy: z.union([ ActivityOrderByWithAggregationInputSchema.array(),ActivityOrderByWithAggregationInputSchema ]).optional(),
  by: ActivityScalarFieldEnumSchema.array(),
  having: ActivityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ActivityFindUniqueArgsSchema: z.ZodType<Prisma.ActivityFindUniqueArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  where: ActivityWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ActivityFindUniqueOrThrowArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  where: ActivityWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeFindFirstArgsSchema: z.ZodType<Prisma.ActivityTypeFindFirstArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  where: ActivityTypeWhereInputSchema.optional(),
  orderBy: z.union([ ActivityTypeOrderByWithRelationInputSchema.array(),ActivityTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActivityTypeScalarFieldEnumSchema,ActivityTypeScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ActivityTypeFindFirstOrThrowArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  where: ActivityTypeWhereInputSchema.optional(),
  orderBy: z.union([ ActivityTypeOrderByWithRelationInputSchema.array(),ActivityTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActivityTypeScalarFieldEnumSchema,ActivityTypeScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeFindManyArgsSchema: z.ZodType<Prisma.ActivityTypeFindManyArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  where: ActivityTypeWhereInputSchema.optional(),
  orderBy: z.union([ ActivityTypeOrderByWithRelationInputSchema.array(),ActivityTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActivityTypeScalarFieldEnumSchema,ActivityTypeScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeAggregateArgsSchema: z.ZodType<Prisma.ActivityTypeAggregateArgs> = z.object({
  where: ActivityTypeWhereInputSchema.optional(),
  orderBy: z.union([ ActivityTypeOrderByWithRelationInputSchema.array(),ActivityTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: ActivityTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ActivityTypeGroupByArgsSchema: z.ZodType<Prisma.ActivityTypeGroupByArgs> = z.object({
  where: ActivityTypeWhereInputSchema.optional(),
  orderBy: z.union([ ActivityTypeOrderByWithAggregationInputSchema.array(),ActivityTypeOrderByWithAggregationInputSchema ]).optional(),
  by: ActivityTypeScalarFieldEnumSchema.array(),
  having: ActivityTypeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ActivityTypeFindUniqueArgsSchema: z.ZodType<Prisma.ActivityTypeFindUniqueArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  where: ActivityTypeWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ActivityTypeFindUniqueOrThrowArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  where: ActivityTypeWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyFindFirstArgsSchema: z.ZodType<Prisma.ApiKeyFindFirstArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ApiKeyScalarFieldEnumSchema,ApiKeyScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ApiKeyFindFirstOrThrowArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ApiKeyScalarFieldEnumSchema,ApiKeyScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyFindManyArgsSchema: z.ZodType<Prisma.ApiKeyFindManyArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ApiKeyScalarFieldEnumSchema,ApiKeyScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyAggregateArgsSchema: z.ZodType<Prisma.ApiKeyAggregateArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ApiKeyGroupByArgsSchema: z.ZodType<Prisma.ApiKeyGroupByArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithAggregationInputSchema.array(),ApiKeyOrderByWithAggregationInputSchema ]).optional(),
  by: ApiKeyScalarFieldEnumSchema.array(),
  having: ApiKeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ApiKeyFindUniqueArgsSchema: z.ZodType<Prisma.ApiKeyFindUniqueArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ApiKeyFindUniqueOrThrowArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelFindFirstArgsSchema: z.ZodType<Prisma.ChannelFindFirstArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelScalarFieldEnumSchema,ChannelScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ChannelFindFirstOrThrowArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelScalarFieldEnumSchema,ChannelScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelFindManyArgsSchema: z.ZodType<Prisma.ChannelFindManyArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChannelScalarFieldEnumSchema,ChannelScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelAggregateArgsSchema: z.ZodType<Prisma.ChannelAggregateArgs> = z.object({
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithRelationInputSchema.array(),ChannelOrderByWithRelationInputSchema ]).optional(),
  cursor: ChannelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChannelGroupByArgsSchema: z.ZodType<Prisma.ChannelGroupByArgs> = z.object({
  where: ChannelWhereInputSchema.optional(),
  orderBy: z.union([ ChannelOrderByWithAggregationInputSchema.array(),ChannelOrderByWithAggregationInputSchema ]).optional(),
  by: ChannelScalarFieldEnumSchema.array(),
  having: ChannelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChannelFindUniqueArgsSchema: z.ZodType<Prisma.ChannelFindUniqueArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ChannelFindUniqueOrThrowArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyFindFirstArgsSchema: z.ZodType<Prisma.CompanyFindFirstArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  where: CompanyWhereInputSchema.optional(),
  orderBy: z.union([ CompanyOrderByWithRelationInputSchema.array(),CompanyOrderByWithRelationInputSchema ]).optional(),
  cursor: CompanyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompanyScalarFieldEnumSchema,CompanyScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CompanyFindFirstOrThrowArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  where: CompanyWhereInputSchema.optional(),
  orderBy: z.union([ CompanyOrderByWithRelationInputSchema.array(),CompanyOrderByWithRelationInputSchema ]).optional(),
  cursor: CompanyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompanyScalarFieldEnumSchema,CompanyScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyFindManyArgsSchema: z.ZodType<Prisma.CompanyFindManyArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  where: CompanyWhereInputSchema.optional(),
  orderBy: z.union([ CompanyOrderByWithRelationInputSchema.array(),CompanyOrderByWithRelationInputSchema ]).optional(),
  cursor: CompanyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompanyScalarFieldEnumSchema,CompanyScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyAggregateArgsSchema: z.ZodType<Prisma.CompanyAggregateArgs> = z.object({
  where: CompanyWhereInputSchema.optional(),
  orderBy: z.union([ CompanyOrderByWithRelationInputSchema.array(),CompanyOrderByWithRelationInputSchema ]).optional(),
  cursor: CompanyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CompanyGroupByArgsSchema: z.ZodType<Prisma.CompanyGroupByArgs> = z.object({
  where: CompanyWhereInputSchema.optional(),
  orderBy: z.union([ CompanyOrderByWithAggregationInputSchema.array(),CompanyOrderByWithAggregationInputSchema ]).optional(),
  by: CompanyScalarFieldEnumSchema.array(),
  having: CompanyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CompanyFindUniqueArgsSchema: z.ZodType<Prisma.CompanyFindUniqueArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  where: CompanyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CompanyFindUniqueOrThrowArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  where: CompanyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldFindFirstArgsSchema: z.ZodType<Prisma.CustomFieldFindFirstArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomFieldScalarFieldEnumSchema,CustomFieldScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomFieldFindFirstOrThrowArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomFieldScalarFieldEnumSchema,CustomFieldScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldFindManyArgsSchema: z.ZodType<Prisma.CustomFieldFindManyArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomFieldScalarFieldEnumSchema,CustomFieldScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldAggregateArgsSchema: z.ZodType<Prisma.CustomFieldAggregateArgs> = z.object({
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomFieldGroupByArgsSchema: z.ZodType<Prisma.CustomFieldGroupByArgs> = z.object({
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithAggregationInputSchema.array(),CustomFieldOrderByWithAggregationInputSchema ]).optional(),
  by: CustomFieldScalarFieldEnumSchema.array(),
  having: CustomFieldScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomFieldFindUniqueArgsSchema: z.ZodType<Prisma.CustomFieldFindUniqueArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomFieldFindUniqueOrThrowArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateFindFirstArgsSchema: z.ZodType<Prisma.DuplicateFindFirstArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  where: DuplicateWhereInputSchema.optional(),
  orderBy: z.union([ DuplicateOrderByWithRelationInputSchema.array(),DuplicateOrderByWithRelationInputSchema ]).optional(),
  cursor: DuplicateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DuplicateScalarFieldEnumSchema,DuplicateScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DuplicateFindFirstOrThrowArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  where: DuplicateWhereInputSchema.optional(),
  orderBy: z.union([ DuplicateOrderByWithRelationInputSchema.array(),DuplicateOrderByWithRelationInputSchema ]).optional(),
  cursor: DuplicateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DuplicateScalarFieldEnumSchema,DuplicateScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateFindManyArgsSchema: z.ZodType<Prisma.DuplicateFindManyArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  where: DuplicateWhereInputSchema.optional(),
  orderBy: z.union([ DuplicateOrderByWithRelationInputSchema.array(),DuplicateOrderByWithRelationInputSchema ]).optional(),
  cursor: DuplicateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DuplicateScalarFieldEnumSchema,DuplicateScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateAggregateArgsSchema: z.ZodType<Prisma.DuplicateAggregateArgs> = z.object({
  where: DuplicateWhereInputSchema.optional(),
  orderBy: z.union([ DuplicateOrderByWithRelationInputSchema.array(),DuplicateOrderByWithRelationInputSchema ]).optional(),
  cursor: DuplicateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DuplicateGroupByArgsSchema: z.ZodType<Prisma.DuplicateGroupByArgs> = z.object({
  where: DuplicateWhereInputSchema.optional(),
  orderBy: z.union([ DuplicateOrderByWithAggregationInputSchema.array(),DuplicateOrderByWithAggregationInputSchema ]).optional(),
  by: DuplicateScalarFieldEnumSchema.array(),
  having: DuplicateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DuplicateFindUniqueArgsSchema: z.ZodType<Prisma.DuplicateFindUniqueArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  where: DuplicateWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DuplicateFindUniqueOrThrowArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  where: DuplicateWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventFindFirstArgsSchema: z.ZodType<Prisma.EventFindFirstArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EventFindFirstOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventFindManyArgsSchema: z.ZodType<Prisma.EventFindManyArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventAggregateArgsSchema: z.ZodType<Prisma.EventAggregateArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventGroupByArgsSchema: z.ZodType<Prisma.EventGroupByArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithAggregationInputSchema.array(),EventOrderByWithAggregationInputSchema ]).optional(),
  by: EventScalarFieldEnumSchema.array(),
  having: EventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventFindUniqueArgsSchema: z.ZodType<Prisma.EventFindUniqueArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EventFindUniqueOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationFindFirstArgsSchema: z.ZodType<Prisma.IntegrationFindFirstArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  where: IntegrationWhereInputSchema.optional(),
  orderBy: z.union([ IntegrationOrderByWithRelationInputSchema.array(),IntegrationOrderByWithRelationInputSchema ]).optional(),
  cursor: IntegrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IntegrationScalarFieldEnumSchema,IntegrationScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.IntegrationFindFirstOrThrowArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  where: IntegrationWhereInputSchema.optional(),
  orderBy: z.union([ IntegrationOrderByWithRelationInputSchema.array(),IntegrationOrderByWithRelationInputSchema ]).optional(),
  cursor: IntegrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IntegrationScalarFieldEnumSchema,IntegrationScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationFindManyArgsSchema: z.ZodType<Prisma.IntegrationFindManyArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  where: IntegrationWhereInputSchema.optional(),
  orderBy: z.union([ IntegrationOrderByWithRelationInputSchema.array(),IntegrationOrderByWithRelationInputSchema ]).optional(),
  cursor: IntegrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IntegrationScalarFieldEnumSchema,IntegrationScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationAggregateArgsSchema: z.ZodType<Prisma.IntegrationAggregateArgs> = z.object({
  where: IntegrationWhereInputSchema.optional(),
  orderBy: z.union([ IntegrationOrderByWithRelationInputSchema.array(),IntegrationOrderByWithRelationInputSchema ]).optional(),
  cursor: IntegrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IntegrationGroupByArgsSchema: z.ZodType<Prisma.IntegrationGroupByArgs> = z.object({
  where: IntegrationWhereInputSchema.optional(),
  orderBy: z.union([ IntegrationOrderByWithAggregationInputSchema.array(),IntegrationOrderByWithAggregationInputSchema ]).optional(),
  by: IntegrationScalarFieldEnumSchema.array(),
  having: IntegrationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IntegrationFindUniqueArgsSchema: z.ZodType<Prisma.IntegrationFindUniqueArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  where: IntegrationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.IntegrationFindUniqueOrThrowArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  where: IntegrationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Prisma.InvitationFindFirstArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindFirstOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Prisma.InvitationFindManyArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Prisma.InvitationFindUniqueArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindUniqueOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelFindFirstArgsSchema: z.ZodType<Prisma.LevelFindFirstArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  where: LevelWhereInputSchema.optional(),
  orderBy: z.union([ LevelOrderByWithRelationInputSchema.array(),LevelOrderByWithRelationInputSchema ]).optional(),
  cursor: LevelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LevelScalarFieldEnumSchema,LevelScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LevelFindFirstOrThrowArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  where: LevelWhereInputSchema.optional(),
  orderBy: z.union([ LevelOrderByWithRelationInputSchema.array(),LevelOrderByWithRelationInputSchema ]).optional(),
  cursor: LevelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LevelScalarFieldEnumSchema,LevelScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelFindManyArgsSchema: z.ZodType<Prisma.LevelFindManyArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  where: LevelWhereInputSchema.optional(),
  orderBy: z.union([ LevelOrderByWithRelationInputSchema.array(),LevelOrderByWithRelationInputSchema ]).optional(),
  cursor: LevelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LevelScalarFieldEnumSchema,LevelScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelAggregateArgsSchema: z.ZodType<Prisma.LevelAggregateArgs> = z.object({
  where: LevelWhereInputSchema.optional(),
  orderBy: z.union([ LevelOrderByWithRelationInputSchema.array(),LevelOrderByWithRelationInputSchema ]).optional(),
  cursor: LevelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LevelGroupByArgsSchema: z.ZodType<Prisma.LevelGroupByArgs> = z.object({
  where: LevelWhereInputSchema.optional(),
  orderBy: z.union([ LevelOrderByWithAggregationInputSchema.array(),LevelOrderByWithAggregationInputSchema ]).optional(),
  by: LevelScalarFieldEnumSchema.array(),
  having: LevelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LevelFindUniqueArgsSchema: z.ZodType<Prisma.LevelFindUniqueArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  where: LevelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LevelFindUniqueOrThrowArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  where: LevelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListFindFirstArgsSchema: z.ZodType<Prisma.ListFindFirstArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  where: ListWhereInputSchema.optional(),
  orderBy: z.union([ ListOrderByWithRelationInputSchema.array(),ListOrderByWithRelationInputSchema ]).optional(),
  cursor: ListWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListScalarFieldEnumSchema,ListScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ListFindFirstOrThrowArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  where: ListWhereInputSchema.optional(),
  orderBy: z.union([ ListOrderByWithRelationInputSchema.array(),ListOrderByWithRelationInputSchema ]).optional(),
  cursor: ListWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListScalarFieldEnumSchema,ListScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListFindManyArgsSchema: z.ZodType<Prisma.ListFindManyArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  where: ListWhereInputSchema.optional(),
  orderBy: z.union([ ListOrderByWithRelationInputSchema.array(),ListOrderByWithRelationInputSchema ]).optional(),
  cursor: ListWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ListScalarFieldEnumSchema,ListScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListAggregateArgsSchema: z.ZodType<Prisma.ListAggregateArgs> = z.object({
  where: ListWhereInputSchema.optional(),
  orderBy: z.union([ ListOrderByWithRelationInputSchema.array(),ListOrderByWithRelationInputSchema ]).optional(),
  cursor: ListWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ListGroupByArgsSchema: z.ZodType<Prisma.ListGroupByArgs> = z.object({
  where: ListWhereInputSchema.optional(),
  orderBy: z.union([ ListOrderByWithAggregationInputSchema.array(),ListOrderByWithAggregationInputSchema ]).optional(),
  by: ListScalarFieldEnumSchema.array(),
  having: ListScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ListFindUniqueArgsSchema: z.ZodType<Prisma.ListFindUniqueArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  where: ListWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ListFindUniqueOrThrowArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  where: ListWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogFindFirstArgsSchema: z.ZodType<Prisma.LogFindFirstArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  where: LogWhereInputSchema.optional(),
  orderBy: z.union([ LogOrderByWithRelationInputSchema.array(),LogOrderByWithRelationInputSchema ]).optional(),
  cursor: LogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LogScalarFieldEnumSchema,LogScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LogFindFirstOrThrowArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  where: LogWhereInputSchema.optional(),
  orderBy: z.union([ LogOrderByWithRelationInputSchema.array(),LogOrderByWithRelationInputSchema ]).optional(),
  cursor: LogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LogScalarFieldEnumSchema,LogScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogFindManyArgsSchema: z.ZodType<Prisma.LogFindManyArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  where: LogWhereInputSchema.optional(),
  orderBy: z.union([ LogOrderByWithRelationInputSchema.array(),LogOrderByWithRelationInputSchema ]).optional(),
  cursor: LogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LogScalarFieldEnumSchema,LogScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogAggregateArgsSchema: z.ZodType<Prisma.LogAggregateArgs> = z.object({
  where: LogWhereInputSchema.optional(),
  orderBy: z.union([ LogOrderByWithRelationInputSchema.array(),LogOrderByWithRelationInputSchema ]).optional(),
  cursor: LogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LogGroupByArgsSchema: z.ZodType<Prisma.LogGroupByArgs> = z.object({
  where: LogWhereInputSchema.optional(),
  orderBy: z.union([ LogOrderByWithAggregationInputSchema.array(),LogOrderByWithAggregationInputSchema ]).optional(),
  by: LogScalarFieldEnumSchema.array(),
  having: LogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LogFindUniqueArgsSchema: z.ZodType<Prisma.LogFindUniqueArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  where: LogWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LogFindUniqueOrThrowArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  where: LogWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberFindFirstArgsSchema: z.ZodType<Prisma.MemberFindFirstArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MemberFindFirstOrThrowArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberFindManyArgsSchema: z.ZodType<Prisma.MemberFindManyArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberAggregateArgsSchema: z.ZodType<Prisma.MemberAggregateArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberGroupByArgsSchema: z.ZodType<Prisma.MemberGroupByArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithAggregationInputSchema.array(),MemberOrderByWithAggregationInputSchema ]).optional(),
  by: MemberScalarFieldEnumSchema.array(),
  having: MemberScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberFindUniqueArgsSchema: z.ZodType<Prisma.MemberFindUniqueArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MemberFindUniqueOrThrowArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileFindFirstArgsSchema: z.ZodType<Prisma.ProfileFindFirstArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProfileFindFirstOrThrowArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileFindManyArgsSchema: z.ZodType<Prisma.ProfileFindManyArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileAggregateArgsSchema: z.ZodType<Prisma.ProfileAggregateArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfileGroupByArgsSchema: z.ZodType<Prisma.ProfileGroupByArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithAggregationInputSchema.array(),ProfileOrderByWithAggregationInputSchema ]).optional(),
  by: ProfileScalarFieldEnumSchema.array(),
  having: ProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfileFindUniqueArgsSchema: z.ZodType<Prisma.ProfileFindUniqueArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProfileFindUniqueOrThrowArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunFindFirstArgsSchema: z.ZodType<Prisma.RunFindFirstArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  where: RunWhereInputSchema.optional(),
  orderBy: z.union([ RunOrderByWithRelationInputSchema.array(),RunOrderByWithRelationInputSchema ]).optional(),
  cursor: RunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RunScalarFieldEnumSchema,RunScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RunFindFirstOrThrowArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  where: RunWhereInputSchema.optional(),
  orderBy: z.union([ RunOrderByWithRelationInputSchema.array(),RunOrderByWithRelationInputSchema ]).optional(),
  cursor: RunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RunScalarFieldEnumSchema,RunScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunFindManyArgsSchema: z.ZodType<Prisma.RunFindManyArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  where: RunWhereInputSchema.optional(),
  orderBy: z.union([ RunOrderByWithRelationInputSchema.array(),RunOrderByWithRelationInputSchema ]).optional(),
  cursor: RunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RunScalarFieldEnumSchema,RunScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunAggregateArgsSchema: z.ZodType<Prisma.RunAggregateArgs> = z.object({
  where: RunWhereInputSchema.optional(),
  orderBy: z.union([ RunOrderByWithRelationInputSchema.array(),RunOrderByWithRelationInputSchema ]).optional(),
  cursor: RunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RunGroupByArgsSchema: z.ZodType<Prisma.RunGroupByArgs> = z.object({
  where: RunWhereInputSchema.optional(),
  orderBy: z.union([ RunOrderByWithAggregationInputSchema.array(),RunOrderByWithAggregationInputSchema ]).optional(),
  by: RunScalarFieldEnumSchema.array(),
  having: RunScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RunFindUniqueArgsSchema: z.ZodType<Prisma.RunFindUniqueArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  where: RunWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RunFindUniqueOrThrowArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  where: RunWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagFindFirstArgsSchema: z.ZodType<Prisma.TagFindFirstArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TagFindFirstOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagFindManyArgsSchema: z.ZodType<Prisma.TagFindManyArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagAggregateArgsSchema: z.ZodType<Prisma.TagAggregateArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagGroupByArgsSchema: z.ZodType<Prisma.TagGroupByArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithAggregationInputSchema.array(),TagOrderByWithAggregationInputSchema ]).optional(),
  by: TagScalarFieldEnumSchema.array(),
  having: TagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagFindUniqueArgsSchema: z.ZodType<Prisma.TagFindUniqueArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TagFindUniqueOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskFindFirstArgsSchema: z.ZodType<Prisma.TaskFindFirstArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskFindFirstOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskFindManyArgsSchema: z.ZodType<Prisma.TaskFindManyArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskAggregateArgsSchema: z.ZodType<Prisma.TaskAggregateArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskGroupByArgsSchema: z.ZodType<Prisma.TaskGroupByArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithAggregationInputSchema.array(),TaskOrderByWithAggregationInputSchema ]).optional(),
  by: TaskScalarFieldEnumSchema.array(),
  having: TaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskFindUniqueArgsSchema: z.ZodType<Prisma.TaskFindUniqueArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskFindUniqueOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceFindFirstArgsSchema: z.ZodType<Prisma.UserInWorkspaceFindFirstArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  where: UserInWorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ UserInWorkspaceOrderByWithRelationInputSchema.array(),UserInWorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: UserInWorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserInWorkspaceScalarFieldEnumSchema,UserInWorkspaceScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserInWorkspaceFindFirstOrThrowArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  where: UserInWorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ UserInWorkspaceOrderByWithRelationInputSchema.array(),UserInWorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: UserInWorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserInWorkspaceScalarFieldEnumSchema,UserInWorkspaceScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceFindManyArgsSchema: z.ZodType<Prisma.UserInWorkspaceFindManyArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  where: UserInWorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ UserInWorkspaceOrderByWithRelationInputSchema.array(),UserInWorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: UserInWorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserInWorkspaceScalarFieldEnumSchema,UserInWorkspaceScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceAggregateArgsSchema: z.ZodType<Prisma.UserInWorkspaceAggregateArgs> = z.object({
  where: UserInWorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ UserInWorkspaceOrderByWithRelationInputSchema.array(),UserInWorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: UserInWorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserInWorkspaceGroupByArgsSchema: z.ZodType<Prisma.UserInWorkspaceGroupByArgs> = z.object({
  where: UserInWorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ UserInWorkspaceOrderByWithAggregationInputSchema.array(),UserInWorkspaceOrderByWithAggregationInputSchema ]).optional(),
  by: UserInWorkspaceScalarFieldEnumSchema.array(),
  having: UserInWorkspaceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserInWorkspaceFindUniqueArgsSchema: z.ZodType<Prisma.UserInWorkspaceFindUniqueArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  where: UserInWorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserInWorkspaceFindUniqueOrThrowArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  where: UserInWorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenFindFirstArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenFindManyArgsSchema: z.ZodType<Prisma.VerificationTokenFindManyArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenAggregateArgsSchema: z.ZodType<Prisma.VerificationTokenAggregateArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationTokenGroupByArgsSchema: z.ZodType<Prisma.VerificationTokenGroupByArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithAggregationInputSchema.array(),VerificationTokenOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationTokenScalarFieldEnumSchema.array(),
  having: VerificationTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationTokenFindUniqueArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowFindFirstArgsSchema: z.ZodType<Prisma.WorkflowFindFirstArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkflowScalarFieldEnumSchema,WorkflowScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowFindFirstOrThrowArgsSchema: z.ZodType<Prisma.WorkflowFindFirstOrThrowArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkflowScalarFieldEnumSchema,WorkflowScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowFindManyArgsSchema: z.ZodType<Prisma.WorkflowFindManyArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkflowScalarFieldEnumSchema,WorkflowScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowAggregateArgsSchema: z.ZodType<Prisma.WorkflowAggregateArgs> = z.object({
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WorkflowGroupByArgsSchema: z.ZodType<Prisma.WorkflowGroupByArgs> = z.object({
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithAggregationInputSchema.array(),WorkflowOrderByWithAggregationInputSchema ]).optional(),
  by: WorkflowScalarFieldEnumSchema.array(),
  having: WorkflowScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WorkflowFindUniqueArgsSchema: z.ZodType<Prisma.WorkflowFindUniqueArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.WorkflowFindUniqueOrThrowArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceFindFirstArgsSchema: z.ZodType<Prisma.WorkspaceFindFirstArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  where: WorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ WorkspaceOrderByWithRelationInputSchema.array(),WorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkspaceScalarFieldEnumSchema,WorkspaceScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.WorkspaceFindFirstOrThrowArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  where: WorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ WorkspaceOrderByWithRelationInputSchema.array(),WorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkspaceScalarFieldEnumSchema,WorkspaceScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceFindManyArgsSchema: z.ZodType<Prisma.WorkspaceFindManyArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  where: WorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ WorkspaceOrderByWithRelationInputSchema.array(),WorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkspaceScalarFieldEnumSchema,WorkspaceScalarFieldEnumSchema.array() ]).optional(),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceAggregateArgsSchema: z.ZodType<Prisma.WorkspaceAggregateArgs> = z.object({
  where: WorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ WorkspaceOrderByWithRelationInputSchema.array(),WorkspaceOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkspaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WorkspaceGroupByArgsSchema: z.ZodType<Prisma.WorkspaceGroupByArgs> = z.object({
  where: WorkspaceWhereInputSchema.optional(),
  orderBy: z.union([ WorkspaceOrderByWithAggregationInputSchema.array(),WorkspaceOrderByWithAggregationInputSchema ]).optional(),
  by: WorkspaceScalarFieldEnumSchema.array(),
  having: WorkspaceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WorkspaceFindUniqueArgsSchema: z.ZodType<Prisma.WorkspaceFindUniqueArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  where: WorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.WorkspaceFindUniqueOrThrowArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  where: WorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActivityCreateArgsSchema: z.ZodType<Prisma.ActivityCreateArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  data: z.union([ ActivityCreateInputSchema,ActivityUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityUpsertArgsSchema: z.ZodType<Prisma.ActivityUpsertArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  where: ActivityWhereUniqueInputSchema,
  create: z.union([ ActivityCreateInputSchema,ActivityUncheckedCreateInputSchema ]),
  update: z.union([ ActivityUpdateInputSchema,ActivityUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityCreateManyArgsSchema: z.ZodType<Prisma.ActivityCreateManyArgs> = z.object({
  data: z.union([ ActivityCreateManyInputSchema,ActivityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ActivityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ActivityCreateManyAndReturnArgs> = z.object({
  data: z.union([ ActivityCreateManyInputSchema,ActivityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ActivityDeleteArgsSchema: z.ZodType<Prisma.ActivityDeleteArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  where: ActivityWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityUpdateArgsSchema: z.ZodType<Prisma.ActivityUpdateArgs> = z.object({
  select: ActivitySelectSchema.optional(),
  include: ActivityIncludeSchema.optional(),
  data: z.union([ ActivityUpdateInputSchema,ActivityUncheckedUpdateInputSchema ]),
  where: ActivityWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityUpdateManyArgsSchema: z.ZodType<Prisma.ActivityUpdateManyArgs> = z.object({
  data: z.union([ ActivityUpdateManyMutationInputSchema,ActivityUncheckedUpdateManyInputSchema ]),
  where: ActivityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActivityUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ActivityUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ActivityUpdateManyMutationInputSchema,ActivityUncheckedUpdateManyInputSchema ]),
  where: ActivityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActivityDeleteManyArgsSchema: z.ZodType<Prisma.ActivityDeleteManyArgs> = z.object({
  where: ActivityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActivityTypeCreateArgsSchema: z.ZodType<Prisma.ActivityTypeCreateArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  data: z.union([ ActivityTypeCreateInputSchema,ActivityTypeUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeUpsertArgsSchema: z.ZodType<Prisma.ActivityTypeUpsertArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  where: ActivityTypeWhereUniqueInputSchema,
  create: z.union([ ActivityTypeCreateInputSchema,ActivityTypeUncheckedCreateInputSchema ]),
  update: z.union([ ActivityTypeUpdateInputSchema,ActivityTypeUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeCreateManyArgsSchema: z.ZodType<Prisma.ActivityTypeCreateManyArgs> = z.object({
  data: z.union([ ActivityTypeCreateManyInputSchema,ActivityTypeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ActivityTypeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ActivityTypeCreateManyAndReturnArgs> = z.object({
  data: z.union([ ActivityTypeCreateManyInputSchema,ActivityTypeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ActivityTypeDeleteArgsSchema: z.ZodType<Prisma.ActivityTypeDeleteArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  where: ActivityTypeWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeUpdateArgsSchema: z.ZodType<Prisma.ActivityTypeUpdateArgs> = z.object({
  select: ActivityTypeSelectSchema.optional(),
  include: ActivityTypeIncludeSchema.optional(),
  data: z.union([ ActivityTypeUpdateInputSchema,ActivityTypeUncheckedUpdateInputSchema ]),
  where: ActivityTypeWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ActivityTypeUpdateManyArgsSchema: z.ZodType<Prisma.ActivityTypeUpdateManyArgs> = z.object({
  data: z.union([ ActivityTypeUpdateManyMutationInputSchema,ActivityTypeUncheckedUpdateManyInputSchema ]),
  where: ActivityTypeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActivityTypeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ActivityTypeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ActivityTypeUpdateManyMutationInputSchema,ActivityTypeUncheckedUpdateManyInputSchema ]),
  where: ActivityTypeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActivityTypeDeleteManyArgsSchema: z.ZodType<Prisma.ActivityTypeDeleteManyArgs> = z.object({
  where: ActivityTypeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ApiKeyCreateArgsSchema: z.ZodType<Prisma.ApiKeyCreateArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  data: z.union([ ApiKeyCreateInputSchema,ApiKeyUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyUpsertArgsSchema: z.ZodType<Prisma.ApiKeyUpsertArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
  create: z.union([ ApiKeyCreateInputSchema,ApiKeyUncheckedCreateInputSchema ]),
  update: z.union([ ApiKeyUpdateInputSchema,ApiKeyUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyCreateManyArgsSchema: z.ZodType<Prisma.ApiKeyCreateManyArgs> = z.object({
  data: z.union([ ApiKeyCreateManyInputSchema,ApiKeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ApiKeyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ApiKeyCreateManyAndReturnArgs> = z.object({
  data: z.union([ ApiKeyCreateManyInputSchema,ApiKeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ApiKeyDeleteArgsSchema: z.ZodType<Prisma.ApiKeyDeleteArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyUpdateArgsSchema: z.ZodType<Prisma.ApiKeyUpdateArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  include: ApiKeyIncludeSchema.optional(),
  data: z.union([ ApiKeyUpdateInputSchema,ApiKeyUncheckedUpdateInputSchema ]),
  where: ApiKeyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ApiKeyUpdateManyArgsSchema: z.ZodType<Prisma.ApiKeyUpdateManyArgs> = z.object({
  data: z.union([ ApiKeyUpdateManyMutationInputSchema,ApiKeyUncheckedUpdateManyInputSchema ]),
  where: ApiKeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ApiKeyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ApiKeyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ApiKeyUpdateManyMutationInputSchema,ApiKeyUncheckedUpdateManyInputSchema ]),
  where: ApiKeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ApiKeyDeleteManyArgsSchema: z.ZodType<Prisma.ApiKeyDeleteManyArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelCreateArgsSchema: z.ZodType<Prisma.ChannelCreateArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  data: z.union([ ChannelCreateInputSchema,ChannelUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelUpsertArgsSchema: z.ZodType<Prisma.ChannelUpsertArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
  create: z.union([ ChannelCreateInputSchema,ChannelUncheckedCreateInputSchema ]),
  update: z.union([ ChannelUpdateInputSchema,ChannelUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelCreateManyArgsSchema: z.ZodType<Prisma.ChannelCreateManyArgs> = z.object({
  data: z.union([ ChannelCreateManyInputSchema,ChannelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChannelCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ChannelCreateManyAndReturnArgs> = z.object({
  data: z.union([ ChannelCreateManyInputSchema,ChannelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChannelDeleteArgsSchema: z.ZodType<Prisma.ChannelDeleteArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  where: ChannelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelUpdateArgsSchema: z.ZodType<Prisma.ChannelUpdateArgs> = z.object({
  select: ChannelSelectSchema.optional(),
  include: ChannelIncludeSchema.optional(),
  data: z.union([ ChannelUpdateInputSchema,ChannelUncheckedUpdateInputSchema ]),
  where: ChannelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ChannelUpdateManyArgsSchema: z.ZodType<Prisma.ChannelUpdateManyArgs> = z.object({
  data: z.union([ ChannelUpdateManyMutationInputSchema,ChannelUncheckedUpdateManyInputSchema ]),
  where: ChannelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ChannelUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ChannelUpdateManyMutationInputSchema,ChannelUncheckedUpdateManyInputSchema ]),
  where: ChannelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChannelDeleteManyArgsSchema: z.ZodType<Prisma.ChannelDeleteManyArgs> = z.object({
  where: ChannelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CompanyCreateArgsSchema: z.ZodType<Prisma.CompanyCreateArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  data: z.union([ CompanyCreateInputSchema,CompanyUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyUpsertArgsSchema: z.ZodType<Prisma.CompanyUpsertArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  where: CompanyWhereUniqueInputSchema,
  create: z.union([ CompanyCreateInputSchema,CompanyUncheckedCreateInputSchema ]),
  update: z.union([ CompanyUpdateInputSchema,CompanyUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyCreateManyArgsSchema: z.ZodType<Prisma.CompanyCreateManyArgs> = z.object({
  data: z.union([ CompanyCreateManyInputSchema,CompanyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CompanyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CompanyCreateManyAndReturnArgs> = z.object({
  data: z.union([ CompanyCreateManyInputSchema,CompanyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CompanyDeleteArgsSchema: z.ZodType<Prisma.CompanyDeleteArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  where: CompanyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyUpdateArgsSchema: z.ZodType<Prisma.CompanyUpdateArgs> = z.object({
  select: CompanySelectSchema.optional(),
  include: CompanyIncludeSchema.optional(),
  data: z.union([ CompanyUpdateInputSchema,CompanyUncheckedUpdateInputSchema ]),
  where: CompanyWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CompanyUpdateManyArgsSchema: z.ZodType<Prisma.CompanyUpdateManyArgs> = z.object({
  data: z.union([ CompanyUpdateManyMutationInputSchema,CompanyUncheckedUpdateManyInputSchema ]),
  where: CompanyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CompanyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CompanyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CompanyUpdateManyMutationInputSchema,CompanyUncheckedUpdateManyInputSchema ]),
  where: CompanyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CompanyDeleteManyArgsSchema: z.ZodType<Prisma.CompanyDeleteManyArgs> = z.object({
  where: CompanyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomFieldCreateArgsSchema: z.ZodType<Prisma.CustomFieldCreateArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  data: z.union([ CustomFieldCreateInputSchema,CustomFieldUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldUpsertArgsSchema: z.ZodType<Prisma.CustomFieldUpsertArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
  create: z.union([ CustomFieldCreateInputSchema,CustomFieldUncheckedCreateInputSchema ]),
  update: z.union([ CustomFieldUpdateInputSchema,CustomFieldUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldCreateManyArgsSchema: z.ZodType<Prisma.CustomFieldCreateManyArgs> = z.object({
  data: z.union([ CustomFieldCreateManyInputSchema,CustomFieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomFieldCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomFieldCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomFieldCreateManyInputSchema,CustomFieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomFieldDeleteArgsSchema: z.ZodType<Prisma.CustomFieldDeleteArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldUpdateArgsSchema: z.ZodType<Prisma.CustomFieldUpdateArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  data: z.union([ CustomFieldUpdateInputSchema,CustomFieldUncheckedUpdateInputSchema ]),
  where: CustomFieldWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const CustomFieldUpdateManyArgsSchema: z.ZodType<Prisma.CustomFieldUpdateManyArgs> = z.object({
  data: z.union([ CustomFieldUpdateManyMutationInputSchema,CustomFieldUncheckedUpdateManyInputSchema ]),
  where: CustomFieldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomFieldUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomFieldUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CustomFieldUpdateManyMutationInputSchema,CustomFieldUncheckedUpdateManyInputSchema ]),
  where: CustomFieldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomFieldDeleteManyArgsSchema: z.ZodType<Prisma.CustomFieldDeleteManyArgs> = z.object({
  where: CustomFieldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DuplicateCreateArgsSchema: z.ZodType<Prisma.DuplicateCreateArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  data: z.union([ DuplicateCreateInputSchema,DuplicateUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateUpsertArgsSchema: z.ZodType<Prisma.DuplicateUpsertArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  where: DuplicateWhereUniqueInputSchema,
  create: z.union([ DuplicateCreateInputSchema,DuplicateUncheckedCreateInputSchema ]),
  update: z.union([ DuplicateUpdateInputSchema,DuplicateUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateCreateManyArgsSchema: z.ZodType<Prisma.DuplicateCreateManyArgs> = z.object({
  data: z.union([ DuplicateCreateManyInputSchema,DuplicateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DuplicateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DuplicateCreateManyAndReturnArgs> = z.object({
  data: z.union([ DuplicateCreateManyInputSchema,DuplicateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DuplicateDeleteArgsSchema: z.ZodType<Prisma.DuplicateDeleteArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  where: DuplicateWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateUpdateArgsSchema: z.ZodType<Prisma.DuplicateUpdateArgs> = z.object({
  select: DuplicateSelectSchema.optional(),
  include: DuplicateIncludeSchema.optional(),
  data: z.union([ DuplicateUpdateInputSchema,DuplicateUncheckedUpdateInputSchema ]),
  where: DuplicateWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const DuplicateUpdateManyArgsSchema: z.ZodType<Prisma.DuplicateUpdateManyArgs> = z.object({
  data: z.union([ DuplicateUpdateManyMutationInputSchema,DuplicateUncheckedUpdateManyInputSchema ]),
  where: DuplicateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DuplicateUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.DuplicateUpdateManyAndReturnArgs> = z.object({
  data: z.union([ DuplicateUpdateManyMutationInputSchema,DuplicateUncheckedUpdateManyInputSchema ]),
  where: DuplicateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DuplicateDeleteManyArgsSchema: z.ZodType<Prisma.DuplicateDeleteManyArgs> = z.object({
  where: DuplicateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EventCreateArgsSchema: z.ZodType<Prisma.EventCreateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventUpsertArgsSchema: z.ZodType<Prisma.EventUpsertArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  create: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
  update: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventCreateManyArgsSchema: z.ZodType<Prisma.EventCreateManyArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EventCreateManyAndReturnArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventDeleteArgsSchema: z.ZodType<Prisma.EventDeleteArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventUpdateArgsSchema: z.ZodType<Prisma.EventUpdateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
  where: EventWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const EventUpdateManyArgsSchema: z.ZodType<Prisma.EventUpdateManyArgs> = z.object({
  data: z.union([ EventUpdateManyMutationInputSchema,EventUncheckedUpdateManyInputSchema ]),
  where: EventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EventUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.EventUpdateManyAndReturnArgs> = z.object({
  data: z.union([ EventUpdateManyMutationInputSchema,EventUncheckedUpdateManyInputSchema ]),
  where: EventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EventDeleteManyArgsSchema: z.ZodType<Prisma.EventDeleteManyArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IntegrationCreateArgsSchema: z.ZodType<Prisma.IntegrationCreateArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  data: z.union([ IntegrationCreateInputSchema,IntegrationUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationUpsertArgsSchema: z.ZodType<Prisma.IntegrationUpsertArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  where: IntegrationWhereUniqueInputSchema,
  create: z.union([ IntegrationCreateInputSchema,IntegrationUncheckedCreateInputSchema ]),
  update: z.union([ IntegrationUpdateInputSchema,IntegrationUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationCreateManyArgsSchema: z.ZodType<Prisma.IntegrationCreateManyArgs> = z.object({
  data: z.union([ IntegrationCreateManyInputSchema,IntegrationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IntegrationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.IntegrationCreateManyAndReturnArgs> = z.object({
  data: z.union([ IntegrationCreateManyInputSchema,IntegrationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IntegrationDeleteArgsSchema: z.ZodType<Prisma.IntegrationDeleteArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  where: IntegrationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationUpdateArgsSchema: z.ZodType<Prisma.IntegrationUpdateArgs> = z.object({
  select: IntegrationSelectSchema.optional(),
  include: IntegrationIncludeSchema.optional(),
  data: z.union([ IntegrationUpdateInputSchema,IntegrationUncheckedUpdateInputSchema ]),
  where: IntegrationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const IntegrationUpdateManyArgsSchema: z.ZodType<Prisma.IntegrationUpdateManyArgs> = z.object({
  data: z.union([ IntegrationUpdateManyMutationInputSchema,IntegrationUncheckedUpdateManyInputSchema ]),
  where: IntegrationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IntegrationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.IntegrationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ IntegrationUpdateManyMutationInputSchema,IntegrationUncheckedUpdateManyInputSchema ]),
  where: IntegrationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IntegrationDeleteManyArgsSchema: z.ZodType<Prisma.IntegrationDeleteManyArgs> = z.object({
  where: IntegrationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Prisma.InvitationCreateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Prisma.InvitationUpsertArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Prisma.InvitationDeleteArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Prisma.InvitationUpdateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LevelCreateArgsSchema: z.ZodType<Prisma.LevelCreateArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  data: z.union([ LevelCreateInputSchema,LevelUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelUpsertArgsSchema: z.ZodType<Prisma.LevelUpsertArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  where: LevelWhereUniqueInputSchema,
  create: z.union([ LevelCreateInputSchema,LevelUncheckedCreateInputSchema ]),
  update: z.union([ LevelUpdateInputSchema,LevelUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelCreateManyArgsSchema: z.ZodType<Prisma.LevelCreateManyArgs> = z.object({
  data: z.union([ LevelCreateManyInputSchema,LevelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LevelCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LevelCreateManyAndReturnArgs> = z.object({
  data: z.union([ LevelCreateManyInputSchema,LevelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LevelDeleteArgsSchema: z.ZodType<Prisma.LevelDeleteArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  where: LevelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelUpdateArgsSchema: z.ZodType<Prisma.LevelUpdateArgs> = z.object({
  select: LevelSelectSchema.optional(),
  include: LevelIncludeSchema.optional(),
  data: z.union([ LevelUpdateInputSchema,LevelUncheckedUpdateInputSchema ]),
  where: LevelWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LevelUpdateManyArgsSchema: z.ZodType<Prisma.LevelUpdateManyArgs> = z.object({
  data: z.union([ LevelUpdateManyMutationInputSchema,LevelUncheckedUpdateManyInputSchema ]),
  where: LevelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LevelUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.LevelUpdateManyAndReturnArgs> = z.object({
  data: z.union([ LevelUpdateManyMutationInputSchema,LevelUncheckedUpdateManyInputSchema ]),
  where: LevelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LevelDeleteManyArgsSchema: z.ZodType<Prisma.LevelDeleteManyArgs> = z.object({
  where: LevelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ListCreateArgsSchema: z.ZodType<Prisma.ListCreateArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  data: z.union([ ListCreateInputSchema,ListUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListUpsertArgsSchema: z.ZodType<Prisma.ListUpsertArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  where: ListWhereUniqueInputSchema,
  create: z.union([ ListCreateInputSchema,ListUncheckedCreateInputSchema ]),
  update: z.union([ ListUpdateInputSchema,ListUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListCreateManyArgsSchema: z.ZodType<Prisma.ListCreateManyArgs> = z.object({
  data: z.union([ ListCreateManyInputSchema,ListCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ListCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ListCreateManyAndReturnArgs> = z.object({
  data: z.union([ ListCreateManyInputSchema,ListCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ListDeleteArgsSchema: z.ZodType<Prisma.ListDeleteArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  where: ListWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListUpdateArgsSchema: z.ZodType<Prisma.ListUpdateArgs> = z.object({
  select: ListSelectSchema.optional(),
  include: ListIncludeSchema.optional(),
  data: z.union([ ListUpdateInputSchema,ListUncheckedUpdateInputSchema ]),
  where: ListWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ListUpdateManyArgsSchema: z.ZodType<Prisma.ListUpdateManyArgs> = z.object({
  data: z.union([ ListUpdateManyMutationInputSchema,ListUncheckedUpdateManyInputSchema ]),
  where: ListWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ListUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ListUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ListUpdateManyMutationInputSchema,ListUncheckedUpdateManyInputSchema ]),
  where: ListWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ListDeleteManyArgsSchema: z.ZodType<Prisma.ListDeleteManyArgs> = z.object({
  where: ListWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LogCreateArgsSchema: z.ZodType<Prisma.LogCreateArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  data: z.union([ LogCreateInputSchema,LogUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogUpsertArgsSchema: z.ZodType<Prisma.LogUpsertArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  where: LogWhereUniqueInputSchema,
  create: z.union([ LogCreateInputSchema,LogUncheckedCreateInputSchema ]),
  update: z.union([ LogUpdateInputSchema,LogUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogCreateManyArgsSchema: z.ZodType<Prisma.LogCreateManyArgs> = z.object({
  data: z.union([ LogCreateManyInputSchema,LogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LogCreateManyAndReturnArgs> = z.object({
  data: z.union([ LogCreateManyInputSchema,LogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LogDeleteArgsSchema: z.ZodType<Prisma.LogDeleteArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  where: LogWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogUpdateArgsSchema: z.ZodType<Prisma.LogUpdateArgs> = z.object({
  select: LogSelectSchema.optional(),
  include: LogIncludeSchema.optional(),
  data: z.union([ LogUpdateInputSchema,LogUncheckedUpdateInputSchema ]),
  where: LogWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const LogUpdateManyArgsSchema: z.ZodType<Prisma.LogUpdateManyArgs> = z.object({
  data: z.union([ LogUpdateManyMutationInputSchema,LogUncheckedUpdateManyInputSchema ]),
  where: LogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LogUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.LogUpdateManyAndReturnArgs> = z.object({
  data: z.union([ LogUpdateManyMutationInputSchema,LogUncheckedUpdateManyInputSchema ]),
  where: LogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LogDeleteManyArgsSchema: z.ZodType<Prisma.LogDeleteManyArgs> = z.object({
  where: LogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberCreateArgsSchema: z.ZodType<Prisma.MemberCreateArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  data: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberUpsertArgsSchema: z.ZodType<Prisma.MemberUpsertArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
  create: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
  update: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberCreateManyArgsSchema: z.ZodType<Prisma.MemberCreateManyArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberCreateManyAndReturnArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberDeleteArgsSchema: z.ZodType<Prisma.MemberDeleteArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberUpdateArgsSchema: z.ZodType<Prisma.MemberUpdateArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  data: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
  where: MemberWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const MemberUpdateManyArgsSchema: z.ZodType<Prisma.MemberUpdateManyArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberDeleteManyArgsSchema: z.ZodType<Prisma.MemberDeleteManyArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfileCreateArgsSchema: z.ZodType<Prisma.ProfileCreateArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ ProfileCreateInputSchema,ProfileUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileUpsertArgsSchema: z.ZodType<Prisma.ProfileUpsertArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
  create: z.union([ ProfileCreateInputSchema,ProfileUncheckedCreateInputSchema ]),
  update: z.union([ ProfileUpdateInputSchema,ProfileUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileCreateManyArgsSchema: z.ZodType<Prisma.ProfileCreateManyArgs> = z.object({
  data: z.union([ ProfileCreateManyInputSchema,ProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfileCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProfileCreateManyInputSchema,ProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfileDeleteArgsSchema: z.ZodType<Prisma.ProfileDeleteArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileUpdateArgsSchema: z.ZodType<Prisma.ProfileUpdateArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ ProfileUpdateInputSchema,ProfileUncheckedUpdateInputSchema ]),
  where: ProfileWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const ProfileUpdateManyArgsSchema: z.ZodType<Prisma.ProfileUpdateManyArgs> = z.object({
  data: z.union([ ProfileUpdateManyMutationInputSchema,ProfileUncheckedUpdateManyInputSchema ]),
  where: ProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfileUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfileUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProfileUpdateManyMutationInputSchema,ProfileUncheckedUpdateManyInputSchema ]),
  where: ProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfileDeleteManyArgsSchema: z.ZodType<Prisma.ProfileDeleteManyArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RunCreateArgsSchema: z.ZodType<Prisma.RunCreateArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  data: z.union([ RunCreateInputSchema,RunUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunUpsertArgsSchema: z.ZodType<Prisma.RunUpsertArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  where: RunWhereUniqueInputSchema,
  create: z.union([ RunCreateInputSchema,RunUncheckedCreateInputSchema ]),
  update: z.union([ RunUpdateInputSchema,RunUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunCreateManyArgsSchema: z.ZodType<Prisma.RunCreateManyArgs> = z.object({
  data: z.union([ RunCreateManyInputSchema,RunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RunCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RunCreateManyAndReturnArgs> = z.object({
  data: z.union([ RunCreateManyInputSchema,RunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RunDeleteArgsSchema: z.ZodType<Prisma.RunDeleteArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  where: RunWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunUpdateArgsSchema: z.ZodType<Prisma.RunUpdateArgs> = z.object({
  select: RunSelectSchema.optional(),
  include: RunIncludeSchema.optional(),
  data: z.union([ RunUpdateInputSchema,RunUncheckedUpdateInputSchema ]),
  where: RunWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const RunUpdateManyArgsSchema: z.ZodType<Prisma.RunUpdateManyArgs> = z.object({
  data: z.union([ RunUpdateManyMutationInputSchema,RunUncheckedUpdateManyInputSchema ]),
  where: RunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RunUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RunUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RunUpdateManyMutationInputSchema,RunUncheckedUpdateManyInputSchema ]),
  where: RunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RunDeleteManyArgsSchema: z.ZodType<Prisma.RunDeleteManyArgs> = z.object({
  where: RunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TagCreateArgsSchema: z.ZodType<Prisma.TagCreateArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  data: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagUpsertArgsSchema: z.ZodType<Prisma.TagUpsertArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
  create: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
  update: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagCreateManyArgsSchema: z.ZodType<Prisma.TagCreateManyArgs> = z.object({
  data: z.union([ TagCreateManyInputSchema,TagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TagCreateManyAndReturnArgs> = z.object({
  data: z.union([ TagCreateManyInputSchema,TagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TagDeleteArgsSchema: z.ZodType<Prisma.TagDeleteArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagUpdateArgsSchema: z.ZodType<Prisma.TagUpdateArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  data: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
  where: TagWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TagUpdateManyArgsSchema: z.ZodType<Prisma.TagUpdateManyArgs> = z.object({
  data: z.union([ TagUpdateManyMutationInputSchema,TagUncheckedUpdateManyInputSchema ]),
  where: TagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TagUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TagUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TagUpdateManyMutationInputSchema,TagUncheckedUpdateManyInputSchema ]),
  where: TagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TagDeleteManyArgsSchema: z.ZodType<Prisma.TagDeleteManyArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TaskCreateArgsSchema: z.ZodType<Prisma.TaskCreateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskUpsertArgsSchema: z.ZodType<Prisma.TaskUpsertArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  create: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
  update: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskCreateManyArgsSchema: z.ZodType<Prisma.TaskCreateManyArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TaskCreateManyAndReturnArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskDeleteArgsSchema: z.ZodType<Prisma.TaskDeleteArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskUpdateArgsSchema: z.ZodType<Prisma.TaskUpdateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
  where: TaskWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const TaskUpdateManyArgsSchema: z.ZodType<Prisma.TaskUpdateManyArgs> = z.object({
  data: z.union([ TaskUpdateManyMutationInputSchema,TaskUncheckedUpdateManyInputSchema ]),
  where: TaskWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TaskUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TaskUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TaskUpdateManyMutationInputSchema,TaskUncheckedUpdateManyInputSchema ]),
  where: TaskWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TaskDeleteManyArgsSchema: z.ZodType<Prisma.TaskDeleteManyArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserInWorkspaceCreateArgsSchema: z.ZodType<Prisma.UserInWorkspaceCreateArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  data: z.union([ UserInWorkspaceCreateInputSchema,UserInWorkspaceUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceUpsertArgsSchema: z.ZodType<Prisma.UserInWorkspaceUpsertArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  where: UserInWorkspaceWhereUniqueInputSchema,
  create: z.union([ UserInWorkspaceCreateInputSchema,UserInWorkspaceUncheckedCreateInputSchema ]),
  update: z.union([ UserInWorkspaceUpdateInputSchema,UserInWorkspaceUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceCreateManyArgsSchema: z.ZodType<Prisma.UserInWorkspaceCreateManyArgs> = z.object({
  data: z.union([ UserInWorkspaceCreateManyInputSchema,UserInWorkspaceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserInWorkspaceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserInWorkspaceCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserInWorkspaceCreateManyInputSchema,UserInWorkspaceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserInWorkspaceDeleteArgsSchema: z.ZodType<Prisma.UserInWorkspaceDeleteArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  where: UserInWorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceUpdateArgsSchema: z.ZodType<Prisma.UserInWorkspaceUpdateArgs> = z.object({
  select: UserInWorkspaceSelectSchema.optional(),
  include: UserInWorkspaceIncludeSchema.optional(),
  data: z.union([ UserInWorkspaceUpdateInputSchema,UserInWorkspaceUncheckedUpdateInputSchema ]),
  where: UserInWorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const UserInWorkspaceUpdateManyArgsSchema: z.ZodType<Prisma.UserInWorkspaceUpdateManyArgs> = z.object({
  data: z.union([ UserInWorkspaceUpdateManyMutationInputSchema,UserInWorkspaceUncheckedUpdateManyInputSchema ]),
  where: UserInWorkspaceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserInWorkspaceUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserInWorkspaceUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserInWorkspaceUpdateManyMutationInputSchema,UserInWorkspaceUncheckedUpdateManyInputSchema ]),
  where: UserInWorkspaceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserInWorkspaceDeleteManyArgsSchema: z.ZodType<Prisma.UserInWorkspaceDeleteManyArgs> = z.object({
  where: UserInWorkspaceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationTokenCreateArgsSchema: z.ZodType<Prisma.VerificationTokenCreateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenUpsertArgsSchema: z.ZodType<Prisma.VerificationTokenUpsertArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  create: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
  update: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenCreateManyArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationTokenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationTokenDeleteArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenUpdateArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
  where: VerificationTokenWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const VerificationTokenUpdateManyArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyArgs> = z.object({
  data: z.union([ VerificationTokenUpdateManyMutationInputSchema,VerificationTokenUncheckedUpdateManyInputSchema ]),
  where: VerificationTokenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationTokenUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationTokenUpdateManyMutationInputSchema,VerificationTokenUncheckedUpdateManyInputSchema ]),
  where: VerificationTokenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationTokenDeleteManyArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteManyArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WorkflowCreateArgsSchema: z.ZodType<Prisma.WorkflowCreateArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  data: z.union([ WorkflowCreateInputSchema,WorkflowUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowUpsertArgsSchema: z.ZodType<Prisma.WorkflowUpsertArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
  create: z.union([ WorkflowCreateInputSchema,WorkflowUncheckedCreateInputSchema ]),
  update: z.union([ WorkflowUpdateInputSchema,WorkflowUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowCreateManyArgsSchema: z.ZodType<Prisma.WorkflowCreateManyArgs> = z.object({
  data: z.union([ WorkflowCreateManyInputSchema,WorkflowCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WorkflowCreateManyAndReturnArgsSchema: z.ZodType<Prisma.WorkflowCreateManyAndReturnArgs> = z.object({
  data: z.union([ WorkflowCreateManyInputSchema,WorkflowCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WorkflowDeleteArgsSchema: z.ZodType<Prisma.WorkflowDeleteArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowUpdateArgsSchema: z.ZodType<Prisma.WorkflowUpdateArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  data: z.union([ WorkflowUpdateInputSchema,WorkflowUncheckedUpdateInputSchema ]),
  where: WorkflowWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkflowUpdateManyArgsSchema: z.ZodType<Prisma.WorkflowUpdateManyArgs> = z.object({
  data: z.union([ WorkflowUpdateManyMutationInputSchema,WorkflowUncheckedUpdateManyInputSchema ]),
  where: WorkflowWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WorkflowUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.WorkflowUpdateManyAndReturnArgs> = z.object({
  data: z.union([ WorkflowUpdateManyMutationInputSchema,WorkflowUncheckedUpdateManyInputSchema ]),
  where: WorkflowWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WorkflowDeleteManyArgsSchema: z.ZodType<Prisma.WorkflowDeleteManyArgs> = z.object({
  where: WorkflowWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WorkspaceCreateArgsSchema: z.ZodType<Prisma.WorkspaceCreateArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  data: z.union([ WorkspaceCreateInputSchema,WorkspaceUncheckedCreateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceUpsertArgsSchema: z.ZodType<Prisma.WorkspaceUpsertArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  where: WorkspaceWhereUniqueInputSchema,
  create: z.union([ WorkspaceCreateInputSchema,WorkspaceUncheckedCreateInputSchema ]),
  update: z.union([ WorkspaceUpdateInputSchema,WorkspaceUncheckedUpdateInputSchema ]),
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceCreateManyArgsSchema: z.ZodType<Prisma.WorkspaceCreateManyArgs> = z.object({
  data: z.union([ WorkspaceCreateManyInputSchema,WorkspaceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WorkspaceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.WorkspaceCreateManyAndReturnArgs> = z.object({
  data: z.union([ WorkspaceCreateManyInputSchema,WorkspaceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WorkspaceDeleteArgsSchema: z.ZodType<Prisma.WorkspaceDeleteArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  where: WorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceUpdateArgsSchema: z.ZodType<Prisma.WorkspaceUpdateArgs> = z.object({
  select: WorkspaceSelectSchema.optional(),
  include: WorkspaceIncludeSchema.optional(),
  data: z.union([ WorkspaceUpdateInputSchema,WorkspaceUncheckedUpdateInputSchema ]),
  where: WorkspaceWhereUniqueInputSchema,
  relationLoadStrategy: RelationLoadStrategySchema.optional(),
}).strict() ;

export const WorkspaceUpdateManyArgsSchema: z.ZodType<Prisma.WorkspaceUpdateManyArgs> = z.object({
  data: z.union([ WorkspaceUpdateManyMutationInputSchema,WorkspaceUncheckedUpdateManyInputSchema ]),
  where: WorkspaceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WorkspaceUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.WorkspaceUpdateManyAndReturnArgs> = z.object({
  data: z.union([ WorkspaceUpdateManyMutationInputSchema,WorkspaceUncheckedUpdateManyInputSchema ]),
  where: WorkspaceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WorkspaceDeleteManyArgsSchema: z.ZodType<Prisma.WorkspaceDeleteManyArgs> = z.object({
  where: WorkspaceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;