generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SOURCE {
  API
  MANUAL
  SLACK
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

model Activity {
  id          String   @id @default(cuid())
  external_id String?  @unique
  details     Json
  channel_id  String?
  channel     Channel? @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  member_id   String
  member      Member   @relation(fields: [member_id], references: [id], onDelete: Cascade)

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model ApiKey {
  id         String   @id @default(cuid())
  name       String
  token      String   @unique
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@index([id, token])
}

model Channel {
  id           String     @id @default(cuid())
  external_id  String?    @unique
  name         String
  source       SOURCE
  workspace_id String
  workspace    Workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  activities   Activity[]

  @@index([id, workspace_id])
}

model Company {
  id           String    @id @default(cuid())
  name         String
  title        String?
  description  String?
  industry     String?
  address      String?
  website      String?   @unique
  employees    Int?
  founded_at   DateTime?
  members      Member[]
  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model Member {
  id           String    @id @default(cuid())
  first_name   String?
  last_name    String?
  full_name    String?
  emails       String[]  @default([])
  phones       String[]  @default([])
  avatar_url   String?
  job_title    String?
  bio          String?
  gender       GENDER?
  address      String?
  search       String
  source       SOURCE
  tags         String[]
  slack_id     String?   @unique
  company_id   String?
  company      Company?  @relation(fields: [company_id], references: [id], onDelete: SetNull)
  workspace_id String
  joined_at    DateTime?
  deleted_at   DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  workspace  Workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  activities Activity[]

  @@index([id, workspace_id])
}

model Integration {
  id               String    @id @default(cuid())
  external_id      String    @unique
  name             String
  source           SOURCE
  token            String
  slack_user_token String?
  scopes           String
  status           String
  installed_at     DateTime?
  workspace_id     String
  workspace        Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  @@index([id, workspace_id])
}

model Tag {
  id           String    @id @default(cuid())
  name         String
  color        String
  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  hashed_password String
  first_name      String?
  last_name       String?
  full_name       String?
  onboarding      DateTime?
  workspace_id    String
  workspace       Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  apiKeys         ApiKey[]

  @@index([id])
}

model Workflow {
  id           String    @id @default(cuid())
  name         String
  description  String?
  published    Boolean   @default(false)
  last_run_at  DateTime?
  nodes        Json[]
  edges        Json[]
  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model Workspace {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  source       String?
  users        User[]
  members      Member[]
  activities   Activity[]
  workflows    Workflow[]
  tags         Tag[]
  channels     Channel[]
  integrations Integration[]
  companies    Company[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@index([id])
}
