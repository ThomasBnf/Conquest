generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SOURCE {
  API
  MANUAL
  SLACK
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

model Activity {
  id         String  @id @default(cuid())
  details    Json
  channel_id String?
  contact_id String
  contact    Contact @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model ApiKey {
  id         String   @id @default(cuid())
  name       String
  token      String   @unique
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@index([id, token])
}

model Channel {
  id           String    @id @default(cuid())
  external_id  String?   @unique
  name         String
  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model Contact {
  id           String    @id @default(cuid())
  first_name   String?
  last_name    String?
  full_name    String?
  emails       String[]  @default([])
  phone        String?
  avatar_url   String?
  job_title    String?
  bio          String?
  gender       GENDER?
  address      String?
  search       String
  source       SOURCE
  tags         String[]
  slack_id     String?   @unique
  workspace_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  joined_at    DateTime?

  workspace  Workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  activities Activity[]

  @@index([id, workspace_id])
}

model Organization {
  id   String @id @default(cuid())
  name String

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model Tag {
  id    String @id @default(cuid())
  name  String
  color String

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  hashed_password String
  first_name      String?
  last_name       String?
  full_name       String?
  onboarding      DateTime?
  date_range      Json?

  workspace_id String
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  apiKeys      ApiKey[]

  @@index([id])
}

model Workflow {
  id          String  @id @default(cuid())
  icon        String
  name        String
  description String?
  isPublished Boolean @default(false)
  nodes       Json[]
  edges       Json[]

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([id, workspace_id])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  guild_id    String?  @unique
  source      String?
  slack_token String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  users         User[]
  contacts      Contact[]
  activities    Activity[]
  organizations Organization[]
  workflows     Workflow[]
  tags          Tag[]
  channels      Channel[]

  @@index([id])
}
