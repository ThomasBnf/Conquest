import { deleteIntegration } from "@/queries/integrations/deleteIntegration";
import { updateIntegration } from "@/queries/integrations/updateIntegration";
import { LinkedInIntegrationSchema } from "@conquest/zod/schemas/integration.schema";
import type { People } from "@conquest/zod/schemas/types/linkedin";
import { schemaTask } from "@trigger.dev/sdk/v3";
import { z } from "zod";

export const installLinkedin = schemaTask({
  id: "install-linkedin",
  machine: {
    preset: "small-2x",
  },
  retry: {
    maxAttempts: 1,
  },
  schema: z.object({
    linkedin: LinkedInIntegrationSchema,
    organization_id: z.string(),
  }),
  run: async ({ linkedin, organization_id }) => {
    const { details, workspace_id } = LinkedInIntegrationSchema.parse(linkedin);
    const { access_token } = details;

    await updateIntegration({
      id: linkedin.id,
      details: {
        ...linkedin.details,
        organization_id,
      },
      status: "SYNCING",
    });

    // const postsResponse = await fetch(
    //   `https://api.linkedin.com/rest/posts?author=urn:li:organization:${organization_id}&q=author&count=100`,
    //   {
    //     headers: {
    //       Authorization: `Bearer ${access_token}`,
    //       "LinkedIn-Version": "202411",
    //       "Content-Type": "application/json",
    //     },
    //   },
    // );

    // const posts = await postsResponse.json();

    // for (const post of posts.elements) {
    //   console.log("@post", post);
    //   const commentsResponse = await fetch(
    //     `https://api.linkedin.com/v2/socialActions/${post.id}/comments`,
    //     {
    //       headers: {
    //         Authorization: `Bearer ${access_token}`,
    //         "LinkedIn-Version": "202411",
    //         "Content-Type": "application/json",
    //       },
    //     },
    //   );

    //   const commentData = await commentsResponse.json();

    //   for (const comment of commentData.elements) {
    //     console.log("@comment", comment);
    //     const actorId = comment.created.actor.split(":").pop();
    // const projection =
    //   "(id,firstName,lastName,localizedFirstName,localizedLastName,profilePicture,geoLocation(geo~,autoGenerated))";
    const projection =
      "(id,firstName,lastName,localizedFirstName,localizedLastName,profilePicture(displayImage~:playableStreams),headline,summary,industry,geoLocation(geo~,autoGenerated),positions,educations,languages,certifications,volunteer,skills,publications,patents,honors,projects,organizations,recommendationsReceived)";

    const peoplesResponse = await fetch(
      `https://api.linkedin.com/v2/people/(id:iuHQSczloT)?projection=${projection}`,
      {
        headers: {
          Authorization: `Bearer ${access_token}`,
          "LinkedIn-Version": "202411",
          "Content-Type": "application/json",
          "X-RestLi-Protocol-Version": "2.0.0",
        },
      },
    );
    const peopleData = (await peoplesResponse.json()) as People;
    console.log("@peopleData", peopleData);

    //     const {
    //       vanityName,
    //       id,
    //       firstName,
    //       profilePicture,
    //       localizedFirstName,
    //       localizedLastName,
    //       localizedHeadline,
    //     } = peopleData;
    //     const location = firstName.preferredLocale.country;

    //     await upsertMember({
    //       id,
    //       data: {
    //         first_name: localizedFirstName,
    //         last_name: localizedLastName,
    //         primary_email: "",
    //         location,
    //         avatar_url: profilePicture.displayImage,
    //         job_title: localizedHeadline,
    //         source: "LINKEDIN",
    //         workspace_id,
    //       },
    //     });
    //   }
    // }
  },
  onSuccess: async ({ linkedin }) => {
    await updateIntegration({
      id: linkedin.id,
      connected_at: new Date(),
      status: "CONNECTED",
    });
  },
  onFailure: async ({ linkedin }) => {
    await deleteIntegration({
      source: "LINKEDIN",
      integration: linkedin,
    });
  },
});
